1
00:00:00,870 --> 00:00:05,450
안녕하세요, n8n 초급 강좌의
6번째 비디오에 오신 것을 환영합니다.

2
00:00:05,710 --> 00:00:11,210
이번 비디오에서는 몇 가지 유용한 노드를
다루고, 지난 몇 비디오 동안 작업해 온

3
00:00:11,211 --> 00:00:16,010
워크플로를 계속해서 구축해 보겠습니다.

4
00:00:17,170 --> 00:00:22,650
바로 들어가서, 매우 유용한 몇
가지 노드를 빠르게 살펴보겠습니다.

5
00:00:23,490 --> 00:00:28,630
다시 한번 말씀드리지만, 지금까지
Google Sheets 노드, if 노드,

6
00:00:28,631 --> 00:00:33,130
스케줄 트리거 노드를 살펴보았습니다.

7
00:00:33,450 --> 00:00:37,354
이번 비디오에서는 워크플로를 구축할 때

8
00:00:37,355 --> 00:00:40,850
유용하게 사용할 수 있는 몇
가지 다른 노드를 다룰 것입니다.

9
00:00:42,630 --> 00:00:46,750
먼저, 필드 편집 또는 설정 노드가 있습니다.

10
00:00:47,190 --> 00:00:53,270
필드 편집 노드는 항목에서
데이터를 관리하는 데 유용합니다.

11
00:00:53,730 --> 00:00:56,623
예를 들어 워크플로에서 현재 사용 중인

12
00:00:56,624 --> 00:00:59,850
데이터를 정리하는 데 사용할 수 있습니다.

13
00:01:00,290 --> 00:01:08,851
하지만 항목의 데이터를 추가, 형식화,
축소하는 데에도 사용할 수 있습니다.

14
00:01:08,970 --> 00:01:12,227
따라서 워크플로 후반부에서

15
00:01:12,228 --> 00:01:15,711
훨씬 더 깔끔한 데이터를 사용할 수 있습니다.

16
00:01:16,570 --> 00:01:22,513
필드 편집에서는 설정 중인 필드만 유지하거나

17
00:01:22,514 --> 00:01:29,170
모든 필드를 포함하는 옵션을 사용할 수 있습니다.

18
00:01:30,650 --> 00:01:35,650
또 다른 유용한 노드는 함수 노드 중 하나입니다.

19
00:01:35,970 --> 00:01:41,210
이번에는 여러 항목을 처리하는 데 도움이 되는

20
00:01:41,211 --> 00:01:46,690
범주에 속하는 집계 노드에 대해 이야기하겠습니다.

21
00:01:47,050 --> 00:01:53,030
이 노드는 특히 모든 항목에서
데이터를 집계하는 데 사용됩니다.

22
00:01:53,270 --> 00:01:57,270
이 예에서는 두 개의 입력 항목이 있습니다.

23
00:01:57,490 --> 00:01:58,490
각각

24
00:01:58,740 --> 00:02:06,570
이메일을 가지고 있는 사람이
있으며, 이메일 필드에서 집계하고

25
00:02:06,571 --> 00:02:11,374
이 두 항목을 가져와서 모든 입력 항목의 모든

26
00:02:11,375 --> 00:02:16,050
이메일을 포함하는 단일 출력 항목으로 바꿀 수 있습니다.

27
00:02:16,990 --> 00:02:24,450
또한 중복을 제거하거나 총 항목 수를 제한하거나,

28
00:02:24,451 --> 00:02:31,630
예를 들어 항목의 한 키를 여러 항목으로
분할하는 데에도 유사한 노드를 사용할 수 있습니다.

29
00:02:31,830 --> 00:02:36,490
이는 집계 노드의 반대 연산이 될 것입니다.

30
00:02:37,550 --> 00:02:43,550
이번에는 트리거 범주에서 매우
유용한 또 다른 노드는 웹훅 노드입니다.

31
00:02:44,610 --> 00:02:51,990
이 트리거 노드를 캔버스에 추가하면
테스트 URL 및 프로덕션 URL 아래에

32
00:02:51,991 --> 00:02:57,310
URL이 할당되며, 원할 경우 수정할 수 있습니다.

33
00:02:58,290 --> 00:03:04,410
이 단계를 테스트하거나 워크플로가
활성화되면 들어오는 웹훅에 대해

34
00:03:04,411 --> 00:03:10,510
테스트 URL 또는 프로덕션 URL을 수신 대기합니다.

35
00:03:10,511 --> 00:03:18,350
그런 다음 웹훅에서 받은 데이터를 초기
데이터로 사용하여 워크플로를 실행하여

36
00:03:18,351 --> 00:03:24,090
해당 웹훅 수신에서 자동화할 수 있습니다.

37
00:03:26,590 --> 00:03:30,800
N8n으로 넘어가서 지금까지 작업해온

38
00:03:30,801 --> 00:03:34,770
워크플로를 계속 구축하고, 웹훅을
사용한 간단한 예도 보여드리겠습니다.

39
00:03:36,310 --> 00:03:40,599
여기 지난 몇 비디오에서

40
00:03:40,600 --> 00:03:44,830
천천히 구축해 온 워크플로로 다시 돌아왔습니다.

41
00:03:45,230 --> 00:03:48,930
먼저 워크플로를 테스트하여
모든 데이터를 가져와 보겠습니다.

42
00:03:49,850 --> 00:03:54,070
다음에 하고 싶은 것은 먼저 웹훅을 정리하는 것입니다.

43
00:03:54,090 --> 00:03:56,450
우리가 작업 중인 데이터를 조금 정리하겠습니다.

44
00:03:56,770 --> 00:04:02,350
필드 편집 노드를 사용하여 이 작업을 수행할 것입니다.

45
00:04:02,970 --> 00:04:10,590
이것은 매우 매우 유용한
노드이며, 필드 편집 노드를 사용하여

46
00:04:10,591 --> 00:04:16,170
자신에게 유용한 데이터만 유지하는 것이 좋습니다.

47
00:04:16,310 --> 00:04:20,534
이렇게 하면 사용하지 않을 수 있는

48
00:04:20,535 --> 00:04:23,610
많은 필드가 있는 매우 복잡한
항목을 갖지 않을 수 있습니다.

49
00:04:24,090 --> 00:04:27,721
어쨌든 언제든지 해당 필드 편집

50
00:04:27,722 --> 00:04:30,430
노드로 돌아가서 필요한 경우
추가 필드를 추가할 수 있습니다.

51
00:04:30,810 --> 00:04:37,170
여기 출력에 포함 설정에서 입력
필드를 선택하지 않을 것입니다.

52
00:04:37,171 --> 00:04:42,630
필요한 모든 것을 필드로 직접 매핑할 것이기 때문입니다.

53
00:04:43,410 --> 00:04:48,334
따라서 우리가 전에 본 것처럼 이름과 성을 연결하는

54
00:04:48,335 --> 00:04:52,190
전체 이름 필드를 추가할 것입니다.

55
00:04:52,690 --> 00:04:56,744
그리고 성을 대문자로 만들도록

56
00:04:56,745 --> 00:05:00,070
대문자 함수를 사용할 것입니다.

57
00:05:00,170 --> 00:05:06,630
여기서 이 단계를 테스트하면 각
항목에 대한 전체 이름만 갖게 됩니다.

58
00:05:08,670 --> 00:05:12,390
지난 비디오에서 보여 드렸듯이 이메일이 필요합니다.

59
00:05:12,610 --> 00:05:18,710
따라서 이메일 필드를 드래그하여
이메일이라고 이름을 지정할 것입니다.

60
00:05:19,370 --> 00:05:22,870
그리고 회사 필드도 필요합니다.

61
00:05:22,990 --> 00:05:27,030
따라서 회사 필드를 드래그하여
회사라고 이름을 지정할 것입니다.

62
00:05:27,690 --> 00:05:30,739
여기에서 이 단계를 실행하면

63
00:05:30,740 --> 00:05:35,810
전체 이름, 이메일 및 회사와
같이 필요한 정보만 갖게 됩니다.

64
00:05:37,590 --> 00:05:41,892
이 단계에서부터 모든 향후 노드는

65
00:05:41,893 --> 00:05:44,610
이전과 같이 실행되어야 합니다.

66
00:05:45,130 --> 00:05:49,803
여기에서 사용 가능하고 사용되는 이메일 키가 있습니다.

67
00:05:49,804 --> 00:05:53,790
사용 가능한 이메일 키가 있습니다.

68
00:05:54,090 --> 00:05:55,090
여기.

69
00:05:55,290 --> 00:06:01,270
따라서 이 시트에서 데이터를 읽고 싶습니다.

70
00:06:01,850 --> 00:06:06,581
그런 다음 필요한 키만 유지하도록 몇 가지 간단한

71
00:06:06,582 --> 00:06:12,730
형식을 지정하여 저장하고 만들 것입니다.

72
00:06:13,430 --> 00:06:17,970
그리고 이 매우 간단한 워크플로를 마무리하기 위해

73
00:06:17,971 --> 00:06:25,210
이 조건을 만족하는 항목으로 몇
가지 슬랙 메시지를 보낼 것입니다.

74
00:06:26,190 --> 00:06:32,610
여기서 참 분기에서 집계 노드를 사용할 것입니다.

75
00:06:33,290 --> 00:06:36,645
그리고 여기서 이전 필드를 실행하여

76
00:06:36,646 --> 00:06:39,490
무엇을 처리하고 있는지 볼 수 있도록 해야 합니다.

77
00:06:40,670 --> 00:06:46,370
그리고 이메일 필드를 집계할 것입니다.

78
00:06:46,590 --> 00:06:49,210
여기에서 개별 필드를 집계하고 싶습니다.

79
00:06:49,590 --> 00:06:51,750
그리고 여기에 필드 이름을 입력하고 싶습니다.

80
00:06:52,690 --> 00:06:57,790
일부 노드에서는 필드 이름을 묻습니다.

81
00:06:58,150 --> 00:07:03,510
이 경우 표현식을 사용하지 않을 것입니다.

82
00:07:03,710 --> 00:07:09,310
여기서 표현식을 드래그 앤 드롭하려고 하면 자동으로

83
00:07:09,311 --> 00:07:11,690
필드 이름이 아니라 표현식이 제공됩니다.

84
00:07:12,450 --> 00:07:14,310
여기서 이 단계를 테스트할 수 있습니다.

85
00:07:14,470 --> 00:07:17,581
그리고 이 조건을 만족하는

86
00:07:17,582 --> 00:07:21,091
모든 이메일이 포함된 하나의
출력이 있음을 알게 될 것입니다.

87
00:07:22,550 --> 00:07:28,030
여기서 회사 정보를 포함하는 것이 흥미로울 수 있습니다.

88
00:07:28,650 --> 00:07:31,270
따라서 집계할 다른 필드를 추가할 수도 있습니다.

89
00:07:31,390 --> 00:07:35,750
이 경우 회사 필드를 입력하기만 하면 됩니다.

90
00:07:36,190 --> 00:07:40,270
여기 모든 이메일과 모든 회사가 있습니다.

91
00:07:41,250 --> 00:07:47,637
여기서 하고 싶은 것은 가입한 모든 이메일과

92
00:07:47,638 --> 00:07:51,130
모든 회사가 포함된 슬랙 메시지를 보내는 것입니다.

93
00:07:51,590 --> 00:07:59,990
따라서 슬랙 노드와 메시지 보내기 작업을 사용할 것입니다.

94
00:08:01,100 --> 00:08:04,310
여기 이미 연결된 슬랙 계정이 있습니다.

95
00:08:04,590 --> 00:08:07,730
이것은 인스턴스에 이미 설정되어 있어야 합니다.

96
00:08:08,390 --> 00:08:15,710
여기서 이번 주 가입에 대한 매우 간단한
텍스트 메시지 요약을 작성할 수 있습니다.

97
00:08:15,830 --> 00:08:16,830
예를 들어.

98
00:08:17,470 --> 00:08:18,950
표현식을 사용하고 있는지 확인하십시오.

99
00:08:19,470 --> 00:08:24,150
그리고 여기에 이메일 목록을 추가할 수 있습니다.

100
00:08:28,100 --> 00:08:32,520
그런 다음 이번 주에 가입한 회사들.

101
00:08:33,880 --> 00:08:35,860
그리고 회사 목록을 추가할 수 있습니다.

102
00:08:37,380 --> 00:08:43,440
여기서 이 단계를 테스트하면, 앗,
메시지를 보낼 사람을 결정해야 합니다.

103
00:08:43,600 --> 00:08:48,860
따라서 사용자, 그리고 제 이름
Maxim을 여기에 입력할 수 있습니다.

104
00:08:49,780 --> 00:08:56,820
이미 설정한 제 슬랙 자격 증명을
사용하여, 모든 가입 요약, 즉 이메일 목록과

105
00:08:56,821 --> 00:09:02,240
회사 목록인 모든 회사 요약을
사용하여, 저 자신에게 메시지를 보냅니다.

106
00:09:02,241 --> 00:09:06,760
이메일 목록과 회사 목록이 있습니다.

107
00:09:07,620 --> 00:09:11,580
이 단계를 테스트하면 슬랙 알림을 받습니다.

108
00:09:12,200 --> 00:09:19,280
그리고 여기서 슬랙으로부터 "메시지가
전송되었습니다"라는 응답을 받았습니다.

109
00:09:19,560 --> 00:09:22,627
메시지는 여기 있고, 이번 주 가입

110
00:09:22,628 --> 00:09:25,200
요약을 볼 수 있고, 모든 이메일이 있습니다.

111
00:09:25,880 --> 00:09:28,480
이번 주에 가입한 회사, 모든 회사가 있습니다.

112
00:09:30,140 --> 00:09:38,240
이 작업을 수행하는 또 다른 방법은 n8n이
항목당 한 번씩 각 노드를 실행하는 방식 때문에

113
00:09:38,241 --> 00:09:43,520
데이터를 집계하지 않기로 결정할 수도 있었습니다.

114
00:09:43,660 --> 00:09:47,360
여기서 이 노드를 삭제하면 이 둘을 다시 연결합니다.

115
00:09:48,260 --> 00:09:57,161
그리고 여기에서 메시지를 변경하고 이메일, 쉼표, 회사,

116
00:09:57,162 --> 00:10:05,540
이름, 콜론, 회사의 새로운 가입이라고 말할 수 있습니다.

117
00:10:06,620 --> 00:10:12,860
그리고 이전 슬라이드에서 보았듯이
이것은 모든 이메일과 모든 회사로 하나의

118
00:10:12,861 --> 00:10:20,460
메시지만 갖는 대신 여기에서 5개의 메시지를 갖게 됩니다.

119
00:10:20,620 --> 00:10:25,120
즉, 하나의 메시지, 새로운
가입, Quantum의 Marcus.

120
00:10:25,860 --> 00:10:33,720
다음 메시지, 새로운 가입,
Horizon의 Sophia 등이 있습니다.

121
00:10:33,820 --> 00:10:42,120
여기 항목에 몇 명의 사람만 있기
때문에, 하나의 요약 메시지를 보내든,

122
00:10:42,121 --> 00:10:48,040
사람당 개별 메시지를 하나씩
보내든 별로 중요하지 않습니다.

123
00:10:48,600 --> 00:10:53,900
그러나 수십 개 또는 수백 개의
이메일을 처리해야 하는 경우 항상

124
00:10:53,901 --> 00:11:00,340
데이터를 집계하고 하나의 요약
메시지로 보내는 것을 우선시할 것입니다.

125
00:11:01,980 --> 00:11:06,300
이제 웹훅 워크플로 예를 간단히 살펴보겠습니다.

126
00:11:06,640 --> 00:11:12,200
여기서 캔버스에 웹훅 트리거를 추가할 것입니다.

127
00:11:12,201 --> 00:11:16,280
그러면 테스트 URL과 프로덕션 URL이 제공됩니다.

128
00:11:16,520 --> 00:11:22,480
테스트 URL은 워크플로를 테스트할
때 사용되며, 프로덕션 URL은

129
00:11:22,481 --> 00:11:26,960
워크플로가 활성화되거나 프로덕션
환경으로 푸시된 후 사용됩니다.

130
00:11:28,220 --> 00:11:34,541
여기서 POST 메서드를 사용하고
이 테스트 URL을 복사할 것입니다.

131
00:11:35,060 --> 00:11:40,720
여기에서 테스트 이벤트를 수신 대기할 수 있으며,

132
00:11:42,200 --> 00:11:48,940
내부적으로 작은 테스트 이벤트를
보낼 수 있는 작은 스크립트가 있습니다.

133
00:11:49,920 --> 00:11:54,779
여기서 웹훅 트리거로 본문을 보내는

134
00:11:54,780 --> 00:12:00,261
작은 Python 스크립트를 사용한 것을 볼 수 있습니다.

135
00:12:00,740 --> 00:12:07,640
여기 일반적인 헤더, 매개변수, 쿼리 및 본문이 있습니다.

136
00:12:08,200 --> 00:12:11,841
본문에는 이름, 성,

137
00:12:11,861 --> 00:12:15,760
회사, 이메일, 도메인 및 이벤트에 대한 정보가 있습니다.

138
00:12:16,820 --> 00:12:21,812
여기서 워크플로를 테스트했으므로

139
00:12:21,813 --> 00:12:25,280
이 데이터에서 워크플로를 구축하기 시작할 수 있습니다.

140
00:12:25,820 --> 00:12:29,620
이 단계에서 하고 싶은 것은 데이터를 고정하는 것입니다.

141
00:12:29,740 --> 00:12:34,420
그래서 떠났다가 돌아와야 하는 경우 언제든지
이 데이터를 사용하여 계속 작업할 수 있습니다.

142
00:12:34,540 --> 00:12:41,680
여기서 워크플로를 새로 고치면 고정된
데이터에 계속 액세스할 수 있습니다.

143
00:12:41,681 --> 00:12:46,040
그리고 여기서 꽤 간단한 워크플로를 구축할 수 있습니다.

144
00:12:46,420 --> 00:13:06,300
이벤트가 초대된 팀 구성원과
같으면 슬랙 메시지를 보내는데,

145
00:13:06,301 --> 00:13:14,140
다시 사용자에게 보내고, 저 자신에게 보냅니다.

146
00:13:15,460 --> 00:13:17,520
그리고 간단한 메시지를 보낼 수 있습니다.

147
00:13:17,760 --> 00:13:23,620
예를 들어, 이메일이 팀 구성원을 초대했습니다.

148
00:13:24,960 --> 00:13:26,760
그리고 이 단계를 테스트할 수 있습니다.

149
00:13:27,620 --> 00:13:31,520
그리고 새 팀 구성원이 초대될 때마다 웹훅을 받습니다.

150
00:13:31,620 --> 00:13:32,620
참으로 내려갑니다.

151
00:13:33,640 --> 00:13:35,800
그런 다음 슬랙 메시지를 보냅니다.

152
00:13:36,960 --> 00:13:41,420
새로운 팀 구성원이 있는 경우 여기에서
다양한 종류의 이벤트를 가질 수 있습니다.

153
00:13:41,860 --> 00:13:46,151
따라서 초대된 팀 구성원 대신

154
00:13:46,152 --> 00:13:50,021
계정 생성 이벤트가 있을 수 있습니다.

155
00:13:50,320 --> 00:13:55,620
따라서 데이터를 고정 해제하고
다른 테스트 페이로드를 보낼 것입니다.

156
00:13:56,680 --> 00:14:05,800
이번에는 계정 생성 이벤트가
있는 페이로드를 보낼 것입니다.

157
00:14:07,540 --> 00:14:12,660
따라서 이번에는 초대된 팀 구성원이
아니라 계정이 생성되었습니다.

158
00:14:12,880 --> 00:14:15,800
그리고 다른 분기를 만들 수 있습니다.

159
00:14:16,020 --> 00:14:26,000
예를 들어 이벤트가 계정 생성과 같다면

160
00:14:26,001 --> 00:14:34,540
슬랙 메시지를 보내고 싶습니다.

161
00:14:35,800 --> 00:14:39,500
자신과 매우 비슷합니다.

162
00:14:45,290 --> 00:14:47,170
메시지를 보내는 것과 함께요.

163
00:14:52,310 --> 00:14:55,650
이메일이 계정을 만들었습니다.

164
00:15:00,280 --> 00:15:03,040
이제 연결을 정리하기만 하면 됩니다.

165
00:15:03,700 --> 00:15:07,880
여기서 여기를 원합니다.

166
00:15:07,960 --> 00:15:10,740
계정이 생성되지 않았다면요.

167
00:15:10,780 --> 00:15:14,220
그런 다음 초대된 팀 구성원인지 확인합니다.

168
00:15:14,680 --> 00:15:17,778
그리고 여기에서 이벤트 종류에 따라

169
00:15:17,779 --> 00:15:20,540
알려주는 매우 간단한 워크플로가 있습니다.

170
00:15:20,840 --> 00:15:25,100
분명히 if 노드를 스위치로 바꿀 수 있습니다.

171
00:15:26,000 --> 00:15:28,460
하지만 그것은 다음 시간에요.

172
00:15:30,600 --> 00:15:37,180
n8n 초급 강좌의 6번째
비디오를 시청해 주셔서 감사합니다.

173
00:15:37,181 --> 00:15:40,082
여기서 그 첫 번째 워크플로를 계속 만들고

174
00:15:40,083 --> 00:15:43,940
웹훅 노드를 처음으로 간단하게 사용해 보았습니다.

175
00:15:44,680 --> 00:15:49,289
여기서 흥미로운 점은 필터링하거나

176
00:15:49,290 --> 00:15:52,620
다른 분기를 만드는 것 이상이라는 것입니다.

177
00:15:52,700 --> 00:15:55,180
여러 항목을 처리했습니다.

178
00:15:55,520 --> 00:15:58,358
그리고 그것은 워크플로를

179
00:15:58,359 --> 00:16:00,860
구축할 때 매우 유용할 것입니다.

180
00:16:01,000 --> 00:16:06,760
항목 세트에서 평균 데이터를 집계해야 하는 경우.

181
00:16:07,240 --> 00:16:13,820
다음 비디오에서는 n8n이
워크플로의 과거 실행을 저장하는 방법과

182
00:16:13,821 --> 00:16:18,240
오류를 더 잘 처리하기 위해 이를
사용하는 방법을 다루겠습니다.

183
00:16:18,940 --> 00:16:20,320
그럼 다음 비디오에서 뵙겠습니다.

