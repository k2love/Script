1
00:00:00,000 --> 00:00:05,100
Hello and welcome to video number
five of the beginner course for n8n.

2
00:00:05,360 --> 00:00:08,892
In this video, we'll be
covering some core workflow

3
00:00:08,893 --> 00:00:13,120
concepts and continue building
our first workflow together.

4
00:00:14,990 --> 00:00:20,880
Let's start off by covering some important
core workflow concepts you'll need to

5
00:00:20,881 --> 00:00:23,600
understand before
building your own workflows.

6
00:00:25,440 --> 00:00:27,680
Here we have the canvas.

7
00:00:27,920 --> 00:00:31,940
So from the canvas, we can
see the main workflow elements.

8
00:00:32,320 --> 00:00:38,700
Up here we have the workflow menu, the name
and tags associated with that workflow.

9
00:00:39,000 --> 00:00:42,380
We have the workflow
activation settings here.

10
00:00:42,700 --> 00:00:47,236
We can also access the
version history and workflow

11
00:00:47,237 --> 00:00:50,921
specific settings up
in the top right corner.

12
00:00:51,600 --> 00:00:55,740
In the middle, obviously, we have
the nodes of the given workflow.

13
00:00:56,140 --> 00:00:59,500
And we have some zoom
settings to the bottom left.

14
00:01:00,800 --> 00:01:06,380
Activating the workflow is what allows
us to push a workflow to production.

15
00:01:06,780 --> 00:01:11,600
And is what actually allows us to
start using the workflow automatically,

16
00:01:12,480 --> 00:01:16,140
will cover work for activation
a little bit later in n8n.

17
00:01:16,940 --> 00:01:21,580
And of course, in the canvas we have the
nodes, which are going to be the big nodes.

18
00:01:21,581 --> 00:01:27,814
And in the이 The main
workflow menu is where you'll

19
00:01:27,815 --> 00:01:31,501
find all the workflows
of your A&N instance.

20
00:01:32,260 --> 00:01:36,360
You'll find information like tags
and owners that you can filter on.

21
00:01:36,780 --> 00:01:43,040
You can also find all workflows of
which you are the creator by clicking my

22
00:01:43,041 --> 00:01:48,420
workflows down here to see
only workflows owned by you.

23
00:01:48,421 --> 00:01:51,901
You can create a workflow
and every time you do,

24
00:01:51,902 --> 00:01:55,480
you are going to be
assigned as the default owner.

25
00:01:57,440 --> 00:02:03,720
From the workflow settings, so to the
top right of the canvas, we can access

26
00:02:03,721 --> 00:02:08,720
everything that has to do with workflow
accessibility, as well as the error

27
00:02:08,721 --> 00:02:11,760
workflow and how workflow
executions are saved.

28
00:02:12,320 --> 00:02:18,320
We'll be covering both error
workflows and saved executions in video.

29
00:02:18,420 --> 00:02:19,420
Number seven.

30
00:02:21,420 --> 00:02:26,180
Let's look at how nodes are connected
and how we actually can create workflows.

31
00:02:27,820 --> 00:02:30,800
Every workflow starts
with a trigger node.

32
00:02:31,100 --> 00:02:35,580
You can recognize them by the fact
that they only have an output branch,

33
00:02:35,840 --> 00:02:36,840
as you can see here.

34
00:02:37,920 --> 00:02:42,780
And they have the orange
lightning icon next to them.

35
00:02:43,300 --> 00:02:46,420
A workflow can have
multiple different triggers.

36
00:02:46,421 --> 00:02:49,108
Multiple of the same
trigger or multiple

37
00:02:49,109 --> 00:02:53,181
different triggers for
more complex use cases.

38
00:02:53,240 --> 00:02:56,100
And the trigger is what
starts the workflow.

39
00:02:56,380 --> 00:03:00,045
Except when testing
the workflow, it must be

40
00:03:00,046 --> 00:03:03,301
activated for the
trigger to actually work.

41
00:03:05,620 --> 00:03:09,958
In the canvas, when we
double click on a node, we

42
00:03:09,959 --> 00:03:13,640
can see the nodes before
and after the given node.

43
00:03:13,641 --> 00:03:19,420
You can use these little icons to navigate
through the workflow as you are building.

44
00:03:19,720 --> 00:03:24,222
Here we have a very simple
example when clicking execute

45
00:03:24,302 --> 00:03:29,200
workflow, Google Sheets, filter,
and then an edit fields node.

46
00:03:29,440 --> 00:03:33,059
And by double clicking the
filter node, we can see to the

47
00:03:33,099 --> 00:03:36,400
left, Google Sheets, and to
the right, the edit filter node.

48
00:03:39,710 --> 00:03:43,890
Another core topic we
need to cover is branching.

49
00:03:43,891 --> 00:03:48,730
So branching is very important
when building complex workflows.

50
00:03:49,090 --> 00:03:54,869
Branches are how we create
different paths or different

51
00:03:54,870 --> 00:03:58,391
sets of actions depending
on different conditions.

52
00:03:59,470 --> 00:04:05,850
Branches is what allows us to create
complex workflows where one workflow is

53
00:04:05,851 --> 00:04:13,870
able to cover a large variety of cases and not only one
single case. We can use them in many different ways.

54
00:04:13,871 --> 00:04:15,890
We can create branches
in two different ways.

55
00:04:16,450 --> 00:04:21,350
The first way is we use a node
that has multiple output options.

56
00:04:21,830 --> 00:04:27,550
In this case, each item will follow
only one of the multiple paths.

57
00:04:28,070 --> 00:04:33,350
So here, for example, we have an if
node and the if node has two outputs,

58
00:04:33,550 --> 00:04:34,550
true and false.

59
00:04:35,050 --> 00:04:38,210
As we can see, we
have three input items.

60
00:04:38,470 --> 00:04:43,770
And only one item
goes through true.

61
00:04:43,870 --> 00:04:46,410
And two items go through false.

62
00:04:46,610 --> 00:04:50,390
So each item only
follows one specific path.

63
00:04:51,370 --> 00:04:55,921
Another way to create
branches is by dragging

64
00:04:55,922 --> 00:04:59,530
two or more output
lines from a single node.

65
00:04:59,750 --> 00:05:04,352
This means every single
item will follow every path

66
00:05:04,353 --> 00:05:08,190
and will be duplicated
out by the number of paths.

67
00:05:08,410 --> 00:05:12,710
We'll see what this
looks like in just a minute.

68
00:05:14,470 --> 00:05:20,110
Nodes with multiple output branches will have
different sets of output items, obviously.

69
00:05:20,470 --> 00:05:27,170
And these can be accessed from
the output data of the given node.

70
00:05:27,350 --> 00:05:33,650
For example, here, the if node has
an output item for items that satisfy the

71
00:05:33,651 --> 00:05:38,350
condition and an output item for
items that don't satisfy the condition.

72
00:05:40,230 --> 00:05:43,710
Let's jump into n8n and
see what all of this looks like.

73
00:05:45,450 --> 00:05:48,110
So here we are back in n8n.

74
00:05:48,510 --> 00:05:53,210
The first thing I'd like to show
you is triggers and activation.

75
00:05:53,630 --> 00:05:57,781
So this workflow that we
started building, that we execute

76
00:05:57,782 --> 00:06:01,510
manually before reading some
information in a Google Sheet.

77
00:06:01,670 --> 00:06:07,750
If we want this workflow to execute,
let's say, every morning at 8am,

78
00:06:07,970 --> 00:06:11,550
we could use the
schedule trigger.

79
00:06:11,551 --> 00:06:18,790
And this would allow us to
set the trigger interval, how

80
00:06:18,791 --> 00:06:23,150
many days between each
trigger and what hour to trigger at.

81
00:06:23,350 --> 00:06:30,970
So in this case, we would like to trigger
every day with every one day as spacing.

82
00:06:31,230 --> 00:06:33,710
And we're going
to trigger it at 8am.

83
00:06:34,650 --> 00:06:39,590
Here you can see we have
multiple triggers on a given workflow.

84
00:06:39,591 --> 00:06:43,840
And here, if I want to
test this step, it is going

85
00:06:43,841 --> 00:06:50,170
to execute even though it
is not 8am on a given day.

86
00:06:51,490 --> 00:06:56,810
However, if I want to, once I'm done
building this workflow, if I wanted to

87
00:06:56,811 --> 00:07:02,870
actually run every day at 8am, I have to
make sure that the workflow is activated.

88
00:07:03,210 --> 00:07:06,710
So when the workflow is activated,
you will get a confirmation message.

89
00:07:06,711 --> 00:07:11,691
Your schedule trigger will now trigger
executions on the schedule you have defined.

90
00:07:11,830 --> 00:07:17,390
And now I could
remove this manual step.

91
00:07:19,390 --> 00:07:23,210
Every time you activate a
workflow, it will automatically save.

92
00:07:23,550 --> 00:07:26,750
So make sure that your
workflow is ready to be

93
00:07:26,751 --> 00:07:30,130
activated before you
actually do turn it on.

94
00:07:31,210 --> 00:07:33,910
So, continuing to
build this workflow.

95
00:07:34,910 --> 00:07:38,910
Let's add a node after
the Google Sheets.

96
00:07:38,970 --> 00:07:42,350
First, let's execute
so we have the data.

97
00:07:42,710 --> 00:07:47,552
Just as a reminder, we
have here a list of contacts

98
00:07:47,592 --> 00:07:50,850
with their first name, last
name, email, and company.

99
00:07:51,570 --> 00:07:55,043
So what we'd like to do
here is, first of all, we'd

100
00:07:55,044 --> 00:07:57,930
like to remove everyone
that doesn't have an email.

101
00:07:58,450 --> 00:08:00,850
Let's say we want to
email all of these people.

102
00:08:01,150 --> 00:08:03,430
If people do not have an email.

103
00:08:03,910 --> 00:08:06,250
Then there's nothing
we can do with them.

104
00:08:06,390 --> 00:08:10,937
So we are going to use
the filter node to filter

105
00:08:10,938 --> 00:08:14,711
out every contact that
does not have an email.

106
00:08:15,810 --> 00:08:19,530
So here in the filter node,
we have our conditions.

107
00:08:19,910 --> 00:08:27,110
And here we want to make sure
that the email is going to be a string,

108
00:08:27,290 --> 00:08:29,870
a sequence of
letters and characters.

109
00:08:30,470 --> 00:08:33,410
And we want to make
sure that it exists.

110
00:08:34,350 --> 00:08:40,850
So by executing this step, we can
see that we went from 10 to 10 items.

111
00:08:41,390 --> 00:08:45,260
In this case, we can
see that even if the

112
00:08:45,261 --> 00:08:48,950
email is empty, we still
have an empty value.

113
00:08:49,310 --> 00:08:54,775
So in this case, the
condition would not be

114
00:08:54,776 --> 00:09:00,011
exists, but rather is not
equal to an empty string.

115
00:09:00,170 --> 00:09:05,930
Here, if we test this step again, we
will see that we go down from 10 items

116
00:09:05,931 --> 00:09:10,710
in the input to eight items that were
kept and two items that were discarded.

117
00:09:11,770 --> 00:09:13,370
Items that had empty emails.

118
00:09:13,610 --> 00:09:17,146
So from here on, we
only have the eight items

119
00:09:17,147 --> 00:09:21,171
that we want to work
with that have emails.

120
00:09:21,850 --> 00:09:27,910
From here, we could think, OK,
maybe we want a different kind of

121
00:09:27,911 --> 00:09:34,753
behavior, depending on if the
person has a professional email

122
00:09:34,754 --> 00:09:39,890
address or a work email address
or a personal email address.

123
00:09:40,310 --> 00:09:43,410
So here we can add an if node.

124
00:09:45,270 --> 00:09:48,110
And in the if node, we
can add some conditions.

125
00:09:48,450 --> 00:09:53,650
So looking at the JSONs,
we see here a Gmail

126
00:09:53,651 --> 00:09:57,851
address, some work emails
and a hotmail address.

127
00:09:58,610 --> 00:10:12,450
So our condition here is going to be we
want the email to not contain gmail.com.

128
00:10:13,490 --> 00:10:17,910
This will allow us to filter
out the Gmail addresses.

129
00:10:19,050 --> 00:10:22,590
And as a second
step, we could filter out.

130
00:10:24,090 --> 00:10:26,330
So here we see
we have a gmail.fr.

131
00:10:26,610 --> 00:10:28,570
And we have a hotmail address.
And we have a gmail.com.

132
00:10:29,150 --> 00:10:31,670
So by simplifying this
condition by removing the dot

133
00:10:31,671 --> 00:10:36,230
com, we could just remove
anything that has at Gmail.

134
00:10:37,060 --> 00:10:40,630
And we can add a condition
when we add a condition.

135
00:10:41,190 --> 00:10:44,170
And so we have two
conditions in our if node.

136
00:10:44,310 --> 00:10:47,510
We have to decide how we
want to combine the conditions.

137
00:10:48,510 --> 00:10:54,410
Here we want to exclude everyone
whose email contains at Gmail.

138
00:10:56,890 --> 00:11:00,450
Or anyone whose email
contains at Hotmail.

139
00:11:00,590 --> 00:11:03,730
So in this case, we're
going to be using the or filter.

140
00:11:04,450 --> 00:11:06,990
So again, we drag
and drop email.

141
00:11:07,350 --> 00:11:15,310
And we want it to not contain Hotmail
or actually at Hotmail would be better.

142
00:11:16,770 --> 00:11:18,310
If we test this step.

143
00:11:22,670 --> 00:11:26,330
So if we test this step, we
can see that none of the items.

144
00:11:26,331 --> 00:11:28,430
Actually went into
the false branch.

145
00:11:28,690 --> 00:11:36,430
And this is because we are creating the
branch of professional email addresses.

146
00:11:36,630 --> 00:11:39,470
And so we actually should
use the and condition.

147
00:11:40,090 --> 00:11:44,830
The professional email addresses
are that they don't contain Gmail.

148
00:11:44,990 --> 00:11:47,270
And that they don't
contain Hotmail.

149
00:11:47,390 --> 00:11:48,690
So here I can test this step.

150
00:11:49,830 --> 00:11:53,370
Here we can see that we
have multiple branches.

151
00:11:53,371 --> 00:11:58,970
So if I were to add a node here.

152
00:11:59,210 --> 00:12:02,330
And then another one here.

153
00:12:03,450 --> 00:12:05,790
And I execute
again this if node.

154
00:12:05,950 --> 00:12:09,690
We're going to see five
items are going up this branch.

155
00:12:09,910 --> 00:12:12,790
And three items are
going down this branch.

156
00:12:14,290 --> 00:12:15,850
If we had...

157
00:12:16,450 --> 00:12:20,870
This allows us to create these
branches where each item of the input.

158
00:12:20,970 --> 00:12:23,450
Is going down only one of
these branches. These paths.

159
00:12:24,350 --> 00:12:30,870
If we were to just drag
another if from the filter node.

160
00:12:32,770 --> 00:12:34,990
And then maybe
just realign things.

161
00:12:37,210 --> 00:12:38,790
So we can see a bit better.

162
00:12:40,290 --> 00:12:42,490
And here I execute
the filter node.

163
00:12:42,610 --> 00:12:44,310
We can see that in this case.

164
00:12:44,450 --> 00:12:46,270
Eight items are going down here.

165
00:12:46,430 --> 00:12:48,070
And eight items are
going down here.

166
00:12:48,450 --> 00:12:51,450
So by dragging multiple outputs.

167
00:12:51,451 --> 00:12:53,630
From the same node.

168
00:12:53,770 --> 00:12:57,370
We duplicate the
items down both paths.

169
00:12:57,710 --> 00:13:00,090
But by creating an if.

170
00:13:00,250 --> 00:13:03,070
Or a set of
conditional branches.

171
00:13:03,510 --> 00:13:08,310
Then we split the items
down the different paths.

172
00:13:09,750 --> 00:13:14,510
Thanks for listening to the fifth
video of the NLN beginner course.

173
00:13:14,790 --> 00:13:17,410
Where we covered some
core workflow concepts.

174
00:13:17,530 --> 00:13:20,850
And created our first
connected nodes.

175
00:13:21,450 --> 00:13:23,010
In the next video.

176
00:13:23,050 --> 00:13:25,630
We'll be covering
some very useful nodes.

177
00:13:25,730 --> 00:13:26,990
When building workflows.

178
00:13:27,530 --> 00:13:30,930
And we'll keep on
building on this workflow.

179
00:13:31,170 --> 00:13:33,550
To make a more complex example.

180
00:13:33,910 --> 00:13:35,270
See you in the next video.

