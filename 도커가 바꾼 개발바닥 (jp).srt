1
00:00:00,179 --> 00:00:04,746
Dockerとコンテナ以前の時代に生きていた開発者は、まるで原始人と変わりませんでした。

2
00:00:04,940 --> 00:00:08,820
新しい会社に入社すると、開発環境の設定に一日中苦労していました。

3
00:00:08,940 --> 00:00:14,060
開発環境をアップデートすると、いつも何かが壊れるので、そうならないように必死で祈ったりもしました。

4
00:00:14,180 --> 00:00:17,721
そして、自分が書いたコードをサーバーコンピュータに送って実行しようとすると、

5
00:00:17,912 --> 00:00:22,746
コンピュータがエラーを起こして爆発したり、そんなことが多かったので、デプロイ前に祈祷したりもしました。

6
00:00:23,040 --> 00:00:26,477
しかし、Dockerとコンテナが登場してからは、この面倒な作業がほとんどなくなりました。

7
00:00:26,501 --> 00:00:31,440
そのためか、開発者が最もよく使うツール1位を毎年Dockerが占めています。

8
00:00:31,540 --> 00:00:36,976
また最近では、プログラミングの本を見ようとしても、あるいはインターネットでディープラーニングモデルをダウンロードして動かそうとしても、

9
00:00:37,167 --> 00:00:39,280
Dockerのコマンドから表示されることが多いです。

10
00:00:39,646 --> 00:00:44,471
さて、Dockerとは何かというと、Linuxコンテナを基盤に作られたOSレベルの仮想化技術ですが、

11
00:00:44,603 --> 00:00:47,773
こんな説明をすると皆、ブラウザバックしてしまうので、簡単に理解してみましょう。

12
00:00:48,750 --> 00:00:53,520
皆さんがプログラミングで失敗して、ソウルにチキン屋をオープンしたとしましょう。

13
00:00:53,600 --> 00:00:56,480
それがうまくいって、今度は釜山に支店を出したいとします。

14
00:00:56,620 --> 00:00:58,720
では、釜山支店はどう運営しますか？

15
00:00:59,150 --> 00:01:03,387
一番簡単なのは、自分が使っていたレシピだけを送って、これをそのまま真似するように指示することです。

16
00:01:03,621 --> 00:01:06,200
それでもいいかもしれませんが、それでは人生も台無しになります。

17
00:01:06,380 --> 00:01:10,868
釜山とソウルでは、厨房設備も違うし、道具も違うし、材料も違うとなると、

18
00:01:10,988 --> 00:01:12,920
調理過程で問題もたくさん発生するでしょう。

19
00:01:13,040 --> 00:01:15,190
味も少し変わってしまうのは避けられません。

20
00:01:15,460 --> 00:01:18,631
だから、きちんと商売をするためには、皆さんがソウルで使っていた、

21
00:01:18,810 --> 00:01:23,326
材料やレシピなどを全部ミールキットのように準備して、それを釜山に送ります。

22
00:01:23,460 --> 00:01:26,850
そして釜山では、これを温めるだけで運営できるようにすればいいのです。

23
00:01:27,040 --> 00:01:31,960
大手のフランチャイズチキン店は、全てこのようなやり方をしていますが、開発も同じです。

24
00:01:32,113 --> 00:01:36,202
同じコードを、それぞれ異なるコンピュータで実行する必要がある場合が多いのですが、

25
00:01:36,374 --> 00:01:41,301
自分のコンピュータでコードがうまく動いたからといって、これを他のコンピュータにそのまま送って実行すると、

26
00:01:41,513 --> 00:01:42,940
大惨事がよく起こります。

27
00:01:43,160 --> 00:01:47,197
コンピュータごとにOSも違うし、インストールされている基本プログラムのバージョンも違うからです。

28
00:01:47,357 --> 00:01:52,173
それが嫌なら、皆さんが使っていたOSやプログラムなどを全部同じように準備した上で、

29
00:01:52,278 --> 00:01:54,564
その上にコードを入れて、その上で実行すればいいのです。

30
00:01:54,760 --> 00:01:56,940
このために昔は、VMというものを使っていました。

31
00:01:57,146 --> 00:02:01,914
あるOSの上に別のOSをインストールするものですが、非常に重く、性能も良くないので、

32
00:02:02,093 --> 00:02:04,600
最近は、その代わりにDockerとコンテナを使います。

33
00:02:05,725 --> 00:02:09,000
Dockerを使うと、コードのミールキットのようなものを作ることができます。

34
00:02:09,433 --> 00:02:14,240
そこにOS、SDK、必要なプログラム、ライブラリ、コードなどを全部入れることができます。

35
00:02:14,380 --> 00:02:19,240
そして、Dockerを使うと、そのミールキットをボタン一つで簡単に実行することもできます。

36
00:02:19,380 --> 00:02:24,520
だからDockerは、簡単に言うと、コードのミールキットを作って実行してくれる簡単なプログラムに過ぎません。

37
00:02:24,620 --> 00:02:27,949
ちなみに、ミールキットを実行している仮想コンピュータがありますが、

38
00:02:28,027 --> 00:02:30,860
これをかっこいい開発者の言葉でコンテナと呼びます。

39
00:02:31,040 --> 00:02:35,960
ただ言葉で説明するだけでは理解が難しいので、どのように使うのか少しだけ試してみましょう。

40
00:02:37,120 --> 00:02:39,740
ミールキットをどのように作るかというと、ファイルが一つ必要です。

41
00:02:40,040 --> 00:02:41,580
Dockerfileというものが必要です。

42
00:02:41,720 --> 00:02:46,808
ここに、どのOSを使うのか、どのプログラムやライブラリ、SDKをインストールするのか、

43
00:02:47,026 --> 00:02:50,080
そして、どのコードをどのように実行するのかを記述できます。

44
00:02:50,380 --> 00:02:53,840
その後、コマンドを一つ入力すればパッケージングが完了します。

45
00:02:53,980 --> 00:02:57,040
そして、クリック一回でこのミールキットを実行できます。

46
00:02:57,240 --> 00:02:59,080
そうすると、中に入っていたコードが実行されるでしょう。

47
00:02:59,144 --> 00:03:04,072
しかし、皆さんがDockerfileで設定した、そのOSと作業環境、ライブラリの上で、

48
00:03:04,336 --> 00:03:06,446
自分のコードを安定的に実行してくれます。

49
00:03:06,560 --> 00:03:08,540
これがDockerとコンテナの使い方、終わりです。

50
00:03:08,680 --> 00:03:09,680
もう全部学びました。

51
00:03:10,660 --> 00:03:16,187
Dockerとコンテナが発見されてから、開発者たちもこれを使って、いろいろな面白いことを始めました。

52
00:03:16,480 --> 00:03:21,551
ミールキットのおかげで、デプロイなども非常に簡単になったので、最近はどのようにサーバーを開発するかというと、

53
00:03:21,736 --> 00:03:25,095
以前は、サーバー機能を一つのプログラムの中に全部詰め込んでいましたが、

54
00:03:25,208 --> 00:03:28,600
今は、それを分割して複数のプログラムに分けています。

55
00:03:28,780 --> 00:03:31,980
これをMSAと言いますが、最近のバックエンドの生命線となっています。

56
00:03:32,100 --> 00:03:34,751
そして、プログラムをビルドし、テストし、デプロイする作業が、

57
00:03:34,970 --> 00:03:37,486
Dockerのおかげで、小学生でもできる程度になったので、

58
00:03:37,685 --> 00:03:41,040
自動デプロイなどを導入し始める企業が非常に多くなりました。

59
00:03:41,160 --> 00:03:43,182
そして、Dockerを使うと、欲しいプログラムを

60
00:03:43,273 --> 00:03:48,533
欲しいバージョン、そして欲しいOSの上に非常に簡単にインストールし、きれいに削除までできるので、

61
00:03:48,781 --> 00:03:53,466
自分のローカルコンピュータに何かをインストールするのが嫌な潔癖症の開発者が現れ始めました。

62
00:03:54,740 --> 00:03:57,220
Dockerの実体が気になれば、実は大したことではなく、

63
00:03:57,359 --> 00:04:00,218
Linux自体に、元々軽い仮想化技術のようなものがあったのですが、

64
00:04:00,424 --> 00:04:02,800
これを使うとコンテナというものを作ることができます。

65
00:04:02,940 --> 00:04:05,240
ただの仮想コンピュータだと思えばいいでしょう。

66
00:04:05,600 --> 00:04:09,380
これを一般の人でも簡単に作れるように手助けしてくれるプログラムのようなものもあります。

67
00:04:09,580 --> 00:04:14,000
しかし、これらを犬でも簡単に使えるように作ったのが、Dockerというツールに過ぎません。

68
00:04:14,120 --> 00:04:17,600
なので、ちなみにDockerの代わりに使える代替品もいくつかあります。

69
00:04:17,740 --> 00:04:21,420
あるいは、Dockerなしで直接Linuxコンテナを起動することも可能です。

70
00:04:22,580 --> 00:04:23,980
当然、デメリットもあります。

71
00:04:24,260 --> 00:04:26,200
新しいセキュリティの問題にも注意しなければなりませんし、

72
00:04:26,340 --> 00:04:28,855
コンテナが増えれば、それを管理する人員も必要になります。

73
00:04:29,000 --> 00:04:31,980
サーバー費用なども、初期段階では思ったよりかかるでしょう。

74
00:04:32,100 --> 00:04:36,700
そして、何かデータを永続的に安定して保存する必要がある場合は、コンテナはあまり適していないかもしれません。

75
00:04:37,060 --> 00:04:41,020
しかし、最も重要なのは、プログラミング初心者の学習曲線が厳しくなったということです。

76
00:04:41,213 --> 00:04:46,092
Dockerが良いからといって、プログラミング入門時にDockerの設定からさせる講義や本もありますが、

77
00:04:46,296 --> 00:04:48,659
そのようなやり方を例えて言うと、

78
00:04:48,834 --> 00:04:53,097
料理を学ぶと言いながら、人が全部作ったセットに行って、

79
00:04:53,155 --> 00:04:58,210
チキンミールキットを持ってきて、このように開けて揚げてみる程度のことです。

80
00:04:58,432 --> 00:05:01,104
皆さんがそれだけやって満足なら、それでも構いませんが、

81
00:05:01,189 --> 00:05:07,834
後々、自分だけのチキン料理を作って、自分だけのミールキットも作って、自分だけの支店も出したいと思うなら、

82
00:05:07,974 --> 00:05:12,507
他人のミールキットなどに頼らず、自分で直接料理をしてみることも重要です。

83
00:05:12,647 --> 00:05:19,064
つまり、プログラミング入門をする際は、Dockerの助けなしに、自分のコンピュータと直接戦って、UFCを一度やってみろということです。

84
00:05:19,416 --> 00:05:25,320
そのような経験があってこそ、後で自信を持ってDockerfileを作成し、このようにビルドしてデプロイできるようになります。

85
00:05:25,460 --> 00:05:27,610
しかし、今はプログラミングを学ぶ時間ではないので、

86
00:05:27,708 --> 00:05:31,723
Dockerという簡単なツールを学ぶ時間なので、お説教はここまでにします。

87
00:05:31,953 --> 00:05:36,188
これからは、Dockerを一人で使いこなせるようになる方法を中心に準備してきたので、

88
00:05:36,353 --> 00:05:37,920
これらを学んでいただければと思います。

89
00:05:38,140 --> 00:05:42,740
そして、後でDocker Composeとオーケストレーションツールの使い方まで見ていきましょう。