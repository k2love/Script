1
00:00:00,870 --> 00:00:05,450
안녕하세요! n8n 초급 강좌 여섯
번째 비디오에 오신 것을 환영합니다.

2
00:00:05,710 --> 00:00:11,210
이번 비디오에서는 몇 가지 유용한 노드를
알아보고, 지난 몇 개의 비디오에서 계속 작업해 온

3
00:00:11,211 --> 00:00:16,010
워크플로우를 계속해서 만들어 볼 거예요.

4
00:00:17,170 --> 00:00:22,650
바로 시작해 볼까요? 몇 가지 아주
유용한 노드를 빠르게 짚어봅시다.

5
00:00:23,490 --> 00:00:28,630
다시 한번 말씀드리지만, 지금까지 구글 시트
노드, if 노드, 그리고 스케줄 트리거 노드를 알아봤어요.

6
00:00:28,631 --> 00:00:33,130
구글 시트 노드, if 노드,
스케줄 트리거 노드를 살펴봤죠?

7
00:00:33,450 --> 00:00:37,354
이번 비디오에서는 워크플로우를 만들 때

8
00:00:37,355 --> 00:00:40,850
유용하게 쓰일 여러 다른 노드들을 다룰 거예요.

9
00:00:42,630 --> 00:00:46,750
가장 먼저 '필드 편집' 또는 '설정' 노드가 있습니다.

10
00:00:47,190 --> 00:00:53,270
'필드 편집' 노드는 여러분의 아이템
데이터를 관리하는 데 유용해요.

11
00:00:53,730 --> 00:00:56,623
예를 들어, 워크플로우에서 현재 사용하고 있는

12
00:00:56,624 --> 00:00:59,850
데이터를 정리하는 데 사용할 수 있습니다.

13
00:01:00,290 --> 00:01:08,851
하지만 아이템의 데이터를 추가하거나, 형식을
바꾸거나, 줄이는 데에도 사용할 수 있습니다.

14
00:01:08,970 --> 00:01:12,227
그래서 워크플로우 후반부에서는 더 깔끔한

15
00:01:12,228 --> 00:01:15,711
데이터를 가지고 작업할 수 있게 되는 거죠.

16
00:01:16,570 --> 00:01:22,513
'필드 편집'에서 우리가 설정한 필드만 남기거나,

17
00:01:22,514 --> 00:01:29,170
모든 필드를 포함하는 옵션을 선택할 수 있어요.

18
00:01:30,650 --> 00:01:35,650
또 다른 유용한 노드는 일종의
'함수' 노드 중 하나입니다.

19
00:01:35,970 --> 00:01:41,210
여기서는 여러 개의 아이템을 다루는 데 도움이
되는 카테고리에 속하는 '집계' 노드를 알아볼 거예요.

20
00:01:41,211 --> 00:01:46,690
이 노드는 여러 개의 아이템을 다루는 데 도움을 줍니다.

21
00:01:47,050 --> 00:01:53,030
특히 이 노드는 모든 아이템에 걸쳐
데이터를 집계하는 데 사용됩니다.

22
00:01:53,270 --> 00:01:57,270
이 예시에서는 두 개의 입력 아이템이 있습니다.

23
00:01:57,490 --> 00:01:58,490
각각요.

24
00:01:58,740 --> 00:02:06,570
각각의 사람이 이메일을 가지고
있고, 이메일 필드를 기준으로 집계해서,

25
00:02:06,571 --> 00:02:11,374
이 두 개의 아이템을 모든 입력 아이템에서 가져온

26
00:02:11,375 --> 00:02:16,050
모든 이메일이 포함된 하나의 단일
출력 아이템으로 바꿀 수 있습니다.

27
00:02:16,990 --> 00:02:24,450
또한 중복 항목을 제거하거나, 총 아이템 수를 제한하거나, 아이템의
한 키를 여러 아이템으로 분리하는 데 사용되는 유사한 노드도 있습니다.

28
00:02:24,451 --> 00:02:31,630
또는 아이템의 한 키를 여러 개의
아이템으로 분리하는 데 사용할 수도 있습니다.

29
00:02:31,830 --> 00:02:36,490
이건 '집계' 노드의 반대되는 작업이 될 거예요.

30
00:02:37,550 --> 00:02:43,550
이번에는 트리거 카테고리에서 또 다른
매우 유용한 노드인 '웹훅' 노드를 알아볼게요.

31
00:02:44,610 --> 00:02:51,990
이 트리거 노드를 캔버스에 추가하면
테스트 URL과 프로덕션 URL이 주어집니다.

32
00:02:51,991 --> 00:02:57,310
원하는 경우, 여기서 테스트 URL과
프로덕션 URL을 수정할 수 있습니다.

33
00:02:58,290 --> 00:03:04,410
이 단계를 테스트할 때, 또는 워크플로우가
활성화되면, 테스트 URL이나 프로덕션 URL에서

34
00:03:04,411 --> 00:03:10,510
들어오는 웹훅을 수신합니다.

35
00:03:10,511 --> 00:03:18,350
그런 다음 웹훅에서 받은 데이터를 초기
데이터로 사용하여 워크플로우를 실행합니다.

36
00:03:18,351 --> 00:03:24,090
그래서 웹훅 수신을 자동화할 수 있습니다.

37
00:03:26,590 --> 00:03:30,800
이제 n8n으로 돌아가서 작업하던
워크플로우를 계속 만들고,

38
00:03:30,801 --> 00:03:34,770
웹훅의 간단한 예시도 보여드릴게요.

39
00:03:36,310 --> 00:03:40,599
자, 여기 n8n에 다시 왔습니다.

40
00:03:40,600 --> 00:03:44,830
지난 몇 개의 비디오에서 조금씩
만들어 온 워크플로우입니다.

41
00:03:45,230 --> 00:03:48,930
먼저 워크플로우를 테스트해서 모든 데이터를 가져와 봅시다.

42
00:03:49,850 --> 00:03:54,070
다음으로 하고 싶은 것은 먼저 웹훅을 정리하는 겁니다.

43
00:03:54,090 --> 00:03:56,450
작업 중인 데이터를 약간 정리하는 거죠.

44
00:03:56,770 --> 00:04:02,350
이 작업은 '필드 편집' 노드를 사용해서 할 거예요.

45
00:04:02,970 --> 00:04:10,590
이건 정말 유용한 노드이고, 여러분에게 유용한 데이터만

46
00:04:10,591 --> 00:04:16,170
유지하도록 '필드 편집' 노드를
사용하라고 항상 권장합니다.

47
00:04:16,310 --> 00:04:20,534
이렇게 하면 사용하지 않을 수도 있는 많은 필드가 있는

48
00:04:20,535 --> 00:04:23,610
매우 복잡한 아이템을 가지는 것을 피할 수 있습니다.

49
00:04:24,090 --> 00:04:27,721
어쨌든 필요하면 언제든지 '필드 편집' 노드로

50
00:04:27,722 --> 00:04:30,430
돌아가서 추가 필드를 더할 수 있습니다.

51
00:04:30,810 --> 00:04:37,170
여기서 '출력 포함' 설정에서
'입력 필드 없음'을 선택할게요.

52
00:04:37,171 --> 00:04:42,630
필요한 모든 것을 여기 필드로
직접 매핑할 것이기 때문입니다.

53
00:04:43,410 --> 00:04:48,334
그래서 전에 했던 것처럼 이름과 성을 합쳐서

54
00:04:48,335 --> 00:04:52,190
'전체 이름' 필드를 추가할 거예요.

55
00:04:52,690 --> 00:04:56,744
그리고 성을 대문자로 만들기 위해서

56
00:04:56,745 --> 00:05:00,070
'대문자로' 함수를 사용할 겁니다.

57
00:05:00,170 --> 00:05:06,630
이 단계를 테스트하면, 각
아이템마다 전체 이름만 있을 것입니다.

58
00:05:08,670 --> 00:05:12,390
지난 비디오에서 보여드린 것처럼 이메일도 필요합니다.

59
00:05:12,610 --> 00:05:18,710
그래서 이메일 필드를 드래그해서
이메일이라고 이름을 붙일게요.

60
00:05:19,370 --> 00:05:22,870
그리고 회사 필드도 필요합니다.

61
00:05:22,990 --> 00:05:27,030
그래서 회사 필드를 드래그해서
회사라고 이름을 붙일 거예요.

62
00:05:27,690 --> 00:05:30,739
다시 여기서 이 단계를 실행하면,

63
00:05:30,740 --> 00:05:35,810
전체 이름, 이메일, 회사와 같은
필요한 정보만 남게 될 겁니다.

64
00:05:37,590 --> 00:05:41,892
이 단계부터는 모든 이후의 노드가 이전처럼

65
00:05:41,893 --> 00:05:44,610
의도한 대로 실행될 것입니다.

66
00:05:45,130 --> 00:05:49,803
여기서도 이메일 키가 있고,

67
00:05:49,804 --> 00:05:53,790
사용 가능한 이메일 키가 사용되고 있습니다.

68
00:05:54,090 --> 00:05:55,090
여기서요.

69
00:05:55,290 --> 00:06:01,270
그래서 할 일은 이 시트에서 데이터를 읽고,

70
00:06:01,850 --> 00:06:06,581
우리가 사용하기 편리한 키만 유지하도록
약간의 서식을 적용하여 저장하는 것입니다.

71
00:06:06,582 --> 00:06:12,730
우리가 사용하기 편리한 키만 유지하도록
약간의 서식을 적용하여 저장하는 것입니다.

72
00:06:13,430 --> 00:06:17,970
그리고 할 일은 이 간단한 워크플로우를 완료하기 위해,

73
00:06:17,971 --> 00:06:25,210
이 조건을 충족하는 아이템과 함께
몇 가지 슬랙 메시지를 보내는 겁니다.

74
00:06:26,190 --> 00:06:32,610
그래서 'true' 분기에서
'집계' 노드를 사용할 겁니다.

75
00:06:33,290 --> 00:06:36,645
여기서 이전 필드를 실행해서,

76
00:06:36,646 --> 00:06:39,490
무엇을 다루고 있는지 확인할게요.

77
00:06:40,670 --> 00:06:46,370
그리고 이메일 필드를 집계할 겁니다.

78
00:06:46,590 --> 00:06:49,210
여기서 개별 필드를 집계하고 싶습니다.

79
00:06:49,590 --> 00:06:51,750
여기 필드 이름을 입력해야 합니다.

80
00:06:52,690 --> 00:06:57,790
일부 노드에서는 필드 이름을 요구합니다.

81
00:06:58,150 --> 00:07:03,510
이 경우에는 표현식을 사용하지 않을 거예요.

82
00:07:03,710 --> 00:07:09,310
여기서 표현식을 드래그 앤 드롭하려고 하면
자동으로 표현식이 아닌 필드 이름이 주어집니다.

83
00:07:09,311 --> 00:07:11,690
표현식이 아니라 필드 이름이 주어져요.

84
00:07:12,450 --> 00:07:14,310
여기서 이 단계를 테스트할 수 있습니다.

85
00:07:14,470 --> 00:07:17,581
이 조건을 만족하는 모든 이메일이

86
00:07:17,582 --> 00:07:21,091
하나의 출력으로 나타나는 것을 볼 수 있습니다.

87
00:07:22,550 --> 00:07:28,030
여기서는 회사 정보를 포함하는
것도 흥미로울 수 있을 것 같아요.

88
00:07:28,650 --> 00:07:31,270
그래서 집계할 다른 필드를 추가할 수도 있습니다.

89
00:07:31,390 --> 00:07:35,750
그리고 이 경우에는 회사 필드를 입력할게요.

90
00:07:36,190 --> 00:07:40,270
여기서 모든 이메일과 모든 회사가 있습니다.

91
00:07:41,250 --> 00:07:47,637
여기서 하고 싶은 것은 슬랙 메시지를 보내는 겁니다.

92
00:07:47,638 --> 00:07:51,130
가입한 모든 이메일과 모든 회사와 함께요.

93
00:07:51,590 --> 00:07:59,990
그래서 슬랙 노드와 '메시지
보내기' 작업을 사용할 거예요.

94
00:08:01,100 --> 00:08:04,310
여기 슬랙 계정이 이미 연결되어 있습니다.

95
00:08:04,590 --> 00:08:07,730
여러분 인스턴스에도 이미 설정되어 있을 거예요.

96
00:08:08,390 --> 00:08:15,710
여기서 예를 들어, 간단한 텍스트 메시지
'이번 주 가입 요약'을 쓸 수 있습니다.

97
00:08:15,830 --> 00:08:16,830
예를 들어서요.

98
00:08:17,470 --> 00:08:18,950
표현식을 사용하고 있는지 확인하고요.

99
00:08:19,470 --> 00:08:24,150
그리고 여기 이메일 목록을 추가할 수 있습니다.

100
00:08:28,100 --> 00:08:32,520
이번 주에 가입한 회사와 함께요.

101
00:08:33,880 --> 00:08:35,860
그리고 회사 목록을 추가할 수 있습니다.

102
00:08:37,380 --> 00:08:43,440
여기서 이 단계를 테스트하면, 앗,
누구에게 메시지를 보낼지 결정해야 하네요.

103
00:08:43,600 --> 00:08:48,860
사용자에게 보내고, 여기 내
이름인 Maxim을 입력할 수 있습니다.

104
00:08:49,780 --> 00:08:56,820
이미 설정한 슬랙 자격 증명을 사용해서
사용자에게 메시지를 보내는 겁니다.

105
00:08:56,821 --> 00:09:02,240
가입 요약으로 보내고, 이메일 목록,

106
00:09:02,241 --> 00:09:06,760
그리고 회사 목록과 같은 모든
회사의 요약으로 메시지를 보내는 거죠.

107
00:09:07,620 --> 00:09:11,580
이 단계를 테스트하면, 슬랙 알림이 도착합니다.

108
00:09:12,200 --> 00:09:19,280
그리고 슬랙에서 응답을 받았어요.
메시지가 전송되었다고 합니다.

109
00:09:19,560 --> 00:09:22,627
여기에 메시지가 있고, 이번 주 가입 요약이

110
00:09:22,628 --> 00:09:25,200
있고, 모든 이메일이 있는 것을 볼 수 있습니다.

111
00:09:25,880 --> 00:09:28,480
이번 주에 가입한 회사도 모두 여기에 있습니다.

112
00:09:30,140 --> 00:09:38,240
이렇게 하는 또 다른 방법은, n8n이 각 노드를 아이템마다 한 번씩
실행하기 때문에 데이터를 집계하지 않기로 결정할 수도 있습니다.

113
00:09:38,241 --> 00:09:43,520
n8n이 아이템마다 한 번씩 노드를 실행하기 때문에,
데이터를 집계하지 않기로 결정할 수도 있습니다.

114
00:09:43,660 --> 00:09:47,360
여기서 이 노드를 삭제하면 그냥 이 둘을 다시 연결할게요.

115
00:09:48,260 --> 00:09:57,161
여기서 메시지를 바꾸어서 새 가입자, 이메일,
콤마, 회사 이름, 콜론, 회사라고 할 수 있습니다.

116
00:09:57,162 --> 00:10:05,540
새 가입자, 이메일, 콤마, 회사
이름, 콜론, 회사라고 쓸 수 있습니다.

117
00:10:06,620 --> 00:10:12,860
그리고 이렇게 하면, 이전 슬라이드에서 본 것처럼, 모든
이메일과 모든 회사를 가진 메시지 하나만 있는 게 아니라,

118
00:10:12,861 --> 00:10:20,460
모든 이메일과 회사가 포함된 메시지
하나 대신에 다섯 개의 메시지가 생깁니다.

119
00:10:20,620 --> 00:10:25,120
하나의 메시지, 새 가입자,
Marcus at Quantum.

120
00:10:25,860 --> 00:10:33,720
다음 메시지, 새 가입자,
Sophia from Horizon 등등이요.

121
00:10:33,820 --> 00:10:42,120
여기서는 아이템에 사람이 몇 명
없기 때문에 요약으로 메시지를 보내든,

122
00:10:42,121 --> 00:10:48,040
사람마다 개별 메시지를 보내든 크게 상관없습니다.

123
00:10:48,600 --> 00:10:53,900
하지만 수십 개 또는 수백 개의 이메일을
다뤄야 한다면, 항상 데이터를 집계하고

124
00:10:53,901 --> 00:11:00,340
하나의 요약 메시지로 보내는 것을 우선해야 할 겁니다.

125
00:11:01,980 --> 00:11:06,300
이제 웹훅 워크플로우 예제를 간단히 살펴봅시다.

126
00:11:06,640 --> 00:11:12,200
여기서 캔버스에 웹훅 트리거를 추가할게요.

127
00:11:12,201 --> 00:11:16,280
테스트 URL과 프로덕션 URL이 주어질 겁니다.

128
00:11:16,520 --> 00:11:22,480
테스트 URL은 워크플로우를
테스트할 때 사용되고, 프로덕션 URL은

129
00:11:22,481 --> 00:11:26,960
워크플로우가 활성화되거나
프로덕션으로 푸시된 후에 사용됩니다.

130
00:11:28,220 --> 00:11:34,541
여기서는 POST 메서드를 사용하고,
이 테스트 URL을 복사할게요.

131
00:11:35,060 --> 00:11:40,720
여기서 테스트 이벤트를 수신하고,
백그라운드에서 약간의 작업을 할 수 있는

132
00:11:42,200 --> 00:11:48,940
테스트 이벤트를 보낼 수 있는 작은 스크립트를 만들었어요.

133
00:11:49,920 --> 00:11:54,779
여기에서 작은 파이썬 스크립트를 사용해서

134
00:11:54,780 --> 00:12:00,261
웹훅 트리거에 본문을 보낸 것을 볼 수 있습니다.

135
00:12:00,740 --> 00:12:07,640
그리고 여기 일반적인 헤더,
파라미터, 쿼리, 그리고 본문이 있습니다.

136
00:12:08,200 --> 00:12:11,841
본문에는 이름, 성,

137
00:12:11,861 --> 00:12:15,760
회사, 이메일, 도메인, 이벤트에 대한 정보가 있습니다.

138
00:12:16,820 --> 00:12:21,812
자, 이제 워크플로우를 테스트했으니,

139
00:12:21,813 --> 00:12:25,280
이 데이터를 기반으로 워크플로우를 만들 수 있습니다.

140
00:12:25,820 --> 00:12:29,620
이 단계에서 할 수 있는 것은 데이터를 고정하는 겁니다.

141
00:12:29,740 --> 00:12:34,420
만약 자리를 비웠다가 돌아와야 할 경우,
항상 이 데이터를 가지고 작업할 수 있게 됩니다.

142
00:12:34,540 --> 00:12:41,680
그래서 워크플로우를 새로 고치면,
고정된 데이터에 여전히 접근할 수 있습니다.

143
00:12:41,681 --> 00:12:46,040
여기서부터는 아주 간단한 워크플로우를 만들 수 있습니다.

144
00:12:46,420 --> 00:13:06,300
만약 이벤트가 '팀원 초대됨'이면,
사용자에게 슬랙 메시지를 보냅니다.

145
00:13:06,301 --> 00:13:14,140
다시 사용자에게, 즉, 저 자신에게 메시지를 보낼 겁니다.

146
00:13:15,460 --> 00:13:17,520
그리고 간단한 메시지를 보낼 수 있어요.

147
00:13:17,760 --> 00:13:23,620
예를 들어, '이메일이 방금 팀원을 초대했습니다.'라고요.

148
00:13:24,960 --> 00:13:26,760
그리고 이 단계를 테스트할 수 있습니다.

149
00:13:27,620 --> 00:13:31,520
그리고 새로운 팀원이 초대될
때마다 웹훅을 받게 될 거예요.

150
00:13:31,620 --> 00:13:32,620
그럼 'true'로 내려가겠죠.

151
00:13:33,640 --> 00:13:35,800
그리고 슬랙 메시지를 저에게 보낼 겁니다.

152
00:13:36,960 --> 00:13:41,420
만약 새로운 팀원이 있다면, 여기
다른 종류의 이벤트가 있을 수도 있어요.

153
00:13:41,860 --> 00:13:46,151
그래서 '팀원 초대됨' 대신에,

154
00:13:46,152 --> 00:13:50,021
'계정 생성됨' 이벤트를 가질 수 있습니다.

155
00:13:50,320 --> 00:13:55,620
그래서 데이터를 고정 해제하고,
다른 테스트 페이로드를 보낼게요.

156
00:13:56,680 --> 00:14:05,800
이번에는 '계정 생성됨' 이벤트가
있는 페이로드를 보낼 겁니다.

157
00:14:07,540 --> 00:14:12,660
이번에는 '팀원 초대됨'이 아니라 '계정 생성됨'으로요.

158
00:14:12,880 --> 00:14:15,800
그리고 다른 분기를 만들 수 있어요.

159
00:14:16,020 --> 00:14:26,000
예를 들어, 이벤트가 '계정 생성됨'과

160
00:14:26,001 --> 00:14:34,540
같으면 슬랙 메시지를 보내고 싶습니다.

161
00:14:35,800 --> 00:14:39,500
저에게 매우 유사한 메시지를 보낼 겁니다.

162
00:14:45,290 --> 00:14:47,170
메시지를 보내서요.

163
00:14:52,310 --> 00:14:55,650
'이메일이 방금 계정을 생성했습니다.'라고요.

164
00:15:00,280 --> 00:15:03,040
이제 연결을 정리해야 합니다.

165
00:15:03,700 --> 00:15:07,880
여기서 여기로 연결하고 싶습니다.

166
00:15:07,960 --> 00:15:10,740
만약 계정 생성됨이 아니라면요.

167
00:15:10,780 --> 00:15:14,220
그럼 팀원 초대됨인지 확인하는 거죠.

168
00:15:14,680 --> 00:15:17,778
여기에서 매우 간단한 워크플로우를 만들었는데,

169
00:15:17,779 --> 00:15:20,540
이벤트를 종류에 따라 알 수 있게 해 줄 겁니다.

170
00:15:20,840 --> 00:15:25,100
물론 if 노드를 스위치로 바꿀 수도 있습니다.

171
00:15:26,000 --> 00:15:28,460
하지만 그건 다음 시간으로 미뤄두죠.

172
00:15:30,600 --> 00:15:37,180
n8n 초급 강좌의 여섯 번째 비디오를 시청해 주셔서
감사합니다. 여기서 첫 번째 워크플로우를 계속 만들고,

173
00:15:37,181 --> 00:15:40,082
웹훅 노드를 처음으로 살짝

174
00:15:40,083 --> 00:15:43,940
사용해 봤습니다.

175
00:15:44,680 --> 00:15:49,289
여기서 흥미로운 점은 단순히 필터링하거나

176 
00:15:49,290 --> 00:15:52,620
다른 분기를 만드는 것 이상으로,

177
00:15:52,700 --> 00:15:55,180
여러 개의 아이템을 다뤘다는 겁니다.

178
00:15:55,520 --> 00:15:58,358
그리고 이건 워크플로우를 만들 때

179
00:15:58,359 --> 00:16:00,860
매우 유용하게 쓰일 것입니다.

180
00:16:01,000 --> 00:16:06,760
만약 일련의 아이템에서 평균
데이터를 집계해야 한다면 말이죠.

181
00:16:07,240 --> 00:16:13,820
다음 비디오에서는 n8n이 워크플로우의
과거 실행을 어떻게 저장하는지 알아볼 거예요.

182
00:16:13,821 --> 00:16:18,240
그리고 그걸 이용해서 어떻게 오류를
더 잘 처리할 수 있는지 알아볼 겁니다.

183
00:16:18,940 --> 00:16:20,320
그럼 다음 비디오에서 만나요!

