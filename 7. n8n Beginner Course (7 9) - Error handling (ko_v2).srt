1
00:00:01,150 --> 00:00:06,000
안녕하세요, n8n 초급 강좌의
7번째 비디오에 오신 것을 환영합니다.

2
00:00:06,730 --> 00:00:13,060
이번 비디오에서는 워크플로의
과거 실행이 어떻게 저장되는지,

3
00:00:13,810 --> 00:00:20,060
특히 매우 중요한 기술인 워크플로
오류를 처리하는 방법을 다룰 것입니다.

4
00:00:21,460 --> 00:00:27,520
n8n에서 실행이 어떻게 저장되는지에
대해 이야기하면서 시작해 보겠습니다.

5
00:00:27,521 --> 00:00:31,884
지금까지 우리가 작업해 온 대부분의 실행은

6
00:00:31,885 --> 00:00:36,121
수동 실행이었습니다.

7
00:00:36,420 --> 00:00:42,520
이전 비디오에서 우리는 "워크플로 실행"
또는 "단계 테스트"를 클릭해 왔습니다.

8
00:00:42,800 --> 00:00:49,060
그러나 앞서 언급했듯이 워크플로를
활성화하면 자동화를 켜게 되므로

9
00:00:49,061 --> 00:00:54,680
워크플로가 우리가 워크플로 실행을 반드시
보지 않고도 백그라운드에서 실행됩니다.

10
00:00:54,681 --> 00:00:59,580
워크플로 실행을 반드시 보지 않고
백그라운드에서 실행될 것입니다.

11
00:01:00,720 --> 00:01:10,360
우리는 "모든 실행"을 클릭하여 액세스할
수 있는 실행 로그라는 곳에서 모든 워크플로

12
00:01:10,361 --> 00:01:15,420
실행의 기록에 액세스할 수 있습니다.

13
00:01:16,270 --> 00:01:21,915
기본적으로 성공 및 실패한 프로덕션 실행,

14
00:01:21,916 --> 00:01:27,240
즉 워크플로가 활성화되면 이러한 실행이 저장됩니다.

15
00:01:27,520 --> 00:01:30,420
그리고 수동 실행은 저장되지 않습니다.

16
00:01:31,080 --> 00:01:40,641
그러나 워크플로별로 수동 실행
로깅을 활성화할 수 있습니다.

17
00:01:41,520 --> 00:01:45,220
워크플로 상태, 날짜 범위 또는

18
00:01:45,221 --> 00:01:49,961
실행 데이터를 기준으로 실행 로그를 정렬할 수 있습니다.

19
00:01:50,020 --> 00:01:56,060
로그에 실행 데이터를 저장하는
방법은 고급 과정에서 다루겠습니다.

20
00:01:58,060 --> 00:02:05,800
실행 로그에서 개별 실행 기록에 액세스할 수 있습니다.

21
00:02:06,140 --> 00:02:09,780
여기에서 실행 기록의 예를 볼 수 있습니다.

22
00:02:10,080 --> 00:02:13,940
활성화된 스케줄 트리거를 볼 수 있습니다.

23
00:02:14,180 --> 00:02:17,576
시트에서 데이터를 읽고 이메일이

24
00:02:17,676 --> 00:02:21,040
있는지 여부에 따라 영업 또는
마케팅 팀에 메시지를 보냈습니다.

25
00:02:21,980 --> 00:02:28,200
이것들은 과거 실행이므로
변경할 수 없기 때문에 정적입니다.

26
00:02:28,760 --> 00:02:32,593
이는 해당 실행에서 모든 노드의

27
00:02:32,594 --> 00:02:36,701
최종 상태에 대한 스냅샷입니다.

28
00:02:37,280 --> 00:02:43,500
이것은 워크플로를 디버깅, 수정
또는 검사할 때 매우 유용합니다.

29
00:02:43,760 --> 00:02:50,520
과거 실행을 살펴 워크플로가
어떻게 작동하는지 이해할 수 있습니다.

30
00:02:52,300 --> 00:02:58,340
각 노드를 더블 클릭하여 입력 및 출력 데이터와

31
00:02:58,341 --> 00:03:01,180
모든 노드 설정을 볼 수 있습니다.

32
00:03:01,640 --> 00:03:05,475
그리고 노드에 오류가 있는 경우 노드를

33
00:03:05,476 --> 00:03:12,240
더블 클릭하여 해당 오류에 대한
자세한 정보를 얻을 수도 있습니다.

34
00:03:13,960 --> 00:03:18,640
앞서 언급했듯이 때때로 실행에 실패할 수 있습니다.

35
00:03:18,800 --> 00:03:23,060
워크플로를 활성화하거나 프로덕션
환경으로 푸시하려고 합니다.

36
00:03:23,460 --> 00:03:28,118
때로는 설정이 최적이 아니거나

37
00:03:28,119 --> 00:03:31,160
입력 데이터가 잘못된 형식일 수 있습니다.

38
00:03:31,360 --> 00:03:34,100
그리고 이것은 워크플로 실패의 원인이 됩니다.

39
00:03:34,380 --> 00:03:38,260
워크플로가 실패하는 데에는
여러 가지 이유가 있을 수 있습니다.

40
00:03:38,500 --> 00:03:41,474
그리고 어떤 종류의 오류가 있는지,

41
00:03:41,475 --> 00:03:44,760
특히 오류를 수정하는 방법을 이해하는 것이 중요합니다.

42
00:03:46,200 --> 00:03:49,763
오류를 처리하는 첫 번째 방법,

43
00:03:49,863 --> 00:03:53,660
그리고 매우 중요한 방법은 오류
워크플로를 사용하는 것입니다.

44
00:03:55,600 --> 00:04:01,680
이 워크플로는 노드에 오류가
발생하는 즉시 실행되는 워크플로입니다.

45
00:04:02,410 --> 00:04:09,000
그리고 이 워크플로를 사용하면 오류가
있는 모든 워크플로에 대해 보고할 수 있습니다.

46
00:04:09,670 --> 00:04:14,255
워크플로가 실패했기 때문에

47
00:04:14,256 --> 00:04:18,900
디버그하거나 수정해야 할 때 알려줍니다.

48
00:04:19,440 --> 00:04:23,640
이 워크플로는 모든 새 워크플로에 대해 구성해야 합니다.

49
00:04:25,600 --> 00:04:28,480
따라서 워크플로를 구축하는
경우 오류 워크플로를 설정하십시오.

50
00:04:29,180 --> 00:04:33,780
N8N 인스턴스에 하나 또는 여러
개의 오류 워크플로를 가질 수 있습니다.

51
00:04:35,800 --> 00:04:37,720
여기 예가 있습니다.

52
00:04:38,140 --> 00:04:41,580
이 워크플로는 매일 오전 8시에 시작됩니다.

53
00:04:41,860 --> 00:04:48,020
Google Sheets에서 연락처를
읽고 CRM(이 경우 Salesforce)을

54
00:04:48,420 --> 00:04:49,860
해당 연락처로 업데이트합니다.

55
00:04:50,980 --> 00:04:54,480
이메일 필드는 Salesforce에서 필수입니다.

56
00:04:55,600 --> 00:04:59,693
따라서 이메일이 없는 항목에 대해

57
00:04:59,694 --> 00:05:03,281
연락처를 만들려고 할 때 오류가 발생합니다.

58
00:05:03,660 --> 00:05:10,060
이로 인해 오류가 발생한 노드(이 경우 Salesforce
노드)에 대한 정보와 함께 오류 워크플로가 트리거됩니다.

59
00:05:10,200 --> 00:05:12,440
이 경우 Salesforce 노드입니다.

60
00:05:13,180 --> 00:05:19,280
따라서 시트에서 읽은 10개의 항목 중 일부에는

61
00:05:19,281 --> 00:05:24,840
이메일이 없었으며 이로 인해
Salesforce 노드에 오류가 발생했습니다.

62
00:05:26,380 --> 00:05:32,180
오류 워크플로를 트리거하는 또 다른 방법은
"중지 및 오류" 노드를 사용하는 것입니다.

63
00:05:32,580 --> 00:05:41,220
이 노드는 트리거될 때마다 오류 메시지를 발생시킵니다.

64
00:05:41,460 --> 00:05:42,880
실행될 때마다요.

65
00:05:43,180 --> 00:05:46,580
해당 특정 오류 메시지를 구성할 수 있습니다.

66
00:05:47,400 --> 00:05:50,740
트리거되면 여러 가지 옵션이 있습니다.

67
00:05:50,880 --> 00:05:57,361
기본적으로 전체 워크플로가
중지되고 상태가 실패로 설정됩니다.

68
00:05:57,560 --> 00:05:59,620
하지만 이것을 살펴보겠습니다.

69
00:06:00,260 --> 00:06:04,900
Enid N에서 "중지 및 오류"
노드의 동작을 선택할 수 있습니다.

70
00:06:06,040 --> 00:06:11,460
특정 조건이 충족되어서는 안 될 때 오류를 발생시켜
워크플로에서 예외적인 경우를 관리하는 데 사용할 수 있습니다.

71
00:06:11,461 --> 00:06:14,540
특정 조건이 충족되면 오류를 발생시켜 워크플로에서
엣지 케이스를 관리하는 데 사용할 수 있습니다.

72
00:06:15,260 --> 00:06:24,040
이 워크플로는 웹훅의 이메일 데이터가
유효하지 않을 때 오류를 발생시킵니다.

73
00:06:24,240 --> 00:06:30,880
여기서 웹훅에 유효한 이메일이
있는지 확인하고 유효하지 않으면

74
00:06:31,000 --> 00:06:32,360
중지하고 오류를 발생시킵니다.

75
00:06:36,540 --> 00:06:40,132
오류 워크플로는 잠시 후에 살펴볼

76
00:06:40,133 --> 00:06:43,260
오류 트리거 노드를 사용하여 만듭니다.

77
00:06:43,480 --> 00:06:50,040
이 노드는 워크플로와 관련된 모든 정보를 출력합니다.

78
00:06:50,180 --> 00:06:56,500
따라서 이름과 워크플로 ID, 실행 ID와 오류가 있는

79
00:06:56,501 --> 00:07:00,631
특정 실행을 찾기 위한 링크뿐만 아니라

80
00:07:00,632 --> 00:07:04,960
오류가 있는 노드에 대한 정보도 포함됩니다.

81
00:07:05,100 --> 00:07:08,660
특정 노드 또는 "중지 및 오류" 노드입니다.

82
00:07:10,320 --> 00:07:16,720
일반적으로 Slack, WhatsApp, Teams 또는

83
00:07:16,940 --> 00:07:22,360
오류를 보고할 수 있는 통신 도구와
같은 장소를 두는 것이 좋습니다.

84
00:07:22,620 --> 00:07:30,060
N8N에 액세스할 수 있는 팀 구성원은
워크플로에 오류가 발생했음을 확인하고

85
00:07:30,061 --> 00:07:33,320
워크플로를 빠르게 디버그하고 수정할 수 있습니다.

86
00:07:33,580 --> 00:07:40,660
여기 오류 워크플로 예제, 슬랙 메시지, 이메일
또는 텔레그램을 보내는 오류 트리거가 있습니다.

87
00:07:40,661 --> 00:07:45,080
세 가지 모두 필요하지는 않을 것입니다.

88
00:07:45,180 --> 00:07:51,500
하지만 작업에서 오류를 보고할
수 있는 장소는 필요할 것입니다.

89
00:07:51,600 --> 00:08:02,740
자, 다시 돌아가서 보겠습니다.

90
00:08:03,180 --> 00:08:20,960
자, 다시 돌아가서 "모든
버튼의 열린 작업"을 살펴봅시다.

91
00:08:28,060 --> 00:08:35,240
이 예에서는 오류에 대한 정보가 포함된 슬랙
메시지로 매우 간단한 오류 워크플로를 구축할 것입니다.

92
00:08:35,241 --> 00:08:39,408
오류 정보가 포함된 슬랙 메시지를 만들어

93
00:08:39,409 --> 00:08:43,540
누군가 가서 빠르게 처리하고
디버깅할 수 있도록 할 것입니다.

94
00:08:44,240 --> 00:08:47,400
여기 테스트 이벤트에 오류 트리거가 있습니다.

95
00:08:47,401 --> 00:08:52,547
여기서 평소처럼 슬랙 노드를

96
00:08:52,548 --> 00:09:00,060
추가하여 사용자 Maxim에게 메시지를 보낼 수 있습니다.

97
00:09:03,580 --> 00:09:10,640
여기서 테스트하기 위해 "오류"라고 말할 것입니다.

98
00:09:11,700 --> 00:09:13,800
그리고 몇 가지 정보를 포함할 것입니다.

99
00:09:14,480 --> 00:09:21,380
따라서 워크플로, 쉼표... 죄송합니다, 콜론, 이름.

100
00:09:22,120 --> 00:09:30,380
또한 실행 URL을 여기에 포함할 것입니다.

101
00:09:34,080 --> 00:09:37,060
그리고 오류 메시지를 포함할 것입니다.

102
00:09:39,220 --> 00:09:40,220
오류 메시지.

103
00:09:41,820 --> 00:09:46,260
이렇게 하면 오류가 발생하고 오류 워크플로가 실행될 때마다

104
00:09:46,261 --> 00:09:50,260
어떤 워크플로에 오류가 있는지 즉시 알 수 있습니다.

105
00:09:51,300 --> 00:09:56,160
그런 다음 특정 실행에 액세스하기
위한 매우 빠른 링크가 있습니다.

106
00:09:56,360 --> 00:09:59,880
그래서 N8N에 들어가서 오류가
무엇인지 확인할 수 있습니다.

107
00:10:00,200 --> 00:10:05,840
또한 오류 메시지가 있으므로 문제가
무엇인지 더 잘 이해할 수 있습니다.

108
00:10:06,100 --> 00:10:09,520
여기서 이 단계를 테스트하고 메시지를 받을 수 있습니다.

109
00:10:09,820 --> 00:10:13,899
테스트를 마친 후, 여기서 사용자가 아닌

110
00:10:13,900 --> 00:10:17,561
채널로 대신 보낼 수 있습니다.

111
00:10:17,720 --> 00:10:22,800
여기 N8N 오류가 있습니다.

112
00:10:26,670 --> 00:10:29,590
N8N 오류 채널.

113
00:10:29,850 --> 00:10:31,490
다시 그 단계를 테스트할 수 있습니다.

114
00:10:31,690 --> 00:10:36,570
이제부터 워크플로 중 하나에 오류가 발생하고 오류

115
00:10:36,571 --> 00:10:40,878
워크플로가 호출되면 해당 실행에 대한

116
00:10:40,879 --> 00:10:44,070
정보와 함께 N8N 오류 채널에서 해당 메시지를 받습니다.

117
00:10:44,770 --> 00:10:49,910
고급 과정에서는 좀 더 복잡한 오류 워크플로에 대해

118
00:10:50,070 --> 00:10:55,150
특히 사람 태그 지정, 소유자
태그 지정과 함께 다룰 것입니다.

119
00:10:55,670 --> 00:10:59,910
오류 실행을 살펴볼 적절한 사람을 찾을 수 있습니다.

120
00:11:03,570 --> 00:11:09,730
이제 이전 비디오의 워크플로로
이동하여 조금 정리해 보겠습니다.

121
00:11:09,830 --> 00:11:15,710
두 개의 if 대신 스위치를
배치하고 노드 이름을 바꿨습니다.

122
00:11:15,830 --> 00:11:16,990
그래서 조금 더 명확합니다.

123
00:11:17,910 --> 00:11:21,354
다시 말하지만, 이벤트 유형과

124
00:11:21,355 --> 00:11:25,291
연락처에 대한 정보와 함께 웹훅 입력 데이터가 있습니다.

125
00:11:25,590 --> 00:11:30,950
이벤트가 "계정 생성" 또는 "팀 구성원 초대"와 같으면

126
00:11:31,290 --> 00:11:33,650
다른 메시지를 보낼 것입니다.

127
00:11:34,650 --> 00:11:38,790
여기서 몇 가지 잠재적인
오류를 처리하고 싶을 수 있습니다.

128
00:11:39,070 --> 00:11:43,390
여기서 상상할 수 있는 두 가지
주요 잠재적 오류가 있습니다.

129
00:11:44,210 --> 00:11:46,390
첫째, 이메일을 살펴봅니다.

130
00:11:46,391 --> 00:11:51,650
그리고 둘째, 우리가 처리하는 이벤트 종류를 확인합니다.

131
00:11:51,930 --> 00:11:56,470
여기서 사용할 수 있는 두 가지
종류의 오류 처리 방법이 있습니다.

132
00:11:56,690 --> 00:12:00,830
첫 번째는 이메일이 유효한지 확인하는 것입니다.

133
00:12:01,010 --> 00:12:06,437
여기서 꽤 기본적인 검사를 수행하여

134
00:12:06,438 --> 00:12:10,410
이메일에 at 기호가 포함되어 있는지 확인할 수 있습니다.

135
00:12:10,550 --> 00:12:15,210
유효한 이메일이 있는지 확인하는
가장 간단한 방법일 수 있습니다.

136
00:12:16,390 --> 00:12:21,974
더 복잡한 방법은 reg x를 사용하여

137
00:12:21,975 --> 00:12:25,810
이메일이 매우 특정 이메일 형식과
일치하는지 확인하는 것입니다.

138
00:12:26,110 --> 00:12:33,430
지금은 이메일에 at 기호가
포함되어 있는지 확인해 보겠습니다.

139
00:12:33,970 --> 00:12:36,950
예를 들어, 이것은 유효한 이메일일 것입니다.

140
00:12:37,550 --> 00:12:41,070
이메일이 유효하면 워크플로를 계속할 수 있습니다.

141
00:12:41,330 --> 00:12:45,950
이메일이 유효하지 않으면 중지
및 오류를 추가할 수 있습니다.

142
00:12:46,390 --> 00:12:50,662
여기서 오류 메시지 또는

143
00:12:50,663 --> 00:12:56,210
간단히 "유효하지 않은 이메일"이라고
언급하는 오류 개체를 던질 수 있습니다.

144
00:12:59,470 --> 00:13:06,430
여기서 이벤트 유형에 대한 스위치가 있습니다.

145
00:13:06,610 --> 00:13:10,510
유효한 이벤트가 없을 수도 있다고 상상할 수 있습니다.

146
00:13:10,670 --> 00:13:15,010
따라서 여기서 스위치에서 새
분류 규칙을 추가할 수 있습니다.

147
00:13:15,011 --> 00:13:25,750
이것은 이벤트가 존재하지 않는 경우일 수 있습니다.

148
00:13:26,230 --> 00:13:32,504
또는 앞에서 보았듯이 이벤트가

149
00:13:32,505 --> 00:13:38,550
표현식으로서 분명히 빈 문자열과 같은 경우입니다.

150
00:13:38,990 --> 00:13:47,010
그리고 이러한 두 출력 모두를
중지 및 오류로 끌 수 있습니다.

151
00:13:47,810 --> 00:13:57,270
이번에는 유효하지 않은 이메일 대신
유효하지 않은 이벤트라고 말할 수 있습니다.

152
00:13:58,610 --> 00:14:04,570
이제 이 워크플로가 활성화되면 유효하지 않은 이메일과
유효하지 않은 이벤트의 경우를 모두 처리한다는 것을 알 수 있습니다.

153
00:14:04,571 --> 00:14:07,990
따라서 웹훅 시스템에 오류가
있으면 오류 워크플로가 트리거됩니다.

154
00:14:08,290 --> 00:14:14,770
따라서 웹훅 시스템에 오류가
있으면 오류 워크플로가 트리거됩니다.

155
00:14:14,970 --> 00:14:16,410
그런 다음 들어가서 확인할 수 있습니다.

156
00:14:16,690 --> 00:14:18,150
왜 이메일이 없었을까요?

157
00:14:18,370 --> 00:14:20,310
아니면 왜 유효하지 않은 이벤트가 있었을까요?

158
00:14:21,710 --> 00:14:25,950
여기 "중지 및 오류" 워크플로에서
한 가지 더 언급할 사항이 있습니다.

159
00:14:26,130 --> 00:14:29,461
설정으로 이동하면 오류 시 어떤

160
00:14:29,462 --> 00:14:32,870
동작을 원하는지 선택할 수 있습니다.

161
00:14:33,490 --> 00:14:37,770
슬라이드에서 언급했듯이 기본적으로 워크플로를 중지합니다.

162
00:14:38,050 --> 00:14:43,890
하지만 워크플로가 계속되는 것을 막지
않는 엣지 케이스를 처리하는 경우 계속하거나

163
00:14:43,891 --> 00:14:48,310
오류 출력을 사용하여 계속할 수 있습니다.

164
00:14:48,850 --> 00:14:53,036
따라서 이것은 "중지 및 오류" 워크플로와

165
00:14:53,037 --> 00:14:58,950
일반 노드 모두에 대해 노드별로 구성할 수 있습니다.

166
00:14:59,570 --> 00:15:04,690
실행 기록, 오류 처리 및 매우
기본적인 오류 워크플로를 살펴본

167
00:15:04,691 --> 00:15:10,410
NLN 초급 강좌의 7번째 비디오를
시청해 주셔서 감사합니다.

168
00:15:10,411 --> 00:15:15,188
다음 비디오에서는 다시 오류가 발생하지 않도록

169
00:15:15,189 --> 00:15:20,310
워크플로를 디버그하고 재시도하는 방법을 다룰 것입니다.

170
00:15:20,450 --> 00:15:21,630
다음 비디오에서 뵙겠습니다.

