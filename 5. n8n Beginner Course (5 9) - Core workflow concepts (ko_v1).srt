1
00:00:00,000 --> 00:00:05,100
안녕하세요! n8n 초급 강좌 다섯
번째 비디오에 오신 걸 환영합니다!

2
00:00:05,360 --> 00:00:08,892
이번 비디오에서는 몇 가지 핵심 워크플로우

3
00:00:08,893 --> 00:00:13,120
개념을 다루고, 함께 첫 번째
워크플로우를 계속해서 만들어 볼 거예요.

4
00:00:14,990 --> 00:00:20,880
먼저 여러분이 직접 워크플로우를 만들기 전에 이해해야
할 중요한 핵심 워크플로우 개념 몇 가지를 살펴볼게요.

5
00:00:20,881 --> 00:00:23,600
워크플로우를 만들기 전에 이해해야 할 몇
가지 핵심 워크플로우 개념들을 먼저 알아봅시다.

6
00:00:25,440 --> 00:00:27,680
여기 캔버스가 있습니다.

7
00:00:27,920 --> 00:00:31,940
캔버스에서 주요 워크플로우 요소들을 볼 수 있어요.

8
00:00:32,320 --> 00:00:38,700
여기 위에는 워크플로우 메뉴,
워크플로우 이름 및 태그가 있고요.

9
00:00:39,000 --> 00:00:42,380
여기에는 워크플로우 활성화 설정이 있습니다.

10
00:00:42,700 --> 00:00:47,236
그리고 오른쪽 상단에서는 버전 기록과

11
00:00:47,237 --> 00:00:50,921
워크플로우 관련 설정을 할 수 있습니다.

12
00:00:51,600 --> 00:00:55,740
중앙에는 워크플로우 노드들이 있고요.

13
00:00:56,140 --> 00:00:59,500
왼쪽 하단에는 줌 설정이 있습니다.

14
00:01:00,800 --> 00:01:06,380
워크플로우를 활성화하는 것은
워크플로우를 제품에 적용할 수 있게 해줍니다.

15
00:01:06,780 --> 00:01:11,600
그리고 워크플로우를 자동으로
사용하기 시작할 수 있게 해주죠.

16
00:01:12,480 --> 00:01:16,140
n8n에서는 워크플로우 활성화에
대해 조금 뒤에 더 자세히 다룰 거예요.

17
00:01:16,940 --> 00:01:21,580
물론 캔버스에는 노드들이 있죠. 큰 노드들 말이에요.

18
00:01:21,581 --> 00:01:27,814
메인 워크플로우 메뉴에서는 여러분의 n8n 인스턴스에

19
00:01:27,815 --> 00:01:31,501
있는 모든 워크플로우를 찾을 수 있습니다.

20
00:01:32,260 --> 00:01:36,360
태그나 소유자와 같은 정보를 찾아서 필터링할 수도 있고요.

21
00:01:36,780 --> 00:01:43,040
'내 워크플로우'를 클릭해서 여러분이
만든 워크플로우만 볼 수도 있습니다.

22
00:01:43,041 --> 00:01:48,420
여기에서 '내 워크플로우'를 클릭하면,
여러분이 소유한 워크플로우만 볼 수 있습니다.

23
00:01:48,421 --> 00:01:51,901
워크플로우를 만들 때마다,

24
00:01:51,902 --> 00:01:55,480
여러분은 기본 소유자로 지정됩니다.

25
00:01:57,440 --> 00:02:03,720
캔버스 오른쪽 상단에 있는 워크플로우 설정에서는

26
00:02:03,721 --> 00:02:08,720
워크플로우 접근성과 오류 워크플로우, 그리고 워크플로우
실행이 어떻게 저장되는지에 대한 설정을 할 수 있어요.

27
00:02:08,721 --> 00:02:11,760
오류 워크플로우와 저장된 실행 설정을 변경할 수 있습니다.

28
00:02:12,320 --> 00:02:18,320
오류 워크플로우와 저장된
실행은 7번 비디오에서 다룰 거예요.

29
00:02:18,420 --> 00:02:19,420
7번 비디오에서요.

30
00:02:21,420 --> 00:02:26,180
이제 노드가 어떻게 연결되고, 실제로
워크플로우를 어떻게 만드는지 알아봅시다.

31
00:02:27,820 --> 00:02:30,800
모든 워크플로우는 트리거 노드에서 시작합니다.

32
00:02:31,100 --> 00:02:35,580
트리거 노드는 출력 분기만
있다는 특징으로 알아볼 수 있습니다.

33
00:02:35,840 --> 00:02:36,840
여기 보시는 것처럼요.

34
00:02:37,920 --> 00:02:42,780
그리고 옆에 주황색 번개 아이콘이 있어요.

35
00:02:43,300 --> 00:02:46,420
하나의 워크플로우에 여러 개의
다른 트리거를 가질 수도 있어요.

36
00:02:46,421 --> 00:02:49,108
같은 트리거를 여러 개 가질 수도 있고,

37
00:02:49,109 --> 00:02:53,181
복잡한 경우를 위해 다른 트리거를
여러 개 가질 수도 있습니다.

38
00:02:53,240 --> 00:02:56,100
그리고 트리거가 워크플로우를 시작하는 역할을 합니다.

39
00:02:56,380 --> 00:03:00,045
워크플로우를 테스트할 때를 제외하고,

40
00:03:00,046 --> 00:03:03,301
트리거가 실제로 작동하려면 활성화되어 있어야 합니다.

41
00:03:05,620 --> 00:03:09,958
캔버스에서 노드를 더블클릭하면, 해당 노드의

42
00:03:09,959 --> 00:03:13,640
이전과 다음 노드를 볼 수 있습니다.

43
00:03:13,641 --> 00:03:19,420
이 작은 아이콘들을 사용해서
워크플로우를 만들면서 탐색할 수 있어요.

44
00:03:19,720 --> 00:03:24,222
여기서 '워크플로우 실행'을 누르면 구글 시트, 필터,

45
00:03:24,302 --> 00:03:29,200
그리고 '필드 편집' 노드로 이어지는
간단한 예시를 볼 수 있습니다.

46
00:03:29,440 --> 00:03:33,059
필터 노드를 더블클릭하면, 왼쪽에는 구글 시트,

47
00:03:33,099 --> 00:03:36,400
오른쪽에는 '필드 편집' 노드가
보이는 것을 알 수 있습니다.

48
00:03:39,710 --> 00:03:43,890
또 다른 중요한 주제는 분기입니다.

49
00:03:43,891 --> 00:03:48,730
분기는 복잡한 워크플로우를 만들 때 매우 중요합니다.

50
00:03:49,090 --> 00:03:54,869
분기는 다양한 조건에 따라 다른 경로,

51
00:03:54,870 --> 00:03:58,391
또는 다른 동작 세트를 만드는 방법입니다.

52
00:03:59,470 --> 00:04:05,850
분기를 통해 하나의 워크플로우가 여러 가지 경우를
다룰 수 있는 복잡한 워크플로우를 만들 수 있습니다.

53
00:04:05,851 --> 00:04:11,550
하나의 워크플로우가 단 하나의 경우가 아닌
다양한 상황을 다룰 수 있게 해주는 것입니다.

54
00:04:12,750 --> 00:04:13,870
다양한 방법으로 사용할 수 있어요.

55
00:04:13,871 --> 00:04:15,890
분기를 만드는 방법은 두 가지입니다.

56
00:04:16,450 --> 00:04:21,350
첫 번째는 여러 개의 출력 옵션을
가진 노드를 사용하는 겁니다.

57
00:04:21,830 --> 00:04:27,550
이 경우, 각 아이템은 여러 경로 중 하나만 따릅니다.

58
00:04:28,070 --> 00:04:33,350
예를 들어 여기서는 'if' 노드를 사용하는데, 'if' 노드는
'true'와 'false'라는 두 개의 출력을 가지고 있습니다.

59
00:04:33,550 --> 00:04:34,550
true와 false요.

60
00:04:35,050 --> 00:04:38,210
보시다시피, 세 개의 입력 아이템이 있습니다.

61
00:04:38,470 --> 00:04:43,770
그리고 오직 하나의 아이템만 'true'로 갑니다.

62
00:04:43,870 --> 00:04:46,410
두 개의 아이템은 'false'로 가고요.

63
00:04:46,610 --> 00:04:50,390
각 아이템은 하나의 특정 경로만 따릅니다.

64
00:04:51,370 --> 00:04:55,921
분기를 만드는 또 다른 방법은, 하나의 노드에서

65
00:04:55,922 --> 00:04:59,530
두 개 이상의 출력선을 드래그하는 겁니다.

66
00:04:59,750 --> 00:05:04,352
이건 모든 아이템이 모든 경로를 따르고,

67
00:05:04,353 --> 00:05:08,190
경로 수만큼 복제된다는 것을 의미합니다.

68
00:05:08,410 --> 00:05:12,710
이게 어떻게 보이는지 잠시 후에 보여드릴게요.

69
00:05:14,470 --> 00:05:20,110
여러 개의 출력 분기를 가진 노드는 당연히 다른
출력 아이템 세트를 가질 것입니다. 당연하겠죠.

70
00:05:20,470 --> 00:05:27,170
이것들은 해당 노드의 출력 데이터에서 접근할 수 있습니다.

71
00:05:27,350 --> 00:05:33,650
예를 들어, 여기에서 'if' 노드는
조건을 만족하는 아이템에 대한 출력과,

72
00:05:33,651 --> 00:05:38,350
조건을 만족하지 않는 아이템에
대한 출력 아이템을 가지고 있습니다.

73
00:05:40,230 --> 00:05:43,710
이제 n8n으로 돌아가서 이 모든
것이 어떻게 보이는지 살펴볼게요.

74
00:05:45,450 --> 00:05:48,110
네, 다시 n8n으로 돌아왔습니다.

75
00:05:48,510 --> 00:05:53,210
가장 먼저 보여드리고 싶은 것은 트리거와 활성화입니다.

76
00:05:53,630 --> 00:05:57,781
이전에 수동으로 실행했던
워크플로우를 구글 시트의 정보를 읽어와서

77
00:05:57,782 --> 00:06:01,510
시작했던 것을 생각해봅시다.

78
00:06:01,670 --> 00:06:07,750
이 워크플로우를 매일 아침 8시에
실행하고 싶다고 가정해 볼게요.

79
00:06:07,970 --> 00:06:11,550
이때 스케줄 트리거를 사용할 수 있습니다.

80
00:06:11,551 --> 00:06:18,790
이렇게 하면 트리거 간격, 트리거 간의 날짜 수,

81
00:06:18,791 --> 00:06:23,150
그리고 트리거를 작동시킬 시간을 설정할 수 있습니다.

82
00:06:23,350 --> 00:06:30,970
여기서는 매일 한 번씩 트리거를
실행하고 싶고, 간격은 하루로 할게요.

83
00:06:31,230 --> 00:06:33,710
그리고 오전 8시에 실행하도록 할 거예요.

84
00:06:34,650 --> 00:06:39,590
여기서 워크플로우에 여러 개의 트리거를
설정할 수 있다는 것을 볼 수 있습니다.

85
00:06:39,591 --> 00:06:43,840
여기서 이 단계를 테스트하면,

86
00:06:43,841 --> 00:06:50,170
해당 요일 오전 8시가 아니더라도 실행됩니다.

87
00:06:51,490 --> 00:06:56,810
하지만, 이 워크플로우를 다 만든 후,
매일 오전 8시에 실제로 실행하려면,

88
00:06:56,811 --> 00:07:02,870
워크플로우가 활성화되었는지 확인해야 합니다.

89
00:07:03,210 --> 00:07:06,710
워크플로우가 활성화되면 확인 메시지가 나타날 거예요.

90
00:07:06,711 --> 00:07:11,691
이제 설정한 일정에 따라 스케줄 트리거가 실행될 것입니다.

91
00:07:11,830 --> 00:07:17,390
이제 수동 실행 단계를 제거할 수 있습니다.

92
00:07:19,390 --> 00:07:23,210
워크플로우를 활성화할 때마다 자동으로 저장될 거예요.

93
00:07:23,550 --> 00:07:26,750
그러니 워크플로우를 활성화하기 전에,

94
00:07:26,751 --> 00:07:30,130
워크플로우가 활성화될 준비가 되었는지 꼭 확인하세요.

95
00:07:31,210 --> 00:07:33,910
자, 이 워크플로우를 계속 만들어 봅시다.

96
00:07:34,910 --> 00:07:38,910
구글 시트 다음에 노드를 하나 추가해 볼게요.

97
00:07:38,970 --> 00:07:42,350
먼저 데이터를 가져오기 위해 실행해 볼까요?

98
00:07:42,710 --> 00:07:47,552
다시 한번 말씀드리지만, 여기에는 이름, 성,
이메일, 회사를 포함한 연락처 목록이 있습니다.

99
00:07:47,592 --> 00:07:50,850
이름, 성, 이메일, 회사 정보를
가진 연락처 목록이 있어요.

100
00:07:51,570 --> 00:07:55,043
여기서 하고 싶은 것은 우선,

101
00:07:55,044 --> 00:07:57,930
이메일이 없는 사람들을 모두 제거하는 거예요.

102
00:07:58,450 --> 00:08:00,850
이 모든 사람들에게 이메일을 보내고 싶다고 가정해 봅시다.

103
00:08:01,150 --> 00:08:03,430
만약 이메일이 없다면,

104
00:08:03,910 --> 00:08:06,250
그 사람들과는 아무것도 할 수 없겠죠.

105
00:08:06,390 --> 00:08:10,937
그래서 필터 노드를 사용해서

106
00:08:10,938 --> 00:08:14,711
이메일이 없는 모든 연락처를 필터링할 겁니다.

107
00:08:15,810 --> 00:08:19,530
여기 필터 노드에 조건들이 있습니다.

108
00:08:19,910 --> 00:08:27,110
여기서 이메일이 문자열, 즉, 문자나 기호로 이루어진

109
00:08:27,290 --> 00:08:29,870
문자들의 나열인지 확인하고 싶습니다.

110
00:08:30,470 --> 00:08:33,410
그리고 존재하는지 확인하고 싶습니다.

111
00:08:34,350 --> 00:08:40,850
이 단계를 실행하면, 10개에서 10개
아이템으로 변경되지 않은 것을 볼 수 있습니다.

112
00:08:41,390 --> 00:08:45,260
이 경우, 이메일이 비어 있어도,

113
00:08:45,261 --> 00:08:48,950
빈 값이 있다는 것을 볼 수 있습니다.

114
00:08:49,310 --> 00:08:54,775
그래서 이 경우 조건은 '존재'가 아니라,

115
00:08:54,776 --> 00:09:00,011
빈 문자열과 같지 않은 경우여야 합니다.

116
00:09:00,170 --> 00:09:05,930
다시 이 단계를 테스트하면, 입력의 10개 아이템에서

117
00:09:05,931 --> 00:09:10,710
유지된 8개 아이템과 삭제된 2개
아이템으로 줄어든 것을 볼 수 있습니다.

118
00:09:11,770 --> 00:09:13,370
이메일이 비어 있는 아이템들이죠.

119
00:09:13,610 --> 00:09:17,146
여기서부터는 이메일이 있는

120
00:09:17,147 --> 00:09:21,171
8개의 아이템으로만 작업을 하게 됩니다.

121
00:09:21,850 --> 00:09:27,910
여기서, 음, 개인 이메일 주소인지, 직장 이메일
주소인지에 따라 다른 행동을 하고 싶다고 가정해 봅시다.

122
00:09:27,911 --> 00:09:34,753
직장 이메일 주소인지, 개인 이메일 주소인지에
따라서 다른 동작을 원할 수도 있을 것 같아요.

123
00:09:34,754 --> 00:09:39,890
직장 이메일 주소인지, 아니면
개인 이메일 주소인지에 따라서요.

124
00:09:40,310 --> 00:09:43,410
여기서 if 노드를 추가할 수 있습니다.

125
00:09:45,270 --> 00:09:48,110
그리고 if 노드에 조건을 추가할 수 있습니다.

126
00:09:48,450 --> 00:09:53,650
JSON을 보면 여기 Gmail 주소,

127
00:09:53,651 --> 00:09:57,851
몇 개의 직장 이메일, 그리고 핫메일
주소가 있는 것을 볼 수 있습니다.

128
00:09:58,610 --> 00:10:12,450
여기서 조건은 이메일에 'gmail.com'이
포함되지 않는 것으로 설정할게요.

129
00:10:13,490 --> 00:10:17,910
이렇게 하면 Gmail 주소를 필터링할 수 있겠죠.

130
00:10:19,050 --> 00:10:22,590
그리고 두 번째 단계로 필터링할 수 있습니다.

131
00:10:24,090 --> 00:10:28,570
여기 gmail.fr이 있는 것을 볼 수 있죠. 그리고
핫메일 주소도 있고요. 그리고 gmail.com도 있죠.

132
00:10:29,150 --> 00:10:31,670
조건을 단순화해서 '.com'을 제거하면,

133
00:10:31,671 --> 00:10:36,230
'gmail'이 포함된 것은 모두 제거할 수 있습니다.

134
00:10:37,060 --> 00:10:40,630
그리고 조건을 추가할 때 조건을 추가할 수 있죠.

135
00:10:41,190 --> 00:10:44,170
그래서 if 노드에 두 개의 조건이 있습니다.

136
00:10:44,310 --> 00:10:47,510
조건들을 어떻게 결합할지 결정해야 합니다.

137
00:10:48,510 --> 00:10:54,410
여기서는 이메일에 'gmail'이
포함된 사람을 제외하고 싶습니다.

138
00:10:56,890 --> 00:11:00,450
또는 이메일에 'hotmail'이
포함된 사람도 제외하고 싶고요.

139
00:11:00,590 --> 00:11:03,730
이 경우에는 'or' 필터를 사용할 겁니다.

140
00:11:04,450 --> 00:11:06,990
다시 이메일을 드래그 앤 드롭하고,

141
00:11:07,350 --> 00:11:15,310
'hotmail'을 포함하지 않는 것으로 하되,
정확히 말하면 '@hotmail'이 더 좋겠네요.

142
00:11:16,770 --> 00:11:18,310
이 단계를 테스트해 보겠습니다.

143
00:11:22,670 --> 00:11:26,330
이 단계를 테스트하면, 어떤 아이템도

144
00:11:26,331 --> 00:11:28,430
'false' 분기로 가지 않았다는 것을 볼 수 있습니다.

145
00:11:28,690 --> 00:11:36,430
왜냐하면 우리가 만들고 있는 분기는 직장
이메일 주소를 걸러내는 것이기 때문입니다.

146
00:11:36,630 --> 00:11:39,470
그래서 'and' 조건을 사용해야 합니다.

147
00:11:40,090 --> 00:11:44,830
직장 이메일 주소는 'gmail'을 포함하지 않고,

148
00:11:44,990 --> 00:11:47,270
'hotmail'도 포함하지 않아야 합니다.

149
00:11:47,390 --> 00:11:48,690
그래서 이 단계를 테스트해 보겠습니다.

150
00:11:49,830 --> 00:11:53,370
여기서 여러 개의 분기가 있는 것을 볼 수 있습니다.

151
00:11:53,371 --> 00:11:58,970
만약 여기에 노드를 추가하고,

152
00:11:59,210 --> 00:12:02,330
그리고 다른 노드를 여기에 추가하면요.

153
00:12:03,450 --> 00:12:05,790
그리고 이 'if' 노드를 다시 실행하면,

154
00:12:05,950 --> 00:12:09,690
5개의 아이템이 이 분기로 올라가고,

155
00:12:09,910 --> 00:12:12,790
3개의 아이템이 이 분기로 내려가는 것을 볼 수 있습니다.

156
00:12:14,290 --> 00:12:15,850
만약 우리가...

157
00:12:16,450 --> 00:12:20,870
이렇게 입력 아이템의 각 항목이

158
00:12:20,970 --> 00:12:23,450
이 분기 중 하나로만 내려가는 분기를
만들 수 있습니다. 이 경로들이요.

159
00:12:24,350 --> 00:12:30,870
만약 필터 노드에서 다른 'if' 노드를 드래그하면,

160
00:12:32,770 --> 00:12:34,990
그리고 그냥 위치를 다시 조정해 보겠습니다.

161
00:12:37,210 --> 00:12:38,790
좀 더 잘 볼 수 있게 말이죠.

162
00:12:40,290 --> 00:12:42,490
여기서 필터 노드를 실행하면,

163
00:12:42,610 --> 00:12:44,310
이 경우에,

164
00:12:44,450 --> 00:12:46,270
8개의 아이템이 여기로 내려가고,

165
00:12:46,430 --> 00:12:48,070
8개의 아이템이 여기로 내려갑니다.

166
00:12:48,450 --> 00:12:51,450
같은 노드에서 여러 개의 출력을 드래그하면,

167
00:12:51,451 --> 00:12:53,630
같은 노드에서 여러 개 출력을 드래그하면,

168
00:12:53,770 --> 00:12:57,370
아이템이 두 경로 모두로 복제됩니다.

169
00:12:57,710 --> 00:13:00,090
하지만 if 노드를 만들거나,

170
00:13:00,250 --> 00:13:03,070
조건부 분기를 만들어서,

171
00:13:03,510 --> 00:13:08,310
아이템을 여러 경로로 나눌 수 있습니다.

172
00:13:09,750 --> 00:13:14,510
n8n 초급 강좌 다섯 번째
비디오를 시청해 주셔서 감사합니다!

173
00:13:14,790 --> 00:13:17,410
여기서는 핵심 워크플로우 개념들을 다루고,

174
00:13:17,530 --> 00:13:20,850
처음으로 연결된 노드들을 만들어 봤습니다.

175
00:13:21,450 --> 00:13:23,010
다음 비디오에서는,

176
00:13:23,050 --> 00:13:26,990
워크플로우를 만들 때 유용한 노드들을 다룰 것입니다.
워크플로우를 만들 때 유용한 몇가지 노드들을 살펴볼 거예요.

177
00:13:27,530 --> 00:13:30,930
그리고 이 워크플로우를 계속해서 만들어 볼 거예요.

178
00:13:31,170 --> 00:13:33,550
더 복잡한 예시를 만들기 위해서요.

179
00:13:33,910 --> 00:13:35,270
다음 비디오에서 만나요!

