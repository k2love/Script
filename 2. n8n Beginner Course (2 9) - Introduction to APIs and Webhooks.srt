1
00:00:01,080 --> 00:00:05,400
안녕하세요! n8n 초보자 강좌 두
번째 영상에 오신 것을 환영합니다.

2
00:00:05,680 --> 00:00:10,900
오늘은 API와 웹훅에 대해 이야기해 볼 건데요, n8n
워크플로우를 만들기 전에 꼭 알아야 할 아주 중요한 개념들이에요.

3
00:00:10,901 --> 00:00:14,500
이번 영상에서는 API가 뭔지, 정의와
주요 구성 요소에 대한 설명을 드릴 거고요.

4
00:00:15,100 --> 00:00:23,340
그리고 '리버스 API'라고도 불리는
웹훅에 대해서도 알아볼 거예요.

5
00:00:23,341 --> 00:00:26,293
자, 그럼 먼저 API가 뭔지부터 알아볼까요?

6
00:00:26,294 --> 00:00:30,620
웹훅 (reverse API)에 대해서도 이야기할 거예요.

7
00:00:31,540 --> 00:00:34,020
우선, API가 뭘까요?

8
00:00:34,280 --> 00:00:39,480
이해를 돕기 위해 비유를 들어 설명해
드릴게요. 이 비유는 API가 뭔지뿐만 아니라

9
00:00:39,481 --> 00:00:43,382
API의 여러 부분과 관련 용어를
이해하는 데 아주 유용할 거예요.

10
00:00:43,383 --> 00:00:46,820
자, 식당에 앉아 있다고 상상해 보세요. 테이블에 앉아서

11
00:00:47,160 --> 00:00:52,480
어떻게 음식을 주문하죠? 음식을 어떻게 받나요?

12
00:00:52,620 --> 00:00:54,880
네, 웨이터에게 요청하죠.

13
00:00:55,040 --> 00:00:59,680
그러면 웨이터는 여러분에게 또 다른 질문을 할 거예요.

14
00:00:59,700 --> 00:01:02,760
주문받은 음식을 주방에 전달하겠죠.

15
00:01:03,040 --> 00:01:06,170
주방에서 음식이 다 준비되면,

16
00:01:06,171 --> 00:01:09,301
웨이터가 다시 여러분의 테이블로 음식을 가져다줄 거예요.

17
00:01:09,960 --> 00:01:14,260
이 과정이 API가 작동하는 방식과 아주 유사해요.

18
00:01:15,560 --> 00:01:22,280
API의 여러 부분을 설명할 때 이
비유를 사용할 거니까 잘 기억해 두세요.

19
00:01:22,840 --> 00:01:26,060
그럼 이 비유를 염두에 두면서 영상을 시청해 주세요.

20
00:01:27,420 --> 00:01:30,320
API의 기술적인 정의를 알아볼까요?

21
00:01:30,580 --> 00:01:34,620
API는 '애플리케이션 프로그래밍
인터페이스'의 약자입니다.

22
00:01:35,780 --> 00:01:41,960
API는 서비스를 제공하고, 개발자는
프로그램을 작성하여 이 서비스를 이용합니다.

23
00:01:42,280 --> 00:01:47,240
지난 영상에서 봤던 액션이나 앱을 예로
들어볼게요. 구글 시트를 예로 들어볼까요?

24
00:01:47,480 --> 00:01:50,420
구글 시트는 API를 가지고 있습니다.

25
00:01:50,700 --> 00:01:53,120
그리고 API 안에는 여러 서비스가 있죠.

26
00:01:53,740 --> 00:01:56,040
예를 들어 API 안에서,

27
00:01:56,060 --> 00:01:57,140
서비스가 있죠.

28
00:01:57,240 --> 00:02:02,700
이 서비스 중 하나는 특정 시트의 모든
데이터를 가져오는 것일 수 있습니다.

29
00:02:02,880 --> 00:02:06,693
구글 시트 API는 시트의 데이터를

30
00:02:06,694 --> 00:02:10,261
읽을 수 있는 서비스를 제공합니다.

31
00:02:10,700 --> 00:02:13,880
그리고 개발자들은 이 서비스를
사용하기 위해 프로그램을 작성합니다.

32
00:02:13,980 --> 00:02:18,420
n8n을 사용하면 구글 시트 API의

33
00:02:18,421 --> 00:02:21,981
여러 서비스를 활용하여 데이터를 가져올 수 있죠.

34
00:02:22,020 --> 00:02:25,960
예를 들어, 행을 업데이트하거나 시트의 데이터를
가져오는 것과 같은 기능을 사용할 수 있습니다.

35
00:02:27,920 --> 00:02:31,401
비유를 다시 보면, 웨이터는

36
00:02:31,402 --> 00:02:34,220
'인터페이스'라고 부를 수 있어요.

37
00:02:34,520 --> 00:02:37,940
그리고 '애플리케이션'은 주방이 되는 거죠.

38
00:02:38,160 --> 00:02:44,360
이 경우, 애플리케이션은 구글 시트가 될 수 있습니다.

39
00:02:44,540 --> 00:02:51,241
우리는 인터페이스를 사용하여
애플리케이션과 상호작용하게 됩니다.

40
00:02:52,400 --> 00:02:55,940
왜 애플리케이션과 상호작용하기
위해 인터페이스가 필요할까요?

41
00:02:55,941 --> 00:02:59,340
복잡성을 추상화할 수 있기 때문입니다.

42
00:03:00,260 --> 00:03:05,080
식당에 갈 때마다 그냥 앉아서 주문하는 대신

43
00:03:05,081 --> 00:03:10,820
주방에 가서 직접 주문을 설명하고,
음식이 다 될 때까지 기다렸다가

44
00:03:11,040 --> 00:03:14,720
직접 음식을 테이블로 가져와야 한다고 상상해 보세요.

45
00:03:14,900 --> 00:03:19,220
훨씬 복잡하겠죠? 그냥 웨이터에게
주문하는 것보다 훨씬 불편할 거예요.

46
00:03:19,780 --> 00:03:22,540
애플리케이션도 마찬가지입니다.

47
00:03:22,541 --> 00:03:29,800
구글 시트에서 데이터를 읽을
때마다 구글 서버에 직접 접속해서

48
00:03:29,801 --> 00:03:35,400
특정 시트를 찾고, 거기서 데이터를 직접 읽어야 한다면

49
00:03:35,500 --> 00:03:40,580
훨씬 복잡하겠죠? API를
사용하면 데이터를 훨씬 추상화해서

50
00:03:40,581 --> 00:03:45,960
애플리케이션의 데이터에 쉽게 접근할 수 있습니다.

51
00:03:47,280 --> 00:03:49,020
그렇다면 API는 어떻게 작동할까요?

52
00:03:49,380 --> 00:03:52,520
API는 '문서'를 사용합니다. 문서요.

53
00:03:52,540 --> 00:03:59,240
문서는 API, 즉 애플리케이션 프로그래밍
인터페이스가 어떻게 작동하는지 설명합니다.

54
00:03:59,620 --> 00:04:06,280
식당 비유로 말하면, 이 문서는 메뉴판이 되는 겁니다.

55
00:04:08,140 --> 00:04:09,640
몇 가지 용어를 정리해 볼게요.

56
00:04:10,220 --> 00:04:15,630
우리는 인터페이스를 통해 애플리케이션에 '요청'을 보내고,

57
00:04:15,631 --> 00:04:19,980
애플리케이션은 인터페이스를 통해 '응답'을 보냅니다.

58
00:04:21,020 --> 00:04:24,480
'클라이언트'와 '서버'라는 용어도 있어요.

59
00:04:24,860 --> 00:04:27,813
여기서 여러분은 클라이언트가 되고,

60
00:04:27,814 --> 00:04:30,700
애플리케이션과 인터페이스는 서버가 됩니다.

61
00:04:30,940 --> 00:04:32,900
이 용어들을 사용할 때 참고해 주세요.

62
00:04:34,840 --> 00:04:40,860
API를 사용할 때는 앞서 말했듯이
'요청'과 '응답'이 있습니다.

63
00:04:41,180 --> 00:04:43,621
이제 요청의 구성 요소와 응답의 구성 요소를

64
00:04:43,622 --> 00:04:46,260
자세히 살펴볼 거예요.

65
00:04:47,020 --> 00:04:48,640
먼저 요청부터 살펴볼까요?

66
00:04:48,641 --> 00:04:52,520
HTTP 요청에는 네 가지 주요 구성 요소가 있습니다.

67
00:04:52,960 --> 00:04:56,790
이 영상에서는 HTTP 요청에 대해서만 이야기할 거예요.

68
00:04:57,400 --> 00:05:02,080
GraphQL과 같이 API 요청을 만드는 데
사용되는 다양한 프레임워크가 있지만,

69
00:05:02,380 --> 00:05:07,940
대부분의 API는 HTTP 프레임워크를 사용합니다.

70
00:05:09,240 --> 00:05:14,680
오늘 우리가 이야기하는 모든 내용은
HTTP 요청 노드에 반영되어 있습니다.

71
00:05:14,920 --> 00:05:18,620
HTTP 요청 노드를 사용하면
HTTP 요청을 할 수 있습니다.

72
00:05:18,621 --> 00:05:22,720
n8n에서 HTTP 요청을 하고 응답을 받을 수 있습니다.

73
00:05:23,140 --> 00:05:26,228
이는 특정 API를 사용해야 하는 자동화를

74
00:05:26,229 --> 00:05:29,260
구축할 때 매우 유용할 거예요.

75
00:05:30,280 --> 00:05:33,140
HTTP 요청에는 네 가지 구성 요소가 있다고 했죠?

76
00:05:33,440 --> 00:05:36,960
URL, 메서드, 헤더, 그리고 본문이 있습니다.

77
00:05:37,140 --> 00:05:38,500
하나씩 살펴볼까요?

78
00:05:39,380 --> 00:05:44,040
URL은 웹상의 리소스의 고유한 위치입니다.

79
00:05:44,180 --> 00:05:47,720
페이지, 이미지, PDF, 또는 데이터가 될 수 있습니다.

80
00:05:48,620 --> 00:05:50,260
URL의 예를 하나 보여드릴게요.

81
00:05:50,640 --> 00:05:56,920
스키마, 호스트, 포트, 경로,
그리고 쿼리 매개변수가 있죠.

82
00:05:57,880 --> 00:06:01,920
스키마, 호스트, 경로는 필수 요소이고,

83
00:06:02,500 --> 00:06:05,860
포트와 쿼리 매개변수는 선택 사항입니다.

84
00:06:06,860 --> 00:06:09,266
쿼리 매개변수는 항상 물음표로

85
00:06:09,267 --> 00:06:12,381
시작한다는 것을 알아두세요.

86
00:06:13,960 --> 00:06:15,560
다음은 메서드입니다.

87
00:06:15,680 --> 00:06:18,600
메서드는 지정된 URL에서 수행하려는 동작을 설명합니다.

88
00:06:18,620 --> 00:06:20,380
주어진 URL에서 수행하려는 작업입니다.

89
00:06:20,980 --> 00:06:26,520
HTTP 요청에 사용할 주요 메서드는 두 가지입니다.

90
00:06:26,880 --> 00:06:29,620
GET 메서드와 POST 메서드가 있습니다.

91
00:06:30,220 --> 00:06:34,560
GET 메서드는 대부분 정보를 받는 데 사용됩니다.

92
00:06:34,980 --> 00:06:40,480
구글 시트에서 데이터를 읽을
때는 GET 메서드를 사용하는 거죠.

93
00:06:40,640 --> 00:06:43,940
그리고 POST 메서드는 정보를 보내는 데 사용됩니다.

94
00:06:44,340 --> 00:06:47,947
예를 들어 폼 제출에서 정보를 보내려면

95
00:06:47,948 --> 00:06:52,040
POST HTTP 메서드를 사용해야 합니다.

96
00:06:53,200 --> 00:06:57,080
다른 메서드들은 조금 더 드물게 사용됩니다.

97
00:06:57,240 --> 00:07:03,441
DELETE, PUT, PATCH와 같은 메서드가
있지만, 자주 사용되지는 않습니다.

98
00:07:04,220 --> 00:07:09,840
메서드에서 흥미로운 점은 항상 동사라는
것입니다. 즉, 우리가 무엇을 하려고 하는지

99
00:07:09,841 --> 00:07:12,720
매우 명확하게 설명해 준다는 거죠.

100
00:07:12,940 --> 00:07:18,760
어떤 메서드를 사용해야 할지 고민될 때는 어떤 동사가
여러분이 하려는 작업에 가장 적절할지 생각해 보세요.

101
00:07:18,761 --> 00:07:21,280
하려는 작업에 가장 어울리는 동사를 생각하면 됩니다.

102
00:07:22,520 --> 00:07:24,120
다음은 헤더입니다.

103
00:07:24,200 --> 00:07:29,100
헤더는 주어진 요청에 대한 세부
정보나 컨텍스트를 제공합니다.

104
00:07:29,960 --> 00:07:35,700
헤더에서 흔히 볼 수 있는 정보는 여러분의
위치, 언어 설정, 장치 유형 등이 있습니다.

105
00:07:35,701 --> 00:07:40,020
여러분들의 위치, 선호하는 언어, 장치 유형 같은 것이죠.

106
00:07:41,840 --> 00:07:48,060
인터넷에서 페이지를 열
때마다 API 요청을 서버로 보내고,

107
00:07:48,061 --> 00:07:52,320
서버는 웹 페이지로 응답합니다.

108
00:07:52,660 --> 00:07:59,360
만약 여러분이 컴퓨터나
노트북에서 인터넷을 사용하고 있다면,

109
00:07:59,740 --> 00:08:06,061
요청 헤더에 서로 다른 정보나 컨텍스트가 포함될 거예요.

110
00:08:06,560 --> 00:08:11,281
헤더의 예로는 'Accept:
application/json'이 있습니다.

111
00:08:11,282 --> 00:08:15,320
이것은 서버에 요청과

112
00:08:15,340 --> 00:08:19,400
HTTP 요청의 응답을 JSON 형식으로
받고 싶다는 의미를 전달합니다.

113
00:08:21,160 --> 00:08:22,880
마지막으로 본문이 있습니다.

114
00:08:22,960 --> 00:08:26,820
본문은 선택 사항이며, POST 요청에만 존재합니다.

115
00:08:27,240 --> 00:08:32,120
본문은 서버나 애플리케이션에
보내고 싶은 정보를 담고 있습니다.

116
00:08:33,100 --> 00:08:39,160
폼 제출의 예를 들면, 본문에는
'이름: Maxim', '성: POLSON',

117
00:08:39,161 --> 00:08:45,620
그리고 관련 이메일과 같은 정보가 들어 있을 수 있습니다.

118
00:08:45,820 --> 00:08:49,560
이것이 우리가 서버로 보내는 정보입니다.

119
00:08:51,440 --> 00:08:53,840
마지막으로 자격 증명(credentials)이 있습니다.

120
00:08:53,920 --> 00:08:57,729
자격 증명은 HTTP 요청의 주요 부분으로

121
00:08:57,730 --> 00:09:02,740
나열되지는 않았지만, 그 자체로도 아주 중요합니다.

122
00:09:02,960 --> 00:09:06,900
자격 증명을 사용하는 방법은 다양합니다.

123
00:09:07,240 --> 00:09:10,726
자격 증명은 우리가 특정 요청을 할 수 있는 권한이 있는지

124
00:09:10,727 --> 00:09:13,580
애플리케이션에 알려주는 방법입니다.

125
00:09:13,680 --> 00:09:19,340
만약 누구나 여러분의 구글 시트를 읽거나 업데이트하거나,
슬랙에서 메시지를 보낼 수 있다면, 매우 위험하겠죠?

126
00:09:19,341 --> 00:09:23,020
위험하겠죠?

127
00:09:23,340 --> 00:09:29,184
그래서 우리는 HTTP 요청에 자격 증명을 포함시켜

128
00:09:29,185 --> 00:09:33,600
서버에 이 요청을 할 권한이 있다는 것을 알려줍니다.

129
00:09:34,560 --> 00:09:38,380
대부분의 API는 자격 증명을 통한 인증을 요구합니다.

130
00:09:38,480 --> 00:09:42,600
하지만 일부 API는 인증을 요구하지 않기도 합니다.

131
00:09:43,680 --> 00:09:48,440
서비스를 인증하는 가장 일반적인 두
가지 방법은 쿼리 매개변수를 통한 인증과

132
00:09:48,441 --> 00:09:53,671
'API 키=XXXX' 형식으로 API 키를 전달하거나,

133
00:09:53,672 --> 00:09:56,540
헤더 인증을 사용하는 것입니다.

134
00:09:56,860 --> 00:10:02,800
예를 들어 'Authorization: Bearer
XXXX'와 같이 API 키를 전달하는 것입니다.

135
00:10:03,040 --> 00:10:07,520
서비스를 인증하는 또 다른 매우
일반적인 방법은 OAuth를 통하는 것입니다.

136
00:10:07,700 --> 00:10:13,720
'Google로 로그인' 버튼을 클릭할 때 작은 창이 열리고
구글 계정으로 로그인하는 것이 바로 OAuth 인증 방식입니다.

137
00:10:13,721 --> 00:10:19,260
작은 창이 열리면서 구글 계정으로
로그인하는 것이 OAuth 인증 방식입니다.

138
00:10:21,460 --> 00:10:25,460
이제 요청을 보내는 데 필요한 모든 것을 살펴봤습니다.

139
00:10:25,780 --> 00:10:30,561
이제 애플리케이션이 응답하는 방식을 알아볼 차례입니다.

140
00:10:31,020 --> 00:10:34,620
HTTP 응답에는 세 가지 주요 구성 요소가 있습니다.

141
00:10:35,200 --> 00:10:38,640
상태 코드, 헤더, 그리고 본문입니다.

142
00:10:40,060 --> 00:10:46,200
상태 코드는 요청이 성공했는지, 실패했는지에
대한 정보를 제공하는 세 자리 숫자입니다.

143
00:10:46,201 --> 00:10:49,160
요청이 성공했는지, 실패했는지에 대한 정보를 알려줍니다.

144
00:10:49,700 --> 00:10:55,680
가장 일반적인 상태 코드는 200(OK)입니다.

145
00:10:56,040 --> 00:10:58,620
이는 표준적인 성공 응답입니다.

146
00:10:59,000 --> 00:11:03,960
이는 API 요청이 성공적으로 실행되었으며 애플리케이션이

147
00:11:04,520 --> 00:11:08,620
성공적인 요청이었다고 알려주는 것입니다.

148
00:11:09,800 --> 00:11:12,660
401은 '인증 실패'를 의미합니다.

149
00:11:12,880 --> 00:11:14,980
일반적으로 인증에 문제가 있을 때 나타납니다.

150
00:11:15,240 --> 00:11:20,680
애플리케이션은 보낸 요청에 이 요청을 수행하는 데 필요한

151
00:11:20,681 --> 00:11:25,080
인증 정보가 포함되어 있지 않다고 알려주는 것입니다.

152
00:11:25,340 --> 00:11:29,990
이 경우에는 자격 증명을 확인하고

153
00:11:29,991 --> 00:11:34,460
자격 증명을 어떻게 보냈는지, 또는 자격
증명에 어떤 권한이 있는지 확인해야 합니다.

154
00:11:36,020 --> 00:11:37,700
또 다른 상태 코드는 404입니다.

155
00:11:37,840 --> 00:11:40,040
웹에서 본 적이 있을 거예요.

156
00:11:40,240 --> 00:11:41,280
'Not Found'입니다.

157
00:11:41,281 --> 00:11:49,000
URL에 문제가 있다는 뜻이며, 찾고 있는 페이지
또는 데이터가 지정한 URL에 없다는 의미입니다.

158
00:11:49,001 --> 00:11:52,500
요청한 URL에는 데이터가 없다는 의미입니다.

159
00:11:53,080 --> 00:11:55,958
마지막으로 500은 '내부 서버 오류'를 의미합니다.

160
00:11:55,959 --> 00:12:00,400
서버에 오류가 발생했다는 것을 나타냅니다.

161
00:12:00,920 --> 00:12:03,780
이는 여러분의 잘못이 아니라 서버의 잘못이라는 의미입니다.

162
00:12:04,180 --> 00:12:11,340
일반적으로 이 코드를 쉽게 기억하고 이해하는 방법은 상태
코드가 2로 시작하면, 성공적인 HTTP 요청이라는 뜻입니다.

163
00:12:11,341 --> 00:12:16,200
축하해요! 성공적인 HTTP 요청입니다.

164
00:12:16,440 --> 00:12:19,281
4로 시작하면 여러분이 어떤

165
00:12:19,282 --> 00:12:22,701
실수를 했고 요청을 수정해야 한다는 의미입니다.

166
00:12:22,760 --> 00:12:25,700
500은 서버 오류를 의미합니다.

167
00:12:26,080 --> 00:12:29,060
대부분의 경우 나중에 다시 시도하라는 의미입니다.

168
00:12:31,180 --> 00:12:38,380
요청에 헤더를 포함시킨 것과 마찬가지로,
애플리케이션도 응답에 헤더를 보내서

169
00:12:38,381 --> 00:12:42,600
더 많은 컨텍스트나 세부 정보를 제공합니다.

170
00:12:43,240 --> 00:12:50,340
일반적인 응답 헤더는 콘텐츠
길이, 응답에 포함된 콘텐츠의 양,

171
00:12:50,341 --> 00:12:52,520
콘텐츠 유형 또는

172
00:12:52,521 --> 00:12:56,181
콘텐츠 만료 시점 등이 있습니다.

173
00:12:56,400 --> 00:13:00,060
얼마나 오랫동안 이 콘텐츠에
액세스할 수 있는지 알려주는 것이죠.

174
00:13:02,160 --> 00:13:04,780
마지막으로 본문이 있을 수 있습니다.

175
00:13:04,920 --> 00:13:07,540
본문은 실제로 반환되는 데이터를 말합니다.

176
00:13:07,541 --> 00:13:10,220
다양한 형식일 수 있습니다.

177
00:13:10,480 --> 00:13:13,740
웹을 탐색하는 경우 HTML일 수 있고,

178
00:13:13,880 --> 00:13:17,700
JSON일 수도 있고, 다른
형태의 데이터일 수도 있습니다.

179
00:13:17,800 --> 00:13:19,280
예를 들어 바이너리 데이터 같은 것이요.

180
00:13:22,100 --> 00:13:26,460
자, 그럼 웹훅 또는 리버스 API에
대해 빠르게 이야기해 볼까요?

181
00:13:28,220 --> 00:13:31,220
집에서 친구들을 기다리고 있다고 상상해 보세요.

182
00:13:32,020 --> 00:13:35,280
몇 분마다 문을 확인해서 친구들이 왔는지 볼 수도 있고,

183
00:13:35,281 --> 00:13:39,960
초인종이 울릴 때까지 기다릴 수도 있습니다.

184
00:13:40,560 --> 00:13:43,800
여기서 초인종이 바로 웹훅입니다.

185
00:13:43,940 --> 00:13:48,460
웹훅은 여러분이 기다리고 있는
일이 일어났다는 것을 알려줍니다.

186
00:13:49,560 --> 00:13:51,960
스트라이프를 사용한다고 가정해 봅시다.

187
00:13:52,180 --> 00:13:55,180
스트라이프는 결제를 관리하는 개발자 플랫폼입니다.

188
00:13:55,540 --> 00:14:00,200
스트라이프 계정에서 새로운 결제가
이루어질 때마다 알고 싶다고 가정해 봅시다.

189
00:14:00,540 --> 00:14:02,500
두 가지 옵션이 있습니다.

190
00:14:02,920 --> 00:14:05,100
하나는 '폴링'이라고 하는 것입니다.

191
00:14:05,101 --> 00:14:10,640
예를 들어 몇 분마다 스트라이프에 새로운 요청을 보내서

192
00:14:11,080 --> 00:14:15,060
새로운 결제가 있는지 확인하는 API 요청을 보내는 거죠.

193
00:14:16,940 --> 00:14:19,040
만약 새로운 결제가 있다면, 어떤 작업을 수행하고,

194
00:14:19,260 --> 00:14:20,720
없다면 기다립니다.

195
00:14:21,340 --> 00:14:24,774
그리고 몇 분마다 스트라이프에

196
00:14:24,775 --> 00:14:27,481
새로운 결제가 있는지 계속 물어보는 겁니다.

197
00:14:27,940 --> 00:14:29,920
또는 웹훅을 설정할 수도 있습니다.

198
00:14:30,080 --> 00:14:35,200
스트라이프에서 새로운 결제가
발생할 때마다 웹훅이 즉시 전송되어

199
00:14:35,201 --> 00:14:41,040
결제 정보를 실시간으로 받아볼 수 있는 거죠.

200
00:14:41,800 --> 00:14:47,140
우리가 어떤 일이 발생하기를 기다리거나,
특정 애플리케이션 또는 서비스로부터

201
00:14:47,141 --> 00:14:51,052
정보를 기다릴 때, 때로는 이러한 애플리케이션에서

202
00:14:51,053 --> 00:14:54,780
웹훅을 만들 수 있도록 허용합니다.

203
00:14:55,260 --> 00:14:58,280
웹훅을 설정하려면 URL이 필요합니다.

204
00:14:58,340 --> 00:15:02,460
정보를 보낼 위치가 어디인지를 지정해야 하는 거죠.

205
00:15:03,360 --> 00:15:09,800
그런 다음 n8n이나 웹훅 노드와 같은
도구를 사용하여 이 정보를 수신 및 관리하고

206
00:15:09,801 --> 00:15:13,300
워크플로우를 트리거할 수 있습니다.

207
00:15:14,040 --> 00:15:20,120
API와 웹훅에 대한 초보자 과정의
두 번째 영상은 여기까지입니다.

208
00:15:20,121 --> 00:15:24,046
다음 영상에서는 n8n 노드와 첫 번째 워크플로우를

209
00:15:24,047 --> 00:15:26,680
구축하기 위해 알아야 할 모든 것을 다룰 거예요.

210
00:15:27,100 --> 00:15:28,300
다음 영상에서 만나요!

