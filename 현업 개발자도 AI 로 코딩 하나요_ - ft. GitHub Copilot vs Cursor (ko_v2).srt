1
00:00:00,000 --> 00:00:05,940
챗 GPT나 깃허브 코파일럿 같은 게 나오면서 이제
AI로 코딩하는 게 굉장히 흔한 일이 됐어요. 그렇죠?

2
00:00:06,000 --> 00:00:14,557
유튜브에서는 맨날 AI가 코딩 다 해주는데 지금 코딩을 왜 배우냐고 하고,
개발자 다 필요 없어지는 거 아니냐고 그래요. 심지어 지금 컴퓨터 공학을

3
00:00:14,581 --> 00:00:21,800
전공하는 학생들이나 주니어 개발자분들도 저한테
와서 "이거 저희가 잘하고 있는 거 맞나요?" 이렇게 물어봐요

4
00:00:21,840 --> 00:00:24,140
사실 이런 불안감을 가지는 건 당연한 거죠

5
00:00:24,260 --> 00:00:27,277
근데 빅테크 내부에서는 분위기가 조금 다른 것 같아요

6
00:00:27,301 --> 00:00:34,237
어떤 식으로 다르냐면, 유튜브에서는 한 100명
중에 95명 정도가 "이제 AI가 코딩 다 해준다,

7
00:00:34,261 --> 00:00:37,200
개발자 끝났다, 아니면 코딩 공부할 필요 없다"

8
00:00:37,320 --> 00:00:45,857
이런 식으로 의견을 피력한다면, 빅테크 내부에서는 한 100명 중에
20명 정도가 일상생활에서 코딩을 좀 적극적으로 활용하는 것 같고

9
00:00:45,881 --> 00:00:50,860
그것도 우리가 비즈니스 로직을 짤 때보다는
흔히 말하는 단순 노동 같은 거 있잖아요

10
00:00:51,040 --> 00:00:59,777
코드베이스를 깔끔하게 정리한다거나, 빠져있던 유닛 테스트를
추가한다거나 할 때 AI를 좀 더 활용하는 것 같아요. 더 많은

11
00:00:59,801 --> 00:01:07,920
곳에 활용하고 싶어도 코드베이스가 커지면 커질수록 AI 모델의
사용성이 떨어지는 한계점 때문에 지금으로서는 어려움이 좀 있어요

12
00:01:08,080 --> 00:01:13,440
제 체감상 유튜브에서의 의견과 빅테크 내부에서의 의견에 조금 차이가 있다

13
00:01:13,700 --> 00:01:20,920
근데 그 말은 뭐죠? 우리가 사이드 프로젝트 같은 걸 할 때 혼자서
재미로 코딩하거나, 아니면 내가 아직 조금 작은 팀의 구성원이다

14
00:01:21,460 --> 00:01:28,060
그럴 경우에는 AI 모델을 사용해서 코딩하는 게
내 생산성을 높이는 아주 좋은 방법이 될 수가 있겠죠

15
00:01:28,240 --> 00:01:32,720
그래서 오늘은 AI로 코딩을 할 수
있게 도와주는 툴들을 리뷰해 볼게요

16
00:01:33,680 --> 00:01:42,277
자, 우리가 처음 리뷰할 툴은 VS Code, 그러니까 Visual
Studio Code라는 코딩 에디터에서 깃허브 코파일럿을 쓰는 건데,

17
00:01:42,301 --> 00:01:47,927
저도 VS Code를 주로 이용하고
코딩할 때, 대신에 깃허브 코파일럿은 썼다

18
00:01:47,951 --> 00:01:53,576
안 썼다 하는데, 일단 우리가 같이 해볼
거는 회원가입 페이지를 한번 만들어봅시다

19
00:01:54,040 --> 00:01:55,960
회원가입 페이지 만들기...

20
00:01:56,740 --> 00:02:03,240
근데 이거를 AI 없이 한번 만들어 보는 게
좋을 것 같아서 AI 없이 먼저 한번 해볼게요

21
00:02:03,380 --> 00:02:12,080
지금 쓰고 있는 스택은 Next. Js, React, Tailwind
.css라는 걸 쓰는데 이게 뭔지 모르셔도 아무런 상관없고요

22
00:02:12,180 --> 00:02:18,840
여기서 제가 "헬로월드" 라고 왼쪽에 쓰면 오른쪽에
이런 식으로 나오는구나, 코드가 오른쪽에 나오는구나

23
00:02:18,960 --> 00:02:20,500
이 정도만 아시면 됩니다

24
00:02:20,800 --> 00:02:24,500
맨 처음에 AI를 최대한 안 쓰고 코딩을 한번 해볼게요

25
00:02:24,680 --> 00:02:34,180
그러면 회원가입을 만들기 위해서는 맨 처음에
맨 위에다가 "회원가입" 이런 말이 있어야겠죠

26
00:02:34,710 --> 00:02:39,220
그러면 오른쪽에 보이는 걸 보실 수가 있고, 그 다음에

27
00:02:45,380 --> 00:02:46,600
이메일이 있어야겠죠

28
00:02:48,300 --> 00:03:02,020
이메일이 있고, 그 다음에 밑에 버튼, "회원 가입하기"
그 다음에 이거 두 개가 <form>에 들어가 있으면 좋겠죠

29
00:03:02,120 --> 00:03:17,700
그 다음에 여기서 <label> 라벨도 붙이고 "이메일",
그 다음에 여기서 placeholder도 붙이고

30
00:03:20,850 --> 00:03:31,250
자, 이렇게 하면 아주 간단한 회원가입 <form>이
완성됐는데, 이거 처음 보실 때는 이게 참 뭔가 싶겠죠

31
00:03:31,390 --> 00:03:39,710
왜냐하면 스타일링이 하나도 안 돼 있으니까. 그래서
스타일링을 좀 더 해보면, 일단 여백을 좀 줄게요. 여백을...

32
00:03:42,630 --> 00:03:43,950
여백을 좀 주고

33
00:03:44,490 --> 00:03:57,180
그 다음에 여기서도 여백을 좀 주고, 그
다음에 배경색도 좀 줄게요

34
00:03:57,840 --> 00:04:01,880
Background... 이게 맞나?

35
00:04:02,340 --> 00:04:03,340
Bg?

36
00:04:03,820 --> 00:04:04,920
네, 이거였죠

37
00:04:05,000 --> 00:04:11,820
그 다음에 여백을 좀 주고, 그 다음에 비밀번호도 한번 넣어볼까요?

38
00:04:12,040 --> 00:04:23,420
비밀번호도... "비밀번호"... 비밀번호 넣었고

39
00:04:25,240 --> 00:04:27,840
회원가입도 조금 더 컸으면 좋겠으니까, 글자가

40
00:04:32,900 --> 00:04:34,100
네, 좀 커졌죠

41
00:04:34,180 --> 00:04:39,860
그 다음에 얘도 여백을 좀... 여백을 좀 주고

42
00:04:40,040 --> 00:04:48,900
자, 이게 우리가 AI 없이 만든
아주 간단한 회원가입 폼입니다

43
00:04:49,100 --> 00:04:57,100
여기서 "money@gmail.com", 비밀번호를 "12341234" 하고
"가입하기" 누르면 회원가입이 된다

44
00:04:57,280 --> 00:05:00,220
그런데 지금 이 버튼을 눌러도 아무것도 안 되죠

45
00:05:00,800 --> 00:05:02,700
그러면 이 정도만 하고...

46
00:05:02,900 --> 00:05:06,280
이제 그러면 좀 AI를 좀 써보면 어떨까. 그렇죠?

47
00:05:06,400 --> 00:05:07,700
이제 일단 commit을 하고...

48
00:05:12,620 --> 00:05:21,620
그러면 여기서 AI를 쓰는 방법은 이거 전체를 일단 다 선택하고
command-I를 누르면 이런 식으로 코파일럿이 하나 나옵니다

49
00:05:21,740 --> 00:05:26,420
여기서 이제 GPT-4라고 나오는데, 이거를
모델을 이런 식으로 바꿀 수도 있어요

50
00:05:26,540 --> 00:05:27,820
모델을 바꿀 수도 있고

51
00:05:27,940 --> 00:05:31,077
이제 코파일럿한테 뭘 시킬 거냐 이렇게 나와요

52
00:05:31,101 --> 00:05:34,140
그러면 제가 "이거를 좀 더 이쁘게 만들어 줘."

53
00:05:34,240 --> 00:05:35,860
왜냐하면 지금 보시면 너무 안 이쁘잖아요

54
00:05:35,980 --> 00:05:41,780
이거를 좀 더 "make this sign-off
form a lot prettier with Tailwind CSS"

55
00:05:42,100 --> 00:05:44,880
한글로 하셔도 되는데 저는 일단 영어가 편해서 영어로 할게요

56
00:05:45,200 --> 00:05:47,320
이걸 하면 어떤 식으로 바꿔주는지

57
00:05:48,700 --> 00:05:50,580
막 스타일링을 막 추가를 합니다

58
00:05:50,880 --> 00:05:53,220
막 추가를 하고 어떤지 한번 볼게요

59
00:05:53,340 --> 00:05:57,680
이거 Accept 버튼을 누르면 되는데, 버튼을
누르거나 command-Enter를 누르시면 됩니다

60
00:05:58,060 --> 00:06:04,500
자, save를 하면... 자, 이렇게
아주 이쁜 회원가입 폼이 만들어졌고요

61
00:06:04,600 --> 00:06:09,760
한 가지 더 해야 될 거는 이 "가입하기" 버튼을
눌렀을 때 지금 아무것도 안 되잖아요. 그렇죠?

62
00:06:09,880 --> 00:06:13,400
그래서 이 기능을 좀 추가할 수 없을까?

63
00:06:13,460 --> 00:06:19,020
이 "가입하기" 를 눌렀을 때 실제로 회원
레코드를 DB에다 넣어 줄 수 있게. 그렇죠?

64
00:06:19,140 --> 00:06:20,500
그러면 다시 한번 물어봅시다

65
00:06:20,680 --> 00:06:26,160
"When update the code
so that when you click..."

66
00:06:26,920 --> 00:06:28,680
"When you submit the form..."

67
00:06:30,120 --> 00:06:32,500
"Actually call an API endpoint."

68
00:06:33,540 --> 00:06:39,880
회원가입 버튼을 눌렀을 때 API
서비스를 call해서 회원 레코드를 만들어 줘

69
00:06:42,720 --> 00:06:48,240
근데 지금은 API 서비스가 있진 않으니까 API 서비스가 있다고 가정해 줘

70
00:06:53,550 --> 00:06:55,010
그렇게 하면...

71
00:06:56,890 --> 00:06:58,550
state를 추가를 하고요.

72
00:06:59,730 --> 00:07:07,010
API 엔드포인트로 추가했고... 이제 밑에 코드로
아주 알아서 다 업데이트를 했습니다. 그렇죠?

73
00:07:07,130 --> 00:07:08,170
에러가 하나 났네요

74
00:07:08,290 --> 00:07:14,530
그러면 이 에러 메시지를 보고 저는
"아, 이거는 next. Js에서 필요한 useClient."

75
00:07:15,450 --> 00:07:17,030
"UseClient가 없어서 그렇구나."

76
00:07:17,230 --> 00:07:22,690
보고 보니까 이제 됐고...
그러면 이제 여기서 "hello world..."

77
00:07:24,770 --> 00:07:31,527
이렇게 했을 때 이 버튼을 누르면... 이
API의 handleSubmit이라는 function이...

78
00:07:31,551 --> 00:07:34,970
알아서 API에 call을 하는 걸 볼 수가 있습니다

79
00:07:35,210 --> 00:07:36,530
근데 여기서 한 가지 아쉬운 점

80
00:07:36,590 --> 00:07:39,810
내가 회원가입을 할 때 보통은
비밀번호를 두 번 치잖아요. 그렇죠?

81
00:07:40,050 --> 00:07:44,170
Form input이 하나 더 있어야 될 것
같은데... 이제 그거를 좀 고쳐달라고 하면은...

82
00:07:44,910 --> 00:07:45,910
여기서...

83
00:07:47,150 --> 00:07:48,550
또 말을 할게요

84
00:07:48,670 --> 00:07:51,830
"This is... 이거는... this is a sign of form."

85
00:07:52,270 --> 00:07:55,290
"But there is only one password input."

86
00:07:55,570 --> 00:07:58,490
"Add one more password confirmation input."

87
00:07:59,710 --> 00:08:02,610
이메일 확인이라는 input field를 하나 더 만들어 줘

88
00:08:02,670 --> 00:08:06,110
라고 하면은... 얘가 알아서
"비밀번호 확인" 이라는 걸 하나 넣어줄게

89
00:08:06,230 --> 00:08:14,110
그래서 Accept하고 save를 하면... 비밀번호 확인도
그대로 들어있는 걸 보실 수가 있습니다. 그렇죠?

90
00:08:14,330 --> 00:08:21,967
근데 여기서 또 하나 마음에 안 드는 거는... 내가 이미 회원이면
여기서 회원가입을 하는 대신에... 로그인 페이지로 가야 되는데...

91
00:08:21,991 --> 00:08:23,930
거기에 대한 링크가 없어요. 그렇죠?

92
00:08:24,070 --> 00:08:26,530
그러면 그것도 좀 add 해달라고 해볼게요

93
00:08:26,710 --> 00:08:27,750
추가해달라고 해볼게요

94
00:08:28,330 --> 00:08:31,266
"Create a link to the login page."

95
00:08:31,290 --> 00:08:43,410
"So that if I'm already a user... then I
can click the link... to go to that page."

96
00:08:45,250 --> 00:08:48,390
로그인 링크... 우리가 추가할
수도 있지만 귀찮으니까...

97
00:08:49,130 --> 00:08:52,230
그러면 쭉쭉쭉 코드로 보다가... 얘가 어?

98
00:08:52,310 --> 00:08:53,830
여기다가 넣으면 되겠다

99
00:08:53,890 --> 00:08:56,651
참 신기한 게 "이미 회원이신가요?" 는 지가 알아서 넣었어요

100
00:08:56,970 --> 00:08:57,970
그러면은...

101
00:08:58,290 --> 00:08:59,970
이제 이렇게 하면은...

102
00:09:01,290 --> 00:09:02,850
얘가 코드를 잘못 썼죠

103
00:09:03,070 --> 00:09:04,070
왜냐면은...

104
00:09:04,890 --> 00:09:11,990
next. Js에서는 link라는 컴포넌트에다가 <a> 태그를 넣으면 안
되는데 이렇게 썼으니까... 자, 이렇게 완벽하지는 않습니다. 아직

105
00:09:12,030 --> 00:09:15,050
그러면 이 부분만 내가 그냥 따로 고쳐볼게요

106
00:09:21,460 --> 00:09:23,100
따로 고치면은... "이미 회원이신가요?"

107
00:09:23,220 --> 00:09:24,220
"로그인."

108
00:09:24,380 --> 00:09:27,260
자, 그러면은 이걸 눌렀을 때 지금 어디로 가냐?

109
00:09:27,580 --> 00:09:29,680
눌렀을 때는 로그인 페이지로 가는데...

110
00:09:30,620 --> 00:09:32,137
우리는 로그인 페이지가 없어요. 그렇죠?

111
00:09:32,161 --> 00:09:33,340
그럴 때는 또...

112
00:09:34,020 --> 00:09:38,740
이 코파일럿한테 "혹시 우리가 이 로그인
페이지를 좀 만들어 달라고 할 순 없을까?"

113
00:09:38,860 --> 00:09:39,960
그랬을 때...

114
00:09:40,940 --> 00:09:41,940
이번에는 이...

115
00:09:42,820 --> 00:09:45,600
파일 안에서 코파일럿이랑 채팅하는 게 아니고...

116
00:09:46,160 --> 00:09:49,320
"edit with copilot" 이라는
툴을 써서 한번 해볼게요

117
00:09:49,480 --> 00:09:50,600
자, 그러면은...

118
00:09:50,820 --> 00:09:55,020
이제 지금 보고 있는 이 회원가입 페이지를 이 워킹셋에다 넣고...

119
00:09:56,240 --> 00:09:59,200
컨텍스트를 추가한다고 해요, 이 작업을

120
00:09:59,260 --> 00:10:04,640
그 다음에... 지금 회원가입 페이지는 있는데,
로그인 페이지가 없어

121
00:10:04,860 --> 00:10:06,280
로그인 페이지를...

122
00:10:06,760 --> 00:10:13,280
경로... 경로는 "app/login/page.tsx" 에다가...

123
00:10:13,880 --> 00:10:18,116
회원가입 페이지의 코딩 스타일을 따라서 만들어 줘

124
00:10:18,140 --> 00:10:19,140
라고 한번 해볼게요

125
00:10:19,680 --> 00:10:22,140
그 다음에 요청을 보내면...

126
00:10:23,580 --> 00:10:27,420
얘가 알아서 "로그인 페이지 비슷한 거 한번 만들어볼까?"

127
00:10:27,480 --> 00:10:30,580
해서 가보면 얘가 이런 식으로 열심히...

128
00:10:31,700 --> 00:10:32,700
만들고 있습니다

129
00:10:35,900 --> 00:10:39,140
그 다음에 이게 다 될 때까지 좀 기다려서...

130
00:10:39,820 --> 00:10:41,060
Accept를 하고...

131
00:10:41,740 --> 00:10:51,140
저장을 하면... 이런 식으로 로그인 페이지가 생기는 걸 볼 수가
있고, 여기서 회원가입 링크를 누르면 회원가입도 알맞게...

132
00:10:52,010 --> 00:10:53,440
잘 되는 걸 볼 수가 있죠

133
00:10:53,600 --> 00:11:00,057
근데 이제 또 여기서 한 가지 마음에 안 드는 거는... 그러면
여기서 내가 비밀번호를 잃어버렸을 때 어떻게 해야 하나...

134
00:11:00,081 --> 00:11:01,260
할 수 있는 방법이 없잖아요

135
00:11:01,320 --> 00:11:02,820
찾을 수 있는 방법이 없잖아요

136
00:11:03,000 --> 00:11:08,181
그래서 여기서 이제 다시 이 로그인 페이지
파일에다가 채팅을 걸어서...

137
00:11:08,500 --> 00:11:11,880
"add a way to reset password."

138
00:11:12,780 --> 00:11:13,780
한글로 할게요

139
00:11:14,720 --> 00:11:18,640
비밀번호 리셋을 할 수 있는 방법을 추가해 줘

140
00:11:19,800 --> 00:11:20,800
이렇게 하면...

141
00:11:23,540 --> 00:11:24,540
이제...

142
00:11:24,680 --> 00:11:26,840
기존에 있는 라인을 쭉쭉 보고...

143
00:11:28,660 --> 00:11:30,240
여기 밑에 보시면 "아!"

144
00:11:30,420 --> 00:11:31,940
여기다가 리셋을 추가하면 되는구나

145
00:11:32,120 --> 00:11:39,200
그래서 하고 save를 하면 이제 이런 식으로 비밀번호
리셋을 할 수 있는 링크도 넣은 걸 볼 수가 있습니다

146
00:11:39,420 --> 00:11:46,380
이런 식으로 제가 아까 코딩할 때 보셨던 것처럼 저는
이제 프론트엔드 코딩을 할 때 코드 베이스가 크지 않다

147
00:11:46,440 --> 00:11:49,360
그러면은 굉장히 대충 일단 코딩을 좀 하고요

148
00:11:49,880 --> 00:11:56,577
그 다음에 이제 기본적인 스타일링을 넣는다거나,
아니면 내가 빼먹었던 요소들, 뭐 예를 들어서 이렇게...

149
00:11:56,601 --> 00:12:00,900
"비밀번호 확인" 이런 거를 다시 넣어야 된다

150
00:12:00,980 --> 00:12:05,320
할 때 저는 주로 이렇게 AI를 써서 제가
직접 코딩하는 걸 최대한 피하려고 해요

151
00:12:05,380 --> 00:12:12,357
그래야 제가 짧은 시간 안에 그만큼 코드를 더 많이
쓸 수 있기 때문에. 근데 이제 아까 처음에 보신 것처럼...

152
00:12:12,381 --> 00:12:14,400
코드가 완벽하지 않을 때가 있어요

153
00:12:14,580 --> 00:12:21,317
그럴 때는 이제 그 코드를 제가 보고 직접 버그를
고친다거나, 아니면 그냥 조금 더 좋은 모델을 써서...

154
00:12:21,341 --> 00:12:25,295
한 번 더 해본다거나, 아니면 AI한테 "이런
버그가 떴으니까 네가 알아서 네 코드를 고쳐."

155
00:12:25,319 --> 00:12:29,780
라고 한다거나 해서 저는 최대한 AI를 활용하려고 합니다

156
00:12:30,480 --> 00:12:33,400
이번에 보실 거는 Cursor라는 에디터입니다.

157
00:12:33,540 --> 00:12:36,480
Cursor는 VSCode를 Fork해서 만든 에디터고요

158
00:12:36,600 --> 00:12:44,397
여기서 Fork라는 거는 오픈소스 프로젝트의 코드베이스를
그대로 가져와서, 거기다가 내가 추가하고 싶은 기능을 따로 추가해서

159
00:12:44,421 --> 00:12:51,797
새로운 코드베이스를 만드는 걸 Fork라고 하는 거고
그래서 VSCode를 Fork 한 코드베이스인 만큼...

160
00:12:51,821 --> 00:12:54,940
굉장히 비슷한데, 여기서 이제 차이점이 뭔지 한번 볼게요

161
00:12:55,140 --> 00:12:56,557
굉장히 간단한 회원가입폼입니다

162
00:12:56,581 --> 00:13:00,440
이 코드를 그대로 갖고 와서 또 이거를 얘한테
"이쁘게 만들어달라" 고 한번 해볼게요

163
00:13:00,580 --> 00:13:02,840
여기서 쓰는 방법은 되게 비슷하고요

164
00:13:02,880 --> 00:13:05,921
또 Command-K를 눌러서 이번에는...

165
00:13:06,900 --> 00:13:08,160
한글로 한번 해볼까요?

166
00:13:08,320 --> 00:13:15,860
"이거를 지금 보고 있는 이 회원가입 폼을 훨씬 더 이쁘게 만들어 줘."

167
00:13:15,980 --> 00:13:19,860
여기서도 이제 모델을 지금은 GPT-40 모델인데,

168
00:13:20,300 --> 00:13:22,180
여기서도 모델을 바꿀 수 있습니다

169
00:13:22,400 --> 00:13:24,980
일단 이걸 그대로 써볼게요. 동일하게

170
00:13:26,860 --> 00:13:37,140
보시면 얘도 이런 식으로 바꿔주는 걸 볼 수가 있고, 또
Accept를 하고 하면은 얘도 이런 식으로 비슷하게 만들었습니다

171
00:13:37,260 --> 00:13:43,100
이쁘게... 약간 스타일이 다른데 뭐 이거는 저는 상관
없으니까 그대로 하고, 그 다음에 또 아까 시킨 게 뭐였죠?

172
00:13:43,220 --> 00:13:48,220
이제 이 회원가입 버튼을 눌렀을 때 뭔가 제대로 작동하게 바꿔달라고

173
00:13:48,650 --> 00:13:58,360
그러면 이제 회원가입 버튼을 눌렀을 때 API
서비스를 불러서 실제로 회원 정보를 만들어 줘

174
00:13:59,000 --> 00:14:02,980
다만 API 서비스는 아직 없으니까...

175
00:14:04,240 --> 00:14:06,160
그건 마킹해 줘

176
00:14:07,400 --> 00:14:08,680
라고 하면...

177
00:14:11,000 --> 00:14:13,600
네. 얘도 마찬가지로 State를 넣고...

178
00:14:16,420 --> 00:14:17,820
코드를 고쳐서...

179
00:14:18,000 --> 00:14:21,240
이제 이런 식으로 코드를 넣었네요

180
00:14:22,820 --> 00:14:25,421
네. Save를 하면... 버그가 좀 있네요

181
00:14:25,460 --> 00:14:27,000
아까 보셨던 버그는 그대로죠?

182
00:14:27,060 --> 00:14:36,520
그래서 "useClient" 를 넣고 하면은 이제 고쳐졌고
보시면 또 버그가 더 있는데, 이제 type을 안 썼다

183
00:14:36,560 --> 00:14:39,800
지금 이건 TypeScript인데 type을
안 썼으니까 type을 좀 넣어라

184
00:14:39,900 --> 00:14:41,960
그러면 그 부분도 제가 얘보고...

185
00:14:42,940 --> 00:14:49,420
type 몇 개가 빠져 있는데 type이
필요한 데다가 type을 넣어 줘

186
00:14:50,380 --> 00:14:51,820
라고 하면...

187
00:14:52,380 --> 00:14:57,160
알아서 type을 넣고 이제 전혀
문제없이 하는 것을 볼 수 있습니다

188
00:14:57,380 --> 00:15:02,260
또 마찬가지로 비밀번호를 추가해달라고 해볼까요?

189
00:15:02,380 --> 00:15:08,180
그러면 여기서 "비밀번호 확인 폼필드를 추가해 줘."

190
00:15:11,540 --> 00:15:17,660
네. 또 State라는 것을 더 넣었고, 비밀번호 확인을 넣었고요

191
00:15:17,880 --> 00:15:20,357
자, 여기서 이제 코드에 대해서 뭔가를 물어보고 싶다

192
00:15:20,381 --> 00:15:27,820
그러면 여기서 물어보고 싶은 코드를 선택하고
Command-L을 누르면 이런 식으로 채팅창이 뜹니다

193
00:15:27,920 --> 00:15:29,300
자, 그럼 여기서 뭐...

194
00:15:29,880 --> 00:15:33,300
"여기서 필드가 두 개 있는 이유가 뭐야?"

195
00:15:33,920 --> 00:15:34,920
물어보면...

196
00:15:36,560 --> 00:15:40,400
회원가입 폼에서 두 개의 비밀번호
필드를 사용하는 이유는 뭐 이렇습니다

197
00:15:40,640 --> 00:15:41,680
뭐 이런 식으로 나오고요

198
00:15:41,960 --> 00:15:54,400
여기서 그러면 전체를 선택해서 여기서 "로그인 페이지로
가는 링크를 새로 추가해야 할까?"

199
00:15:54,520 --> 00:16:01,060
물어보면 "네, 링크를 추가하는 것은 좋은 생각입니다. 추가하십시오."

200
00:16:01,160 --> 00:16:08,020
뭐 이런 것도 되고요. 이것도 이제 코파일럿에
있는 기능인데 Cursor에서도 이렇게 잘 지원을 한다

201
00:16:09,650 --> 00:16:11,480
그렇다면 이제 아까 했었던 거

202
00:16:11,560 --> 00:16:14,640
"로그인 페이지에 대한 파일을 추가로 넣으려면 어떻게 되나?"

203
00:16:14,820 --> 00:16:20,580
그것도 비슷한데, Command-I를
누르면 이렇게 Composer라는 게 뜹니다

204
00:16:20,660 --> 00:16:26,180
이게 아까 깃허브 코파일럿에서 "Copilot Edit" 이라고
보신 툴이랑 비슷한데요

205
00:16:26,390 --> 00:16:43,200
여기서도 마찬가지로 그냥 "이 회원가입 페이지 코딩 스타일을 따라서 로그인
페이지를 'app/login/page. Tsx' 경로에다가 새로 만들어 줘."

206
00:16:43,930 --> 00:16:50,060
이렇게 하면 되는데 지금 저는 보시면은
"Cursor Pro" 멤버십에 가입이 안 됐어요

207
00:16:50,160 --> 00:16:57,561
왜 가입이 안 됐냐면은 사실 아까 보신 것처럼 코파일럿이랑
Cursor랑 굉장히 기능이 비슷하고 UX도 거의 비슷하고,

208
00:16:57,585 --> 00:17:04,260
심지어 둘 다 모델을 여러 개 지원하는 것까지 비슷하거든요

209
00:17:04,480 --> 00:17:16,577
근데 단 한 가지 이제 Cursor가 코파일럿에 비해서 좋은 점이 하나
있는데 그게 뭐냐면 이 세팅에 갔을 때 모델로 가면은 내가 OpenAI.

210
00:17:16,601 --> 00:17:21,436
API를 사용하고 API 키나 뭐 Anthropic API 키 혹은 다른 서비스
프로바이더의 API 키를 넣어서, 내가 사용한 만큼만 돈을 낼 수가 있어요

211
00:17:21,460 --> 00:17:25,540
프로바이더의 API 키를 넣어서 내가 사용한 만큼만 돈을 낼 수가 있어요

212
00:17:25,660 --> 00:17:34,877
그러니까 이 Cursor 에디터를 제공하는 이 서비스 제공자한테는 돈을
내지 않고, 그냥 내가 OpenAI 모델을 쓸 거면 OpenAI 모델,

213
00:17:34,901 --> 00:17:41,240
그리고 Anthropic API 모델을 쓸 거면
Anthropic 모델의 사용량만 내가 지불하겠다

214
00:17:41,560 --> 00:17:51,640
그래서 보통 내가 코딩을 굉장히 액티브하게
한다 해도 한 뭐 한 50센트 이상 쓰기가 힘들거든요

215
00:17:51,820 --> 00:17:56,662
근데 이제 한 달 멤버십 비용이 뭐 10불,
20불 한다고 치면은, 사실 내가

216
00:17:56,686 --> 00:18:01,360
코딩을 얼마나 하냐에 따라서 이게 훨씬
더 경제적인 방법이 될 수가 있는 거죠

217
00:18:01,540 --> 00:18:06,524
이 두 개의 코딩 에디터를 놓고 봤을 때 저한테
"누가 그러면 너는 뭘 쓸 거냐?" 라고

218
00:18:06,548 --> 00:18:10,760
물어본다면, 저 같은 경우는 그냥
코파일럿 VS Code랑 같이 쓸 것 같아요

219
00:18:10,900 --> 00:18:13,700
크게 두 가지 이유가 있는데 첫 번째 이유로는 신뢰성

220
00:18:13,820 --> 00:18:16,520
아무래도 마이크로소프트가 VS 코드를 만들고 있고

221
00:18:16,960 --> 00:18:25,140
Cursor는 VS 코드를 Fork해서 만든 거기 때문에, 그래도
마이크로소프트가 조금 더 이제 코딩 에디터와 모델의 결합을 좀 더 잘하지 않을까

222
00:18:25,220 --> 00:18:32,100
그리고 혹시나 내 데이터를 이상한 데다 쓰지
않을까 하는 그런 신뢰성의 문제가 하나 있고

223
00:18:32,660 --> 00:18:35,780
이제 두 번째로는 UI UX의 차이가 없다

224
00:18:35,900 --> 00:18:44,340
그러니까 처음에 Cursor가 나왔을 때는 VS Code에서
코파일럿을 사용하는 거랑 UI UX 차이가 좀 많이 났어요

225
00:18:44,420 --> 00:18:46,400
그래서 사람들이 "와 Cursor..."

226
00:18:46,960 --> 00:18:51,280
"AI를 사용할 거면 VS Code에서 코파일럿을
쓰는 것보다 Cursor를 쓰는 게 훨씬 좋다."

227
00:18:51,440 --> 00:19:02,297
이랬었는데 지금은 VS Code가 많이 따라잡아서, 사실 지금 보신 것처럼 뭐
VS Code에서 코파일럿을 쓰든 Cursor에서 이 AI를 쓰든 별로

228
00:19:02,321 --> 00:19:10,777
크게 편의성이 있어서 차이를 못 느끼기 때문에 저 같은 경우는 그냥 그러면
그냥 뭐 VS Code를 쓰는 게 낫지 않을까 하는, 왜냐하면 VS Code가

229
00:19:10,801 --> 00:19:16,700
업데이트 됐을 때 Cursor가 그걸 또 Fork
버전이기 때문에 못 따라올 수가 있기 때문에. 그렇죠?

230
00:19:16,960 --> 00:19:19,980
그래서 저는 그냥 "아, 평소에 쓰던
에디터를 그냥 계속 쓰는 게 낫겠다."

231
00:19:20,100 --> 00:19:21,960
싶은 생각이 드는 거죠

232
00:19:22,120 --> 00:19:26,020
Cursor나 VS Code 말고도 다른
AI 툴들이 더 많이 있어요, 사실은

233
00:19:26,060 --> 00:19:34,577
뭐 코디움에서 나온 것도 있고, 아니면 VS Code에서 익스텐션을 붙여서
쓰는 것도 있고, 아니면 로칼 LLM 모델을 붙여서 쓰는 것도 있는데, 사실

234
00:19:34,601 --> 00:19:39,900
가장 보편적으로 쓸 수 있는 거는 지금에
있어서는 지금 이 Cursor나 코파일럿 정도가 아닌가

235
00:19:40,000 --> 00:19:43,240
그리고 내가 만약에 한 달에 10불 내기 싫다

236
00:19:43,320 --> 00:19:46,337
그래서 그냥 API 내가 쓰는 만큼만 내고 싶다

237
00:19:46,361 --> 00:19:49,900
그런 경우에는 Cursor가 좋은
대체재가 될 수 있다. 아시겠죠?

238
00:19:50,140 --> 00:19:58,080
자, 이렇게 오늘은 AI를 활용해서 코딩하는 걸 조금 같이 맛을
봤는데, 다음 영상에서 또 AI 코딩에 관한 얘기를 더 해보도록 하겠습니다

239
00:19:58,320 --> 00:19:59,420
그럼 다음 영상에서 만나요

