1
00:00:00,206 --> 00:00:03,566
오늘은 n8n에서 DeepSeek v3를 사용하는 방법에 대해 알아보겠습니다.

2
00:00:03,800 --> 00:00:07,740
GPT-4o나 Claude 3.5 Sonnet과 같은 모델을 사용하는 것보다 훨씬 저렴한 비용으로 말이죠.

3
00:00:08,426 --> 00:00:10,072
하지만 그 전에, DeepSeek v3가 무엇인지 간략히 짚고 넘어가겠습니다.

4
00:00:10,308 --> 00:00:12,341
DeepSeek v3는 최근에 출시된 오픈소스 모델입니다.

5
00:00:12,426 --> 00:00:15,046
현존하는 다른 모든 오픈소스 모델들보다 뛰어난 성능을 보이고 있습니다.

6
00:00:15,320 --> 00:00:17,572
또한, 선두적인 클로즈드 소스 모델인

7
00:00:17,999 --> 00:00:19,825
GPT-4o와 비교해도 뒤지지 않는 성능을 자랑합니다.

8
00:00:20,195 --> 00:00:23,766
저는 모델, 미세 조정, 훈련 등에 대한 전문가는 아닙니다.

9
00:00:24,072 --> 00:00:25,842
하지만, 몇 가지 그래픽 자료를 통해 설명해 드리겠습니다.

10
00:00:25,936 --> 00:00:27,842
그리고, 기술 보고서 링크도 설명란에 첨부해 드릴 테니,

11
00:00:27,929 --> 00:00:29,711
직접 확인해 보셔도 좋습니다.

12
00:00:30,371 --> 00:00:32,732
여기 파란색으로 표시된 부분이 DeepSeek입니다.

13
00:00:32,863 --> 00:00:36,760
그리고, Llama, GPT, Claude 3.5와 같은 다른 모델들도 보입니다.

14
00:00:37,087 --> 00:00:40,115
DeepSeek는 이 여섯 가지 지표에서 다른 모든 모델들보다 우수한 성능을 보이고 있습니다.

15
00:00:40,420 --> 00:00:43,088
그렇다면, 제가 왜 이 영상을 제작하게 되었고, 여러분은 왜 이 영상을 클릭하셨을까요?

16
00:00:43,161 --> 00:00:43,960
바로 가격 때문입니다.

17
00:00:44,140 --> 00:00:48,158
여기 녹색으로 표시된 부분을 보면, 백만 토큰당 0.014달러라는 것을 알 수 있습니다.

18
00:00:48,365 --> 00:00:52,787
2달러 정도만 투자해도 정말 오랫동안 사용할 수 있는 양입니다.

19
00:00:53,240 --> 00:00:55,317
앞서 언급했던 기술 보고서에 포함된 또 다른 그래픽을 보여드리겠습니다.

20
00:00:55,437 --> 00:00:57,180
이것은 '건초 더미에서 바늘 찾기' 테스트입니다.

21
00:00:57,440 --> 00:00:59,276
보시다시피, 전체가 녹색으로 표시되어 있습니다.

22
00:00:59,301 --> 00:01:01,680
즉, 모든 항목에서 10점 만점에 10점을 받았다는 의미입니다.

23
00:01:01,946 --> 00:01:06,237
이는 DeepSeek v3가 컨텍스트 길이를 처리하는 데 매우 뛰어나다는 것을 보여줍니다.

24
00:01:06,637 --> 00:01:09,428
모든 내용을 이해하고, 다른 모델들처럼

25
00:01:09,646 --> 00:01:12,501
정보를 놓치는 일이 없다는 것을 의미합니다.

26
00:01:12,820 --> 00:01:15,144
DeepSeek v3의 흥미로운 점은

27
00:01:15,328 --> 00:01:17,384
혼합 전문가 모델(Mixture of Experts)을 사용한다는 것입니다.

28
00:01:17,503 --> 00:01:19,853
모든 매개변수에 대해 하나의 모델을 사용하는 대신,

29
00:01:20,251 --> 00:01:23,656
특정 영역에 대한 전문 지식을 기반으로

30
00:01:24,028 --> 00:01:27,200
하위 모델을 선택적으로 활용하는 방식입니다.

31
00:01:27,458 --> 00:01:31,040
다시 한번 말씀드리지만, 저도 모든 기술적인 내용을 완벽하게 이해하는 것은 아닙니다.

32
00:01:31,240 --> 00:01:33,152
자세한 내용은 기술 보고서를 참고해 주시기 바랍니다.

33
00:01:33,492 --> 00:01:36,855
이것은 제가 DeepSeek v3가 더 낫다고 추천하거나, 사용을 권장하는 것은 아닙니다.

34
00:01:36,929 --> 00:01:40,720
물론, DeepSeek v3와 같은 모델에 데이터를 입력할 때는 신중해야 합니다.

35
00:01:41,040 --> 00:01:44,105
저는 단지 제가 알고 있는 사실과 n8n에 연결하는 방법,

36
00:01:44,456 --> 00:01:47,555
그리고, 직접 사용해 보면서 느낀 점들을 전달해 드리고 싶었을 뿐입니다.

37
00:01:47,882 --> 00:01:49,160
이제 n8n으로 넘어가 보겠습니다.

38
00:01:49,720 --> 00:01:53,522
오늘은 DeepSeek v3를 n8n에 연결하는 두 가지 방법을 소개하겠습니다.

39
00:01:53,739 --> 00:01:56,804
첫 번째는 AI 에이전트의 두뇌, 즉 챗 모델로 연결하는 것입니다.

40
00:01:57,045 --> 00:01:58,171
AI 에이전트의 챗 모델로 사용하는 것입니다.

41
00:01:58,540 --> 00:02:01,462
여기서는 OpenAI 챗 모델에 연결하는 것처럼 보이지만,

42
00:02:01,620 --> 00:02:03,274
자세히 보면 실제로는

43
00:02:03,323 --> 00:02:07,107
OpenRouter의 기본 URL을 사용하여 DeepSeek 챗으로 연결하고 있습니다.

44
00:02:07,320 --> 00:02:08,466
이게 첫 번째 방법입니다.

45
00:02:09,140 --> 00:02:12,167
두 번째 방법은 DeepSeek v3를 독립적인 노드로 사용하는 것입니다.

46
00:02:12,354 --> 00:02:14,294
마치 OpenAI의 메시지 및 모델 노드처럼 말이죠.

47
00:02:14,699 --> 00:02:17,087
여기서는 DeepSeek에 POST 요청을 보내고,

48
00:02:17,358 --> 00:02:20,247
정보를 전달하여 응답을 받는 방식입니다.

49
00:02:20,386 --> 00:02:24,000
이제 이 두 가지 방법을 간략히 시연해 본 후, 실제로 어떻게 설정하는지 설명해 드리겠습니다.

50
00:02:24,360 --> 00:02:25,500
먼저, 이 방법부터 시연해 보겠습니다.

51
00:02:26,360 --> 00:02:29,340
여기 보시는 것처럼, DeepSeek에 POST 요청을 보내고 있습니다.

52
00:02:29,544 --> 00:02:31,604
설정 방법은 잠시 후에 자세히 설명해 드리겠습니다.

53
00:02:31,720 --> 00:02:34,780
여기서는 "다음 주제에 대한 페이스북 게시물을 작성해 줘"라는 요청을 보내고 있습니다.

54
00:02:35,132 --> 00:02:37,280
주제는 동적으로 설정되며,

55
00:02:37,595 --> 00:02:40,646
여기 이 노드에 입력한 값에 따라 결정됩니다.

56
00:02:40,718 --> 00:02:42,832
지금은 "2025년의 건강과 피트니스"로 설정되어 있습니다.

57
00:02:43,200 --> 00:02:44,600
그럼, 한번 실행해 보겠습니다.

58
00:02:45,220 --> 00:02:48,137
DeepSeek에 요청을 보내고, 응답을 기다립니다.

59
00:02:49,147 --> 00:02:55,380
응답은 이모티콘과 해시태그가 포함된 형식의 페이스북 게시물일 것입니다.

60
00:02:55,460 --> 00:02:57,095
보시다시피, "건강과 피트니스, 미래가 여기에 있습니다"라는 제목과 함께

61
00:02:57,295 --> 00:03:01,100
몇 가지 내용이 있고, 마지막에는 동기 부여 메시지로 마무리됩니다.

62
00:03:01,960 --> 00:03:03,344
이 부분이 헷갈리실 수도 있지만,

63
00:03:03,815 --> 00:03:06,586
OpenAI의 메시지 및 모델 노드를 설정하는 것과 정확히 동일한 방식입니다.

64
00:03:06,692 --> 00:03:08,119
아마 여러분은 이미 여러 번 해보셨을 겁니다.

65
00:03:08,940 --> 00:03:12,280
여기 시스템 역할은 이 노드가 무엇을 할지 정의하는 것입니다.

66
00:03:12,620 --> 00:03:13,970
"당신은 도움이 되는 어시스턴트입니다"라고 설정했습니다.

67
00:03:14,083 --> 00:03:18,162
그리고, 사용자 역할은 이 노드에 무엇을 시킬지, 즉 우리가 원하는 작업을 정의합니다.

68
00:03:18,476 --> 00:03:21,728
여기서는 "2025년의 건강과 피트니스에 대한 페이스북 게시물 작성"을 요청하고 있습니다.

69
00:03:22,174 --> 00:03:24,818
이 부분이 헷갈리신다면, 이렇게 생각하시면 됩니다.

70
00:03:24,952 --> 00:03:29,860
OpenAI에서는 일반적으로 여러 메시지를 설정합니다. 시스템 역할과 사용자 역할이 있습니다.

71
00:03:29,960 --> 00:03:32,420
여기서는 "도움이 되는 어시스턴트", "페이스북 게시물 작성"이라고 설정했습니다.

72
00:03:32,680 --> 00:03:35,220
그리고, 이 두 가지는 거의 동일한 방식으로 작동합니다.

73
00:03:35,440 --> 00:03:38,829
차이점을 보여드리기 위해 완료될 때까지 기다리겠습니다.

74
00:03:38,969 --> 00:03:42,064
이 부분은 완료될 때까지 기다려서 차이점을 보여드리겠습니다.

75
00:03:42,506 --> 00:03:44,166
완료되었습니다. 이것은 4o를 사용한 결과입니다.

76
00:03:46,220 --> 00:03:47,629
그리고, 이 결과는

77
00:03:47,927 --> 00:03:51,840
다른 모델을 사용했기 때문에 약간 다르지만, 페이스북 게시물이라는 동일한 목적을 가지고 있습니다.

78
00:03:52,760 --> 00:03:56,387
이제 위쪽 예시를 실행해 보겠습니다.

79
00:03:56,514 --> 00:03:58,677
이 예시는 DeepSeek v3에 연결되어 있습니다.

80
00:03:59,837 --> 00:04:02,660
DeepSeek v3에 연결해서, 동일한 요청을 해보겠습니다.

81
00:04:03,060 --> 00:04:05,785
페이스북 게시물 작성

82
00:04:06,733 --> 00:04:10,212
2025년 건강과 피트니스

83
00:04:10,752 --> 00:04:12,320
그리고...

84
00:04:12,527 --> 00:04:14,431
자격 증명을 연결하지 않았었네요.

85
00:04:14,760 --> 00:04:18,285
이전에는 OpenAI 계정에 연결되어 있었지만, 지금은 DeepSeek 자격 증명을 사용하고 있습니다.

86
00:04:18,363 --> 00:04:20,587
자격 증명 설정 방법은 잠시 후에 설명해 드리겠습니다.

87
00:04:20,820 --> 00:04:22,020
이제 정상적으로 작동할 것입니다.

88
00:04:22,415 --> 00:04:24,520
다시 돌아가서, 요청을 보내 보겠습니다.

89
00:04:26,440 --> 00:04:29,295
여전히 OpenAI 챗 모델처럼 보여서 헷갈릴 수 있지만,

90
00:04:29,358 --> 00:04:33,446
앞서 말씀드렸듯이, OpenRouter에서 API 키를 가져오기만 하면

91
00:04:33,853 --> 00:04:35,329
모든 설정을 완료할 수 있습니다.

92
00:04:35,996 --> 00:04:36,549
네, 됐습니다.

93
00:04:36,696 --> 00:04:38,082
이제 페이스북 게시물이 생성되었습니다.

94
00:04:38,820 --> 00:04:39,892
이전 예시와 매우 유사하게

95
00:04:40,303 --> 00:04:43,300
마지막에 해시태그가 있고, 각 섹션에 이모티콘이 사용되었습니다.

96
00:04:43,463 --> 00:04:44,552
네, 됐습니다.

97
00:04:44,672 --> 00:04:46,880
지금까지 두 가지 사용 사례를 간략히 살펴보았습니다.

98
00:04:48,040 --> 00:04:50,700
이제 DeepSeek를 설정하는 방법을 알아보겠습니다.

99
00:04:50,940 --> 00:04:52,527
먼저, DeepSeek.com에 접속합니다.

100
00:04:52,800 --> 00:04:55,421
이 화면에서 로그인하거나 계정을 생성합니다.

101
00:04:55,660 --> 00:04:57,179
그리고, "Access API"를 클릭합니다.

102
00:04:57,686 --> 00:05:01,115
그러면 API 설정 페이지로 이동합니다.

103
00:05:01,509 --> 00:05:03,851
저는 사용량 페이지로 이동되었습니다. 보시다시피, 저는 2달러를 충전했습니다.

104
00:05:03,944 --> 00:05:05,479
7백만 개 이상의 토큰을 사용할 수 있습니다.

105
00:05:05,640 --> 00:05:08,320
"API keys"를 클릭하고, "create new key"를 클릭합니다.

106
00:05:09,606 --> 00:05:10,640
이름을 "demo"로 지정하겠습니다.

107
00:05:10,718 --> 00:05:13,125
그리고, 생성된 API 키를 복사해서 안전한 곳에 붙여넣으세요.

108
00:05:13,545 --> 00:05:15,411
나중에 다시 볼 수 없기 때문입니다.

109
00:05:15,524 --> 00:05:17,383
물론, 새 키를 다시 생성할 수도 있지만,

110
00:05:17,384 --> 00:05:18,766
안전한 곳에 붙여넣는 것이 가장 좋습니다.

111
00:05:19,680 --> 00:05:22,771
이제 사용 가능한 토큰이 있는지 확인해야 합니다. 2달러 정도 충전하세요.

112
00:05:23,020 --> 00:05:25,520
그리고, 왼쪽 하단의 "docs"를 클릭합니다.

113
00:05:25,960 --> 00:05:28,758
그러면 API 문서 페이지로 이동합니다.

114
00:05:29,480 --> 00:05:31,862
아래로 스크롤하면 curl 예시가 있습니다.

115
00:05:32,281 --> 00:05:33,363
이 curl을 복사합니다.

116
00:05:33,728 --> 00:05:35,960
이제 n8n으로 돌아가서 붙여넣기만 하면 됩니다.

117
00:05:36,240 --> 00:05:38,829
현재 n8n에는 DeepSeek 통합 기능이 없습니다.

118
00:05:39,229 --> 00:05:41,220
따라서, HTTP 요청 노드를 사용해야 합니다.

119
00:05:42,460 --> 00:05:45,520
"import curl"을 클릭하고, 방금 복사한 curl을 붙여넣습니다.

120
00:05:46,240 --> 00:05:48,406
그러면 POST 요청으로 자동 변경됩니다.

121
00:05:48,500 --> 00:05:49,805
올바른 엔드포인트가 입력되었고,

122
00:05:50,170 --> 00:05:52,516
인증 정보가 포함된 헤더도 자동으로 입력되었습니다.

123
00:05:52,896 --> 00:05:55,520
그리고, JSON 데이터도 이미 채워져 있습니다. 매우 간편합니다.

124
00:05:55,980 --> 00:05:58,440
이제, 앞서 복사해 둔 API 키를 가져와야 합니다.

125
00:05:58,840 --> 00:06:00,286
그리고, 이 부분을 삭제합니다.

126
00:06:00,393 --> 00:06:02,880
"Bearer" 다음에 공백을 하나 넣고, API 키를 붙여넣습니다.

127
00:06:03,120 --> 00:06:07,140
그리고, 앞뒤에 불필요한 공백이 없도록 주의해야 합니다.

128
00:06:07,540 --> 00:06:08,313
이제 정상적으로 작동할 것입니다.

129
00:06:08,426 --> 00:06:12,680
현재 "도움이 되는 어시스턴트에게 hello"라는 프롬프트를 보내고 있습니다.

130
00:06:12,940 --> 00:06:14,838
"test step"을 클릭하여 모든 것이 정상적으로 작동하는지 확인해 보겠습니다.

131
00:06:15,320 --> 00:06:18,243
"안녕하세요, 오늘 무엇을 도와드릴까요?"라는 응답을 받았습니다.

132
00:06:18,480 --> 00:06:20,800
"hello"라는 메시지에 대한 응답입니다.

133
00:06:21,580 --> 00:06:22,331
설정은 거의 다 끝났습니다.

134
00:06:22,646 --> 00:06:25,609
이제 이 DeepSeek 노드에

135
00:06:26,537 --> 00:06:29,662
다른 프롬프트를 설정하여, 더 구체적인 작업을 수행하도록 만들 수 있습니다.

136
00:06:29,855 --> 00:06:33,955
그리고, 응답을 원하는 정보를 동적으로 제공할 수 있습니다.

137
00:06:34,782 --> 00:06:36,089
이제 챗 모델을 설정해 보겠습니다.

138
00:06:36,255 --> 00:06:37,480
이 노드는 삭제하겠습니다.

139
00:06:37,720 --> 00:06:39,698
OpenAI 챗 모델 노드를 추가하겠습니다.

140
00:06:39,798 --> 00:06:42,155
이것은 기본적으로 열리는 방식입니다.

141
00:06:43,040 --> 00:06:44,363
새 자격 증명을 생성해야 합니다.

142
00:06:44,443 --> 00:06:46,836
하지만 그 전에, OpenRouter에서 모든 것을 설정해야 합니다.

143
00:06:47,242 --> 00:06:48,336
"add option"을 클릭합니다.

144
00:06:48,529 --> 00:06:49,716
"base URL"을 추가합니다.

145
00:06:50,401 --> 00:06:55,260
기본적으로는 OpenAI를 가리키고 있지만, 이것은 우리가 가져오려는 모델이기 때문입니다.

146
00:06:55,709 --> 00:06:57,055
이제 OpenRouter로 이동합니다.

147
00:06:57,240 --> 00:06:58,240
계정을 생성합니다.

148
00:06:58,400 --> 00:07:02,400
그리고, DeepSeek v3를 찾습니다.

149
00:07:03,880 --> 00:07:05,893
여기서 "API"를 클릭합니다.

150
00:07:06,420 --> 00:07:09,860
DeepSeek를 가져오기 위해 가리킬 기본 URL을 찾아야 합니다.

151
00:07:10,020 --> 00:07:11,860
여기 이 부분을 복사합니다.

152
00:07:11,960 --> 00:07:14,580
따옴표 안의 기본 URL을 복사합니다.

153
00:07:14,880 --> 00:07:15,560
다시 n8n으로 돌아갑니다.

154
00:07:15,900 --> 00:07:17,280
여기에 붙여넣습니다. 이제

155
00:07:18,120 --> 00:07:19,418
OpenRouter의 기본 URL에 접근하고 있습니다.

156
00:07:20,284 --> 00:07:21,960
그리고, 위쪽에서 GPT-4o mini 대신,

157
00:07:22,256 --> 00:07:27,827
또는 사용 중인 다른 모델 대신, "expression"을 선택합니다. 기존 모델명을 지웁니다.

158
00:07:28,620 --> 00:07:29,465
다시 OpenRouter로 돌아갑니다.

159
00:07:29,760 --> 00:07:30,880
DeepSeek v3 페이지인지 확인합니다.

160
00:07:31,700 --> 00:07:33,320
여기 이 부분을 복사합니다.

161
00:07:33,660 --> 00:07:37,880
모델명을 복사합니다. DeepSeek/deepseek-chat

162
00:07:38,300 --> 00:07:39,305
그리고, 여기에 붙여넣습니다.

163
00:07:39,511 --> 00:07:45,180
이제 OpenRouter URL을 통해 DeepSeek의 이 모델에 접근하고 있습니다.

164
00:07:45,560 --> 00:07:46,760
이제,

165
00:07:47,136 --> 00:07:48,913
나가기 전에, 새 자격 증명을 생성해야 합니다.

166
00:07:48,986 --> 00:07:51,440
보시다시피, 저는 DeepSeek 자격 증명을 가지고 있습니다. 새 자격 증명을 생성해 보겠습니다.

167
00:07:51,760 --> 00:07:54,480
하지만, 먼저 API 키를 생성해야 합니다.

168
00:07:54,706 --> 00:07:56,066
이미 이 페이지에 있습니다.

169
00:07:56,180 --> 00:07:57,660
"create API key"를 클릭합니다.

170
00:07:57,980 --> 00:07:59,060
"create a key"를 클릭합니다.

171
00:08:00,240 --> 00:08:01,280
원하는 이름으로 지정합니다.

172
00:08:02,440 --> 00:08:03,980
그리고, 앞서와 마찬가지로

173
00:08:04,360 --> 00:08:05,860
이 키를 안전한 곳에 복사해 둡니다.

174
00:08:06,620 --> 00:08:08,760
그리고, n8n으로 돌아갑니다.

175
00:08:09,060 --> 00:08:10,100
"create new credential"을 클릭합니다.

176
00:08:10,300 --> 00:08:12,100
그리고, 여기에 API 키를 붙여넣습니다.

177
00:08:12,600 --> 00:08:13,821
그런 다음, "save"를 클릭합니다.

178
00:08:14,379 --> 00:08:18,708
오른쪽 하단에 "현재 여러분에게 비공개입니다"라는 녹색 메시지가 뜹니다.

179
00:08:18,901 --> 00:08:20,187
그리고, 여기는 빨간색으로 변합니다.

180
00:08:20,300 --> 00:08:21,749
왜 그런지 정확히는 모르겠지만,

181
00:08:22,194 --> 00:08:24,574
아래쪽에 녹색 메시지가 뜨면 연결된 것입니다.

182
00:08:25,080 --> 00:08:27,297
버그일 수도 있지만, 어쨌든 연결은 완료되었습니다.

183
00:08:27,444 --> 00:08:30,920
OpenRouter에서 생성한 API 키가 여기에 설정되었습니다.

184
00:08:31,220 --> 00:08:32,915
사용하려는 DeepSeek 모델을 선택했고,

185
00:08:32,980 --> 00:08:37,940
OpenRouter가 이 모델에 접근할 수 있도록 설정했습니다.

186
00:08:38,480 --> 00:08:40,258
이제 정상적으로 작동하는지 테스트해 보겠습니다.

187
00:08:40,631 --> 00:08:46,863
채팅을 열고, 다시 한번 테스트해 보겠습니다.
이번에는 "건강과 피트니스" 대신 "스포츠"로

188
00:08:47,214 --> 00:08:48,200
설정해 보겠습니다.

189
00:08:48,780 --> 00:08:52,380
보시다시피, 현재 DeepSeek 모델에 요청을 보내고 있습니다.

190
00:08:52,500 --> 00:08:53,820
OpenAI처럼 보이지만 말이죠.

191
00:08:53,856 --> 00:08:57,800
그리고, 정상적으로 작동한다는 것을 알 수 있습니다. 설정이 잘못되었다면 이미 실패했을 테니까요.

192
00:08:58,040 --> 00:08:59,720
앞서 보셨듯이, 설정이 잘못되면 매우 빠르게 실패합니다.

193
00:09:00,180 --> 00:09:01,460
네, 응답이 도착했습니다.

194
00:09:01,920 --> 00:09:04,480
"혁신과 열정이 만나는 2025년의 스포츠"라는 제목과 함께,

195
00:09:04,680 --> 00:09:06,420
이모티콘과 내용이 보입니다.

196
00:09:06,520 --> 00:09:09,940
그리고, 여기에는 전혀 프롬프트 엔지니어링을 하지 않았지만, 마지막에 해시태그로 마무리됩니다.

197
00:09:10,140 --> 00:09:12,528
하지만, 말씀드렸듯이, 여기에는 어떠한 프롬프트 엔지니어링도 적용되지 않았습니다.

198
00:09:12,855 --> 00:09:16,152
이것은 제가 입력한 채팅 내용이고, 그에 대한 결과입니다.

199
00:09:16,639 --> 00:09:18,176
이번 영상은 여기서 마무리하겠습니다.

200
00:09:18,309 --> 00:09:21,684
그렇게 복잡한 내용은 아니었지만, 여러분들이 직접 사용해 볼 수 있도록

201
00:09:21,863 --> 00:09:23,456
이러한 기능들을 어떻게 활용할 수 있는지 보여드리고 싶었습니다.

202
00:09:23,589 --> 00:09:26,917
저는 앞으로 DeepSeek 모델을 사용해서

203
00:09:27,157 --> 00:09:30,647
좀 더 복잡한 에이전트를 만들어보고,

204
00:09:30,996 --> 00:09:32,842
다양한 도구들을 사용했을 때 어떻게 반응하는지 살펴볼 계획입니다.

205
00:09:33,482 --> 00:09:37,868
DeepSeek에 2 크레딧, OpenRouter에 5 크레딧을 사용해 보세요.

206
00:09:37,981 --> 00:09:40,215
OpenRouter에서는 다양한 모델을 사용할 수 있습니다.

207
00:09:40,400 --> 00:09:43,801
이 정도 크레딧이면 충분히 오랫동안 사용할 수 있을 것입니다. 이번 영상이 도움이 되셨다면, 좋아요를 눌러주세요. 정말 큰 힘이 됩니다.

208
00:09:43,888 --> 00:09:45,456
영상이 도움 되었다면, 좋아요를 꼭 눌러주세요. 정말 큰 힘이 됩니다.

209
00:09:45,865 --> 00:09:46,511
다시 돌아오게 되어 기쁩니다.

210
00:09:46,691 --> 00:09:48,420
여러분 모두 새해 복 많이 받으셨기를 바랍니다.

211
00:09:48,728 --> 00:09:51,887
제 채널과 AI 분야 등 모든 면에서 2025년이 어떤 한 해가 될지 정말 기대됩니다.

212
00:09:52,004 --> 00:09:53,458
AI 분야를 포함해서, 모든 것들에 있어서, 2025년이 어떤 모습일지 정말 기대됩니다.

213
00:09:53,812 --> 00:09:56,695
앞으로 몇 주, 몇 달, 그리고, 내년에 어떤 영상들을 보고 싶으신지 댓글로 남겨주세요.

214
00:09:56,888 --> 00:09:59,766
앞으로 몇 주, 몇 달, 그리고 내년에 어떤 영상들을 보고 싶으신지 댓글로 남겨주세요.

215
00:09:59,913 --> 00:10:01,920
끝까지 시청해 주셔서 감사합니다.

