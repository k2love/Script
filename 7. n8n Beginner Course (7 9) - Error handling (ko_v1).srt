1
00:00:01,150 --> 00:00:06,000
안녕하세요! n8n 초급 강좌
7번째 비디오에 오신 걸 환영합니다.

2
00:00:06,730 --> 00:00:13,060
이번 비디오에서는 워크플로우의
과거 실행이 어떻게 저장되는지,

3
00:00:13,810 --> 00:00:20,060
특히 워크플로우 오류를 처리하는 방법을
다룰 거예요. 이건 아주 중요한 기술입니다.

4
00:00:21,460 --> 00:00:27,520
먼저 n8n에서 실행이 어떻게
저장되는지에 대해 이야기해 봅시다.

5
00:00:27,521 --> 00:00:31,884
지금까지 우리가 작업한 대부분의 실행은

6
00:00:31,885 --> 00:00:36,121
수동 실행이었습니다.

7
00:00:36,420 --> 00:00:42,520
지난 비디오들에서는 '워크플로우
실행' 또는 '단계 테스트'를 클릭했었죠.

8
00:00:42,800 --> 00:00:49,060
하지만 전에 언급했듯이, 워크플로우를
활성화하면 자동화가 시작되고,

9
00:00:49,061 --> 00:00:54,680
워크플로우는 우리가 실행을 보지
않고도 백그라운드에서 실행될 겁니다.

10
00:00:54,681 --> 00:00:59,580
우리가 굳이 워크플로우 실행을 직접
보지 않아도 백그라운드에서 실행될 거예요.

11
00:01:00,720 --> 00:01:10,360
우리는 '실행 로그'라고 부르는 곳에서 모든
워크플로우 실행 기록에 접근할 수 있어요.

12
00:01:10,361 --> 00:01:15,420
'모든 실행'을 클릭해서 '실행
로그'에 접근할 수 있습니다.

13
00:01:16,270 --> 00:01:21,915
기본적으로 성공한 실행과 실패한 프로덕션 실행,

14
00:01:21,916 --> 00:01:27,240
즉, 워크플로우가 활성화된 실행은 저장됩니다.

15
00:01:27,520 --> 00:01:30,420
그리고 수동 실행은 저장되지 않아요.

16
00:01:31,080 --> 00:01:40,641
하지만 워크플로우별로 수동 실행의
로그 기록을 활성화할 수 있습니다.

17
00:01:41,520 --> 00:01:45,220
워크플로우 상태, 날짜 범위, 또는

18
00:01:45,221 --> 00:01:49,961
실행 데이터로 실행 로그를 정렬할 수 있습니다.

19
00:01:50,020 --> 00:01:56,060
로그에 실행 데이터를 저장하는
방법은 고급 과정에서 다룰 거예요.

20
00:01:58,060 --> 00:02:05,800
실행 로그에서 개별 실행 기록에 접근할 수 있습니다.

21
00:02:06,140 --> 00:02:09,780
여기 실행 기록의 예시를 볼 수 있습니다.

22
00:02:10,080 --> 00:02:13,940
스케줄 트리거가 활성화된 것을 볼 수 있죠.

23
00:02:14,180 --> 00:02:17,576
우리는 시트에서 데이터를 읽고, 이메일 존재 여부에 따라,

24
00:02:17,676 --> 00:02:21,040
영업팀이나 마케팅팀에 메시지를 보냈습니다.

25
00:02:21,980 --> 00:02:28,200
이것들은 과거 실행이므로
변경할 수 없는 정적인 상태입니다.

26
00:02:28,760 --> 00:02:32,593
이건 해당 실행의 모든 노드의 최종 상태에 대한

27
00:02:32,594 --> 00:02:36,701
스냅샷이라고 할 수 있습니다.

28
00:02:37,280 --> 00:02:43,500
이것은 워크플로우를 디버깅하거나
수정하거나 검사할 때 매우 유용합니다.

29
00:02:43,760 --> 00:02:50,520
과거 실행을 살펴봄으로써 워크플로우가
어떻게 작동하는지 이해할 수 있습니다.

30
00:02:52,300 --> 00:02:58,340
각 노드를 더블클릭해서 입력 및 출력 데이터와

31
00:02:58,341 --> 00:03:01,180
모든 노드 설정을 볼 수 있습니다.

32
00:03:01,640 --> 00:03:05,475
그리고 노드에 오류가 있다면,

33
00:03:05,476 --> 00:03:12,240
노드를 더블클릭해서 해당 오류에
대한 자세한 내용을 볼 수 있습니다.

34
00:03:13,960 --> 00:03:18,640
앞서 언급했듯이, 때로는 실행이 실패할 수도 있습니다.

35
00:03:18,800 --> 00:03:23,060
워크플로우를 활성화하거나 프로덕션에 푸시할 수 있습니다.

36
00:03:23,460 --> 00:03:28,118
때로는 설정이 최적이 아니거나,

37
00:03:28,119 --> 00:03:31,160
입력 데이터가 잘못된 형식일 수도 있습니다.

38
00:03:31,360 --> 00:03:34,100
그리고 이게 워크플로우 실패의 원인이 될 수 있어요.

39
00:03:34,380 --> 00:03:38,260
워크플로우가 실패하는 데는
여러 가지 이유가 있을 수 있습니다.

40
00:03:38,500 --> 00:03:41,474
어떤 종류의 오류가 있는지,

41
00:03:41,475 --> 00:03:44,760
그리고 특히 어떻게 해결해야
하는지 이해하는 것이 중요합니다.

42
00:03:46,200 --> 00:03:49,763
오류를 처리하는 첫 번째 방법은, 아주 중요한 방법인데,

43
00:03:49,863 --> 00:03:53,660
오류 워크플로우를 사용하는 겁니다.

44
00:03:55,600 --> 00:04:01,680
오류 워크플로우는 노드에 오류가
발생하자마자 실행되는 워크플로우입니다.

45
00:04:02,410 --> 00:04:09,000
이 워크플로우를 사용하면 오류가 있는
워크플로우에 대한 보고서를 작성할 수 있습니다.

46
00:04:09,670 --> 00:04:14,255
워크플로우가 실패해서 디버그하거나

47
00:04:14,256 --> 00:04:18,900
수정해야 할 때 알려주는 역할을 하죠.

48
00:04:19,440 --> 00:04:23,640
이 워크플로우는 모든 새
워크플로우에 대해 설정해야 합니다.

49
00:04:25,600 --> 00:04:28,480
워크플로우를 만들고 있다면,
오류 워크플로우를 꼭 설정하세요.

50
00:04:29,180 --> 00:04:33,780
n8n 인스턴스에서 하나 또는 여러
개의 오류 워크플로우를 가질 수 있습니다.

51
00:04:35,800 --> 00:04:37,720
여기 예시가 있습니다.

52
00:04:38,140 --> 00:04:41,580
이 워크플로우는 매일 오전 8시에 시작됩니다.

53
00:04:41,860 --> 00:04:48,020
구글 시트에서 연락처를 읽고 CRM,
여기서는 세일즈포스(Salesforce)를

54
00:04:48,420 --> 00:04:49,860
해당 연락처로 업데이트합니다.

55
00:04:50,980 --> 00:04:54,480
세일즈포스에서는 이메일 필드가 필수입니다.

56
00:04:55,600 --> 00:04:59,693
그래서 이메일이 없는 아이템에 대한

57
00:04:59,694 --> 00:05:03,281
연락처를 만들려고 할 때 오류가 발생합니다.

58
00:05:03,660 --> 00:05:10,060
이것은 오류가 발생한 노드, 이 경우에는 세일즈포스
노드에 대한 정보를 포함하는 오류 워크플로우를 트리거합니다.

59
00:05:10,200 --> 00:05:12,440
이 경우에는 세일즈포스 노드입니다.

60
00:05:13,180 --> 00:05:19,280
시트에서 읽은 10개의 아이템 중 일부는 이메일이 없어서,

61
00:05:19,281 --> 00:05:24,840
세일즈포스 노드에 오류가 발생하게 됩니다.

62
00:05:26,380 --> 00:05:32,180
오류 워크플로우를 트리거하는 또 다른
방법은 '중지 및 오류' 노드를 사용하는 겁니다.

63
00:05:32,580 --> 00:05:41,220
이 노드는 트리거될 때마다, 실행될
때마다 오류 메시지를 발생시킵니다.

64
00:05:41,460 --> 00:05:42,880
실행될 때마다요.

65
00:05:43,180 --> 00:05:46,580
그리고 해당 오류 메시지를 설정할 수 있습니다.

66
00:05:47,400 --> 00:05:50,740
트리거되면 여러 가지 옵션을 사용할 수 있습니다.

67
00:05:50,880 --> 00:05:57,361
기본적으로 전체 워크플로우가
중지되고 상태가 '실패'로 설정됩니다.

68
00:05:57,560 --> 00:05:59,620
하지만 살펴보겠습니다.

69
00:06:00,260 --> 00:06:04,900
n8n에서 '중지 및 오류' 노드의
동작을 선택할 수 있습니다.

70
00:06:06,040 --> 00:06:11,460
특정 조건이 충족되지 않아야 할 때 오류를 발생시켜
워크플로우에서 엣지 케이스를 관리할 수 있습니다.

71
00:06:11,461 --> 00:06:14,540
특정 조건이 충족되어서는 안 될 때 오류를 발생시켜
워크플로우에서 엣지 케이스를 관리할 수 있습니다.

72
00:06:15,260 --> 00:06:24,040
이 워크플로우는 웹훅의 이메일 데이터가
유효하지 않을 때 오류를 발생시킵니다.

73
00:06:24,240 --> 00:06:30,880
여기서 웹훅에 유효한 이메일이
있는지 확인하고, 유효하지 않다면

74
00:06:31,000 --> 00:06:32,360
중지하고 오류를 발생시키죠.

75
00:06:36,540 --> 00:06:40,132
오류 워크플로우는 '오류'

76
00:06:40,133 --> 00:06:43,260
트리거 노드를 사용해서 만들어집니다.

77
00:06:43,480 --> 00:06:50,040
이 노드는 워크플로우와 관련된 모든 정보를 출력합니다.

78
00:06:50,180 --> 00:06:56,500
그래서 이름과 워크플로우 ID, 실행 ID뿐만
아니라 오류가 있는 특정 실행을 찾을 수 있는 링크,

79
00:06:56,501 --> 00:07:00,631
오류가 발생한 노드에 대한 정보도 포함합니다.

80
00:07:00,632 --> 00:07:04,960
오류가 있는 노드에 대한 정보를 담고 있습니다.

81
00:07:05,100 --> 00:07:08,660
특정 노드나 '중지 및 오류' 노드 모두 해당됩니다.

82
00:07:10,320 --> 00:07:16,720
n8n에 접근할 수 있는 팀원들이
워크플로우에 오류가 발생했다는 것을 확인하고,

83
00:07:16,940 --> 00:07:22,360
슬랙, 왓츠앱, 팀즈 또는 다른 의사소통 도구와 같은
장소, 보통 채널에 오류를 보고하는 것을 권장합니다.

84
00:07:22,620 --> 00:07:30,060
n8n에 접근할 수 있는 팀원들이
워크플로우에 오류가 발생했다는 것을 확인하고,

85
00:07:30,061 --> 00:07:33,320
워크플로우를 디버그하고 수정하기
위해 빠르게 개입할 수 있도록 하는 것이죠.

86
00:07:33,580 --> 00:07:40,660
여기 오류 워크플로우의 예시가
있습니다. 오류 트리거가 슬랙 메시지,

87
00:07:40,661 --> 00:07:45,080
이메일 또는 텔레그램을 보내도록 되어
있네요. 셋 다 필요하지는 않을 거예요.

88
00:07:45,180 --> 00:07:51,500
하지만 워크플로우의 오류를
보고할 수 있는 장소는 필요할 겁니다.

89
00:07:51,600 --> 00:08:02,740
자, 다시 돌아가서,

90
00:08:03,180 --> 00:08:20,960
자, 다시 n8n으로 돌아가서.

91
00:08:28,060 --> 00:08:35,240
이 예시에서는 오류에 대한 정보를 담은 슬랙 메시지를
포함하는 아주 간단한 오류 워크플로우를 만들어 볼게요.

92
00:08:35,241 --> 00:08:39,408
오류에 대한 정보를 슬랙 메시지로 보내서,

93
00:08:39,409 --> 00:08:43,540
누군가 빠르게 문제를 해결하고 디버그할 수 있도록요.

94
00:08:44,240 --> 00:08:47,400
여기서 테스트 이벤트에 오류 트리거가 있습니다.

95
00:08:47,401 --> 00:08:52,547
여기서 평소처럼 슬랙 노드를 추가해서

96
00:08:52,548 --> 00:09:00,060
사용자 Maxim에게 메시지를
보내도록 설정할 수 있습니다.

97
00:09:03,580 --> 00:09:10,640
여기서 테스트를 위해 '오류'라고 적고,

98
00:09:11,700 --> 00:09:13,800
몇 가지 정보를 포함해 보겠습니다.

99
00:09:14,480 --> 00:09:21,380
워크플로우, 콜론, 이름.

100
00:09:22,120 --> 00:09:30,380
실행 URL도 포함할 거예요.

101
00:09:34,080 --> 00:09:37,060
그리고 오류 메시지도 포함할게요.

102
00:09:39,220 --> 00:09:40,220
오류 메시지요.

103
00:09:41,820 --> 00:09:46,260
이렇게 하면, 오류가 발생하고
오류 워크플로우가 실행될 때마다,

104
00:09:46,261 --> 00:09:50,260
어떤 워크플로우에 오류가 발생했는지 즉시 알 수 있습니다.

105
00:09:51,300 --> 00:09:56,160
그리고 특정 실행에 접근할 수 있는 빠른 링크가 있습니다.

106
00:09:56,360 --> 00:09:59,880
그래서 n8n에 들어가서 오류가 무엇인지 볼 수 있죠.

107
00:10:00,200 --> 00:10:05,840
그리고 문제점을 더 잘 이해할
수 있도록 오류 메시지도 있습니다.

108
00:10:06,100 --> 00:10:09,520
여기서 이 단계를 테스트하고 메시지를 받습니다.

109
00:10:09,820 --> 00:10:13,899
테스트가 완료되면 사용자에게 보내는 대신,

110
00:10:13,900 --> 00:10:17,561
채널로 보내도록 변경할 수 있습니다.

111
00:10:17,720 --> 00:10:22,800
여기 n8n 오류 채널이 있습니다.

112
00:10:26,670 --> 00:10:29,590
n8n 오류 채널이요.

113
00:10:29,850 --> 00:10:31,490
다시 이 단계를 테스트할 수 있습니다.

114
00:10:31,690 --> 00:10:36,570
이제부터 워크플로우 중 하나에 오류가
발생하고 오류 워크플로우가 실행될 때마다,

115
00:10:36,571 --> 00:10:40,878
n8n 오류 채널에서 해당 실행에 대한
정보를 담은 메시지를 받을 수 있습니다.

116
00:10:40,879 --> 00:10:44,070
n8n 오류 채널에서 해당 실행에
대한 정보를 담은 메시지를 받게 됩니다.

117
00:10:44,770 --> 00:10:49,910
고급 과정에서는 좀 더 복잡한 오류 워크플로우,

118
00:10:50,070 --> 00:10:55,150
특히 사람들을 태그하거나, 소유자를
태그하는 것과 관련된 내용을 다룰 것입니다.

119
00:10:55,670 --> 00:10:59,910
그래서 오류 실행을 봐야 할
사람들에게 알려줄 수 있도록요.

120
00:11:03,570 --> 00:11:09,730
이제 이전 비디오의 워크플로우로
돌아가서 약간 정리해 보겠습니다.

121
00:11:09,830 --> 00:11:15,710
if 노드 두 개 대신 switch를
넣고 노드 이름을 바꿨습니다.

122
00:11:15,830 --> 00:11:16,990
그래서 좀 더 명확하게 보이죠.

123
00:11:17,910 --> 00:11:21,354
여기 웹훅 입력 데이터가 있는데,

124
00:11:21,355 --> 00:11:25,291
이벤트 유형과 연락처 정보가 있죠.

125
00:11:25,590 --> 00:11:30,950
그리고 이벤트가 계정 생성됨인지 팀원 초대됨인지에 따라,

126
00:11:31,290 --> 00:11:33,650
다른 메시지를 보내려고 합니다.

127
00:11:34,650 --> 00:11:38,790
여기서 잠재적인 오류를 처리하고 싶을 수도 있습니다.

128
00:11:39,070 --> 00:11:43,390
제가 생각할 수 있는 두 가지
주요 잠재적 오류가 있습니다.

129
00:11:44,210 --> 00:11:46,390
첫 번째는 이메일을 확인하는 것입니다.

130
00:11:46,391 --> 00:11:51,650
그리고 두 번째는 어떤 종류의 이벤트를
처리하고 있는지 확인하는 것입니다.

131
00:11:51,930 --> 00:11:56,470
여기서 사용할 수 있는 두
가지 오류 처리 방법이 있습니다.

132
00:11:56,690 --> 00:12:00,830
첫 번째는 이메일이 유효한지 확인하는 것입니다.

133
00:12:01,010 --> 00:12:06,437
여기서 기본적인 검사를 해서,

134
00:12:06,438 --> 00:12:10,410
이메일에 '@' 기호가 포함되어
있는지 확인할 수 있습니다.

135
00:12:10,550 --> 00:12:15,210
이게 아마도 유효한 이메일을
확인하는 가장 간단한 방법일 겁니다.

136
00:12:16,390 --> 00:12:21,974
더 복잡한 방법은 정규 표현식을 사용해서

137
00:12:21,975 --> 00:12:25,810
이메일이 특정 이메일 형식과 일치하는지 확인하는 것입니다.

138
00:12:26,110 --> 00:12:33,430
지금은 이메일에 '@' 기호가
포함되어 있는지 확인해 봅시다.

139
00:12:33,970 --> 00:12:36,950
예를 들어, 이게 유효한 이메일일 것입니다.

140
00:12:37,550 --> 00:12:41,070
이메일이 유효하면 워크플로우를 계속 진행할 수 있습니다.

141
00:12:41,330 --> 00:12:45,950
그리고 이메일이 유효하지 않으면
'중지 및 오류' 노드를 추가할 수 있습니다.

142
00:12:46,390 --> 00:12:50,662
여기서 오류 메시지나 오류 객체를

143
00:12:50,663 --> 00:12:56,210
'유효하지 않은 이메일'이라고
간단하게 언급할 수 있습니다.

144
00:12:59,470 --> 00:13:06,430
여기 이벤트 유형에 대한 스위치가 있습니다.

145
00:13:06,610 --> 00:13:10,510
유효한 이벤트가 없을 수도 있다고 생각할 수도 있습니다.

146
00:13:10,670 --> 00:13:15,010
그래서 여기서 스위치에 새로운 규칙을 추가할 수 있습니다.

147
00:13:15,011 --> 00:13:25,750
이건 이벤트가 존재하지 않는 경우입니다.

148
00:13:26,230 --> 00:13:32,504
또는 이전처럼 표현식에서 이벤트가

149
00:13:32,505 --> 00:13:38,550
빈 문자열과 같은 경우일 수 있습니다.

150
00:13:38,990 --> 00:13:47,010
이러한 두 출력 모두를 '중지 및
오류' 노드로 드래그할 수 있습니다.

151
00:13:47,810 --> 00:13:57,270
이번에는 '유효하지 않은 이메일' 대신
'유효하지 않은 이벤트'라고 할 수 있습니다.

152
00:13:58,610 --> 00:14:04,570
이제 이 워크플로우가 활성화되면 유효하지 않은 이메일과

153
00:14:04,571 --> 00:14:07,990
유효하지 않은 이벤트의 경우를 모두 처리할 겁니다.

154
00:14:08,290 --> 00:14:14,770
만약 웹훅에 오류가 있다면, 오류
워크플로우가 트리거될 것입니다.

155
00:14:14,970 --> 00:14:16,410
그리고 무엇이 문제였는지 확인할 수 있죠.

156
00:14:16,690 --> 00:14:18,150
왜 이메일이 없었는지.

157
00:14:18,370 --> 00:14:20,310
또는 왜 유효하지 않은 이벤트가 있었는지 말이죠.

158
00:14:21,710 --> 00:14:25,950
'중지 및 오류' 워크플로우에서
한 가지 더 언급할 사항이 있습니다.

159
00:14:26,130 --> 00:14:29,461
설정으로 이동하면

160
00:14:29,462 --> 00:14:32,870
오류 시 원하는 동작을 선택할 수 있습니다.

161
00:14:33,490 --> 00:14:37,770
슬라이드에서 언급했듯이 기본적으로 워크플로우가 중지됩니다.

162
00:14:38,050 --> 00:14:43,890
하지만 워크플로우 진행을 방해하지
않는 엣지 케이스를 처리하는 경우라면,

163
00:14:43,891 --> 00:14:48,310
계속 진행하거나 오류 출력을
사용하여 계속 진행할 수 있습니다.

164
00:14:48,850 --> 00:14:53,036
이것은 '중지 및 오류' 워크플로우와

165
00:14:53,037 --> 00:14:58,950
일반 노드 모두 노드별로 구성할 수 있습니다.

166
00:14:59,570 --> 00:15:04,690
n8n 초급 강좌 7번째 비디오를
시청해 주셔서 감사합니다.

167
00:15:04,691 --> 00:15:10,410
여기서는 실행 기록, 오류 처리, 그리고 아주
기본적인 오류 워크플로우에 대해 알아봤습니다.

168
00:15:10,411 --> 00:15:15,188
다음 비디오에서는 오류가 재발생하지 않도록

169
00:15:15,189 --> 00:15:20,310
워크플로우를 디버그하는 방법과
재시도 방법에 대해 다룰 것입니다.

170
00:15:20,450 --> 00:15:21,630
그럼 다음 비디오에서 만나요!

