1
00:00:01,290 --> 00:00:07,351
안녕하세요! n8n 초급 강좌의 마지막
비디오, 8번째 비디오에 오신 것을 환영합니다!

2
00:00:07,550 --> 00:00:11,130
이번 비디오에서는 워크플로우를
디버깅하는 방법에 대해 다룰 겁니다.

3
00:00:12,030 --> 00:00:17,770
이전 비디오에서는 오류 처리와 프로덕션에 푸시되거나 활성화된
워크플로우가 때때로 오류를 만날 수 있다는 것에 대해 이야기했습니다.

4
00:00:17,970 --> 00:00:22,890
프로덕션에 푸시되거나 활성화된 워크플로우가
오류를 만날 수 있다는 것에 대해 이야기했습니다.

5
00:00:23,110 --> 00:00:26,968
그리고 디버깅은 이러한 오류들을 수정하고,

6
00:00:26,969 --> 00:00:30,430
다시 발생하지 않도록 하는 과정입니다.

7
00:00:31,550 --> 00:00:34,948
디버깅이 무엇인지, 그리고 왜

8
00:00:34,949 --> 00:00:38,870
디버깅을 잘 하는 게 중요한 기술인지 이야기해 봅시다.

9
00:00:40,230 --> 00:00:45,425
워크플로우, 아니 정확히 말하면 워크플로우 내의 특정
노드가 실패하는 데에는 여러 가지 이유가 있을 수 있습니다.

10
00:00:45,426 --> 00:00:49,050
워크플로우 내의 특정 노드가 실패하는
데에는 여러 가지 이유가 있을 수 있습니다.

11
00:00:49,310 --> 00:00:51,530
설정이 잘못되었을 수도 있고,

12
00:00:51,750 --> 00:00:55,470
기본 서비스가 사용 불가능할 수도 있습니다.

13
00:00:55,610 --> 00:01:02,530
예를 들어, 구글 시트나 슬랙을
사용한다면 500 오류가 발생할 수 있는데,

14
00:01:02,531 --> 00:01:07,770
이건 서비스가 현재 사용할 수 없다는 의미입니다.

15
00:01:08,530 --> 00:01:11,690
또는 입력 데이터와 관련된 문제일 수도 있습니다.

16
00:01:11,890 --> 00:01:13,810
예를 들어, 웹훅을 받는다고 해봅시다.

17
00:01:13,990 --> 00:01:17,567
웹훅에 정보가 누락되어

18
00:01:17,568 --> 00:01:21,190
워크플로우 또는 특정 노드가 실패할 수 있습니다.

19
00:01:22,470 --> 00:01:26,489
기본적으로 이렇게 되면 워크플로우 실행이 중단되고,

20
00:01:26,490 --> 00:01:30,130
상태가 실패로 설정됩니다.

21
00:01:31,150 --> 00:01:37,650
실행 기록 또는 실행 로그에서 실패한
모든 워크플로우 실행 목록을 찾아서,

22
00:01:37,651 --> 00:01:41,368
오류가 다시 발생하지 않도록 하나씩

23
00:01:41,369 --> 00:01:44,690
디버그할 수 있습니다.

24
00:01:46,630 --> 00:01:53,450
자동화 관점에서 워크플로우가 실패할 수 있지만, 반드시
실패로 태그되지 않을 수도 있다는 점을 알아두는 것이 중요합니다.

25
00:01:53,451 --> 00:02:01,190
자동화 관점에서 워크플로우가 실패할 수 있지만, 반드시
실패로 태그되지 않을 수도 있다는 점을 알아두는 것이 중요합니다.

26
00:02:01,191 --> 00:02:07,630
만약 특정 작업을 자동화하려고 하는데 오류가
발생한 노드가 없다면, 때로는 작업이 자동화되지 않고

27
00:02:07,631 --> 00:02:12,210
워크플로우가 오류로 표시되지 않을 수도 있습니다.

28
00:02:12,450 --> 00:02:15,930
그래서 오류 처리가 워크플로우가

29
00:02:15,931 --> 00:02:19,070
제대로 실행되도록 하는 데 아주 중요합니다.

30
00:02:20,090 --> 00:02:24,850
이 예시를 잠시 후에 살펴볼게요.

31
00:02:27,370 --> 00:02:30,187
워크플로우를 디버그하는 가장 쉬운 방법은,

32
00:02:30,188 --> 00:02:34,750
n8n에서 '편집기에서 디버그' 기능을 사용하는 겁니다.

33
00:02:34,910 --> 00:02:39,839
이 기능은 실행 기록에서 데이터를

34
00:02:39,840 --> 00:02:45,750
워크플로우의 현재 캔버스로 고정할
수 있게 해주는 아주 강력한 기능입니다.

35
00:02:46,410 --> 00:02:54,190
이 기능은 실패한 실행에 있었던 모든
데이터 또는 아이템을 효과적으로 복사해서,

36
00:02:54,191 --> 00:03:02,510
현재 워크플로우 편집기에 고정합니다. 그런
다음 이 데이터를 사용하여 디버그할 수 있습니다.

37
00:03:02,511 --> 00:03:06,150
현재 워크플로우 편집기에 고정합니다. 그런
다음 이 데이터를 사용하여 디버그할 수 있습니다.

38
00:03:07,010 --> 00:03:13,655
몇 개의 비디오 전에 웹훅
노드에서 핀 기능을 사용했을 때와

39
00:03:13,656 --> 00:03:18,730
마찬가지로, 이것도 똑같은 기능입니다.

40
00:03:18,830 --> 00:03:23,610
오류 데이터를 워크플로우
캔버스에 고정할 수 있게 해줍니다.

41
00:03:25,670 --> 00:03:31,090
고정된 데이터는 오른쪽 하단에
파란색 또는 보라색 기호가 표시됩니다.

42
00:03:31,330 --> 00:03:35,410
워크플로우는 한 번에 하나의 고정된
데이터 세트만 가질 수 있습니다.

43
00:03:35,510 --> 00:03:42,470
그래서 여러분은 여러 유형의 버그를
하나씩 해결하면서 모든 버그를 수정하고,

44
00:03:42,471 --> 00:03:49,831
일부를 수정하는 과정에서 다른
버그가 생기지 않도록 해야 합니다.

45
00:03:51,510 --> 00:03:58,197
오류가 수정되거나 처리되면, 실패한 모든 실행을
다시 트리거하기 위해 재시도 기능을 사용할 수 있습니다.

46
00:03:58,198 --> 00:04:02,770
실패한 모든 실행을 다시 트리거할 수
있는 재시도 기능을 사용할 수 있습니다.

47
00:04:03,670 --> 00:04:10,047
워크플로우가 실패하면 5개 또는
10개의 실행이 실패할 수도 있기 때문에,

48
00:04:10,048 --> 00:04:14,710
이 기능은 아주 유용합니다.

49
00:04:15,190 --> 00:04:21,910
실행 로그에서 현재 저장된 워크플로우로 재시도할지, 아니면
실행 당시의 원래 워크플로우로 재시도할지 결정할 수 있습니다.

50
00:04:21,911 --> 00:04:27,310
현재 저장된 워크플로우로 재시도할지, 아니면 실행
당시의 원래 워크플로우로 재시도할지 결정할 수 있습니다.

51
00:04:28,270 --> 00:04:32,750
재시도는 오류가 발생한 노드에서 실행됩니다.

52
00:04:33,310 --> 00:04:39,110
이는 워크플로우 오류가 오류가 발생한
노드 이전의 잘못 구성된 노드에서 발생한 경우,

53
00:04:39,111 --> 00:04:46,270
이 노드를 다시 실행하려면 '편집기로 복사' 노드를 사용해야 한다는
것을 의미합니다. 재시도는 오류가 발생한 노드에서만 실행되기 때문이죠.

54
00:04:46,271 --> 00:04:52,730
이 노드를 다시 실행하려면 '편집기로 복사' 노드를 사용해야 한다는
것을 의미합니다. 재시도는 오류가 발생한 노드에서만 실행되기 때문이죠.

55
00:04:55,090 --> 00:05:00,410
디버깅할 때 유용한 또 다른
기능은 '출력 편집' 기능입니다.

56
00:05:01,270 --> 00:05:06,910
'출력 편집' 기능을 사용하면 특정 노드의
출력을 수동으로 편집할 수 있습니다.

57
00:05:07,150 --> 00:05:15,570
이것은 워크플로우를 테스트하거나 디버깅할 때, 특히 웹훅을 사용하고
여러 종류의 테스트 이벤트를 보내고 싶지 않을 때 유용할 수 있습니다.

58
00:05:15,571 --> 00:05:18,810
특히 웹훅을 사용하고 여러 종류의 테스트
이벤트를 보내고 싶지 않을 때 유용할 수 있습니다.

59
00:05:18,811 --> 00:05:21,450
여러 종류의 테스트 이벤트를 보내고
싶지 않을 때 유용할 수 있습니다.

60
00:05:21,451 --> 00:05:29,770
이전 노드를 모두 실행하고 데이터에
모든 변환을 적용하지 않아도 되지만,

61
00:05:29,771 --> 00:05:33,237
확장성이 좋은 방법은 아니므로, 이 기능은

62
00:05:33,238 --> 00:05:36,331
절제해서 사용해야 합니다.

63
00:05:37,030 --> 00:05:41,042
하지만 재시도가 불가능한 경우에는,

64
00:05:41,043 --> 00:05:45,390
몇 개의 실행 백로그를 수정하는
빠른 방법이 될 수 있습니다.

65
00:05:49,220 --> 00:05:54,580
디버깅할 때 매우 유용한 또 다른
기능은 워크플로우 버전 기록입니다.

66
00:05:55,120 --> 00:06:01,320
워크플로우, 오류 처리 또는 디버깅을
업데이트할 때, 때로는 실수를 해서

67
00:06:01,321 --> 00:06:05,920
어디서부터 시작했는지 잊어버릴 때도 있습니다.

68
00:06:06,560 --> 00:06:10,140
다행히 워크플로우 버전 기록이 있습니다.

69
00:06:11,560 --> 00:06:14,257
여기서 주어진 워크플로우의

70
00:06:14,258 --> 00:06:18,141
저장된 모든 이전 버전을 볼 수 있습니다.

71
00:06:18,260 --> 00:06:23,180
이것은 워크플로우에 버그를 일으킬
수 있는 일부 변경 사항을 되돌리거나,

72
00:06:23,400 --> 00:06:26,998
워크플로우 이전 버전의

73
00:06:26,999 --> 00:06:31,201
구조를 검사해야 할 때 유용합니다.

74
00:06:31,400 --> 00:06:36,960
이것은 이전 버전으로 되돌려야 하는 경우
재시도 기능과 함께 잘 사용할 수 있습니다.

75
00:06:36,961 --> 00:06:39,536
이전 버전으로 되돌린 다음

76
00:06:39,537 --> 00:06:43,061
현재 저장된 버전으로 여러 실행을
재시도해야 할 때 사용할 수 있습니다.

77
00:06:44,800 --> 00:06:50,160
이제 n8n으로 돌아가서 워크플로우
디버깅의 두 가지 다른 예시를 살펴봅시다.

78
00:06:52,520 --> 00:06:58,920
자, n8n에 왔습니다. 여기서 이
워크플로우를 디버깅할 겁니다.

79
00:06:59,300 --> 00:07:04,720
워크플로우를 디버깅하는 첫 번째 단계는, 먼저 워크플로우가
올바르게 실행될 때 무엇을 해야 하는지 이해하는 것입니다.

80
00:07:04,721 --> 00:07:08,160
워크플로우가 올바르게 실행될 때
무엇을 해야 하는지 이해하는 것입니다.

81
00:07:08,900 --> 00:07:14,740
여기서 실행 로그를 볼 수 있습니다. 성공적인
실행 하나와 실패한 실행 하나가 있네요.

82
00:07:15,060 --> 00:07:16,060
실패한 실행 하나가 있네요.

83
00:07:16,320 --> 00:07:19,254
먼저 성공적인 실행을 살펴보고

84
00:07:19,255 --> 00:07:22,161
워크플로우가 무엇을 하는지 알아볼게요.

85
00:07:22,880 --> 00:07:25,560
여기서 웹훅을 받은 것을 볼 수 있습니다.

86
00:07:25,960 --> 00:07:32,000
웹훅에는 특정 식별자가 있는 ID 키가 있습니다.

87
00:07:33,060 --> 00:07:35,560
그런 다음 사용자를 가져옵니다.

88
00:07:35,700 --> 00:07:38,800
이건 구글 시트의 또 다른 기능입니다.

89
00:07:38,940 --> 00:07:44,920
행을 가져오되, 특히 ID 열을 필터링합니다.

90
00:07:45,100 --> 00:07:51,220
그리고 특정 ID가 있는 행을 찾을 것입니다.

91
00:07:52,020 --> 00:07:56,176
이것은 모든 행 정보, 모든 시트의

92
00:07:56,177 --> 00:07:59,620
다른 열 정보를 반환합니다.

93
00:07:59,740 --> 00:08:03,433
그래서 필터링한 ID와 같은 ID뿐만
아니라, 이메일, 이름, 성, 회사도 가져옵니다.

94
00:08:03,434 --> 00:08:07,520
필터링한 것과 같은 ID와 더불어
이메일, 이름, 성, 회사도 가져오죠.

95
00:08:08,120 --> 00:08:12,434
그런 다음 특정 이메일, 이름, 성,

96
00:08:12,435 --> 00:08:16,540
회사에 대한 정보와 함께 슬랙 메시지를 보냅니다.

97
00:08:18,220 --> 00:08:21,060
이제 실패한 실행을 살펴볼게요.

98
00:08:22,300 --> 00:08:27,120
여기서 보면 오류가 있는 것을 알 수 있습니다.

99
00:08:28,000 --> 00:08:32,560
'undefined'의 속성인 'to string'을
읽을 수 없다는 오류 메시지가 있네요.

100
00:08:32,720 --> 00:08:36,820
여기서 분명히 body.id를
읽으려고 한 것을 알 수 있습니다.

101
00:08:37,480 --> 00:08:43,500
그리고 웹훅에서 이 웹훅에
ID가 없다는 것을 볼 수 있습니다.

102
00:08:44,340 --> 00:08:46,509
그래서 할 일은 데이터를

103
00:08:46,510 --> 00:08:49,981
복사하기 위해 '편집기에서 디버그'를 클릭하는 겁니다.

104
00:08:50,060 --> 00:08:53,100
그리고 이 여러 가지 경우들을 처리해야 합니다.

105
00:08:53,960 --> 00:08:56,828
우선, ID가 유효한지

106
00:08:56,829 --> 00:09:03,280
확인하는 if 노드를 추가할 수 있습니다.

107
00:09:03,860 --> 00:09:15,440
여기서 json.body.id가 존재해야 합니다.

108
00:09:16,200 --> 00:09:20,253
이 경우, 이 경로를 따라

109
00:09:20,254 --> 00:09:24,061
사용자를 가져오고 슬랙 메시지를 보낼 수 있습니다.

110
00:09:25,100 --> 00:09:29,320
여기서 디버깅을 계속하는 여러 가지 방법이 있습니다.

111
00:09:29,660 --> 00:09:34,740
ID가 없는 경우, 예를 들면,

112
00:09:35,020 --> 00:09:37,480
여기서 ID 이름을 바꾸겠습니다.

113
00:09:38,160 --> 00:09:43,480
ID가 없다면 예를 들어, 웹훅에 ID가
없다는 슬랙 메시지를 보낼 수도 있습니다.

114
00:09:46,600 --> 00:09:49,960
웹훅에 ID가 없다는 슬랙 메시지를 보낼 수 있습니다.

115
00:09:50,900 --> 00:09:52,440
그리고 그렇게 하면 이유를 확인할 수 있겠죠.

116
00:09:53,160 --> 00:09:57,845
하지만 여기서 좀 더 똑똑하게,

117
00:09:57,846 --> 00:10:04,020
이 워크플로우의 목표는 특정 데이터베이스에서
사용자를 조회하는 것임을 알 수 있습니다.

118
00:10:04,340 --> 00:10:06,760
여기서는 ID를 이용해서요.

119
00:10:07,140 --> 00:10:12,245
하지만 과거 실행을 보면,

120
00:10:12,246 --> 00:10:17,480
데이터베이스에 이메일도 있다는 것을 알 수 있습니다.

121
00:10:17,481 --> 00:10:23,200
그래서 ID 대신에, 만약 ID가 없지만 이메일이
있다면 이메일로 검색해 볼 수 있습니다.

122
00:10:23,201 --> 00:10:26,400
만약 ID가 없지만 이메일이 있다면
이메일을 이용해서 조회할 수 있겠죠.

123
00:10:27,340 --> 00:10:31,180
편집기로 돌아가서, 유효한 ID가 있는 경우를 다뤘고,

124
00:10:32,260 --> 00:10:36,560
이메일이 있는 경우를 추가할 수 있습니다.

125
00:10:38,420 --> 00:10:43,600
이 경우 json.body.email이
존재하는 경우입니다.

126
00:10:44,960 --> 00:10:48,860
그리고 할 일은 똑같은 작업을 하는 것뿐입니다.

127
00:10:50,820 --> 00:10:57,400
ID를 조회하는 대신, 이메일로 조회하면 됩니다.

128
00:11:00,120 --> 00:11:01,720
json.body.email이요.

129
00:11:02,020 --> 00:11:08,540
그런 다음 연락처 정보를 담은
동일한 슬랙 메시지를 보낼 겁니다.

130
00:11:09,920 --> 00:11:15,240
여기서 이제 둘 다 없는 경우를 처리할 수 있습니다.

131
00:11:15,360 --> 00:11:20,940
이럴 때 '중지 및 오류' 노드를 사용하는 게 좋습니다.

132
00:11:23,300 --> 00:11:27,200
'ID 또는 이메일 없음'이라는 메시지를 추가합니다.

133
00:11:29,100 --> 00:11:33,240
이렇게 하면 워크플로우를 수정했습니다.

134
00:11:33,600 --> 00:11:39,280
우선, 이 오류 데이터에서도 여전히
작동하는지 확인할 수 있습니다.

135
00:11:39,420 --> 00:11:41,500
워크플로우를 테스트해 보겠습니다.

136
00:11:41,960 --> 00:11:44,680
여기서 보시다시피 ID가 없었습니다.

137
00:11:45,020 --> 00:11:46,940
그래서 이메일 필드로 이동했습니다.

138
00:11:47,100 --> 00:11:50,260
유효한 이메일이 있었죠.

139
00:11:50,480 --> 00:11:52,380
그래서 사용자를 가져오고 메시지를 보냈습니다.

140
00:11:53,420 --> 00:12:01,420
이 경우, 수정하기 전에 특정 노드를 수정해야 했기
때문에, 이 워크플로우를 재시도할 수 없을 것입니다.

141
00:12:01,421 --> 00:12:07,820
수정하기 전에 특정 노드를 수정해야 했기
때문에, 이 워크플로우를 재시도할 수 없을 것입니다.

142
00:12:09,080 --> 00:12:12,220
다루고 싶은 또 다른 경우는 이 실행입니다.

143
00:12:12,940 --> 00:12:16,480
여기서 웹훅을 받은 것을 볼 수 있습니다.

144
00:12:16,481 --> 00:12:22,040
사용자를 읽으려고 했지만 여기서
아무 일도 일어나지 않았습니다.

145
00:12:22,140 --> 00:12:23,340
메시지가 실행되지 않았죠.

146
00:12:23,800 --> 00:12:29,760
이것은 워크플로우가 실패하지 않지만
성공적이지도 않을 수 있다는 점을 말씀드린 것입니다.

147
00:12:30,480 --> 00:12:32,700
워크플로우가 실패하지 않지만 성공적이지도
않을 수 있다는 점을 말씀드린 것입니다.

148
00:12:33,000 --> 00:12:34,720
이것이 아주 좋은 예시입니다.

149
00:12:35,120 --> 00:12:36,640
여기서 무슨 일이 일어났을까요?

150
00:12:37,420 --> 00:12:41,609
분명히 입력 데이터에서 여기에서 볼 수
있는 ID로 누군가를 조회하려고 했습니다.

151
00:12:41,610 --> 00:12:45,000
입력 데이터에서 여기에서 볼 수
있는 ID로 누군가를 조회하려고 했죠.

152
00:12:45,001 --> 00:12:47,660
하지만 데이터가 반환되지 않았습니다.

153
00:12:48,100 --> 00:12:53,718
여기서 할 수 있는 것은, 이번에는 '편집기에서 디버그'가 아니라
오류가 아니었기 때문에, '편집기로 복사'를 사용하는 것입니다.

154
00:12:53,719 --> 00:13:03,240
이번에는 '편집기에서 디버그'가 아니라 오류가
아니었기 때문에, '편집기로 복사'를 사용하는 것입니다.

155
00:13:04,040 --> 00:13:07,620
이번에는 이 경우를 처리해 보겠습니다.

156
00:13:07,800 --> 00:13:14,900
워크플로우를 테스트하면, 변경한 내용이 이 실행에서도 여전히
작동하는 것을 볼 수 있지만, 원하는 출력을 얻지 못하고 있습니다.

157
00:13:14,901 --> 00:13:19,800
워크플로우를 테스트하면, 변경한 내용이 이 실행에서도 여전히
작동하는 것을 볼 수 있지만, 원하는 출력을 얻지 못하고 있습니다.

158
00:13:20,360 --> 00:13:24,437
여기서 할 수 있는 것은, 이 '사용자 가져오기' 시트에서

159
00:13:24,438 --> 00:13:30,520
파라미터로 이동해서 설정을 보면...

160
00:13:30,521 --> 00:13:35,000
죄송합니다. 설정으로 이동해서 항상
데이터를 출력하도록 요청할 수 있습니다.

161
00:13:35,960 --> 00:13:45,200
이렇게 하면 연락처를 찾지 못하더라도,
여기서 빈 항목 정보를 받게 됩니다.

162
00:13:45,201 --> 00:13:48,220
여기서 빈 아이템에 대한 정보를 얻게 됩니다.

163
00:13:49,120 --> 00:13:55,060
여기서 슬랙 메시지를 보내기
전에 추가 검사를 할 수 있습니다.

164
00:13:56,060 --> 00:14:00,700
여기서는 연락처에 이메일이 있는지 확인할 수 있습니다.

165
00:14:01,980 --> 00:14:08,420
여기 슬랙에서 정보를 읽어서 확인할 수 있습니다.

166
00:14:10,360 --> 00:14:14,760
json.email 이메일이 있으면.

167
00:14:18,690 --> 00:14:21,290
이메일이 존재하면 슬랙 메시지를 보냅니다.

168
00:14:22,830 --> 00:14:26,630
여기서는 동일한 수정을 해야 합니다.

169
00:14:26,970 --> 00:14:31,130
이걸 복사해서 여기에 넣고.

170
00:14:31,290 --> 00:14:32,450
확인도 하죠.

171
00:14:34,810 --> 00:14:37,610
그리고 유효한 이메일이 있으면 메시지를 보냅니다. 172
00:14:44,030 유효한 이메일이 없는 경우, 즉 조회가 실패한 경우,

173
00:14:44,470 --> 00:14:48,750
'중지 및 오류' 노드를 드래그할 수 있습니다.

174
00:14:49,870 --> 00:14:55,430
'데이터베이스에서 연락처를 찾을 수 없음'이라고요.

175
00:14:57,450 --> 00:15:01,410
이렇게 할 수 있습니다.

176
00:15:01,950 --> 00:15:05,213
여기서 이들을 조금 더 잘 정리할 수 있습니다.

177
00:15:05,214 --> 00:15:08,390
이들이 모두 같은 작업을 하고 있기 때문이죠.

178
00:15:08,530 --> 00:15:18,090
이걸 여기에 연결해서 하나의 if 노드와
하나의 오류 발생 노드만 사용할 수 있습니다.

179
00:15:19,090 --> 00:15:26,730
이렇게 하면 워크플로우를
디버그했습니다. 사용자를 찾을 수 없는 경우,

180
00:15:26,930 --> 00:15:30,903
다음번에는 오류가 발생하고, 누군가 와서

181
00:15:30,904 --> 00:15:33,650
사용자가 없는 경우를 처리할 수 있습니다.

182
00:15:33,790 --> 00:15:37,010
만약 이 상황이 일반적이라면, 다르게 처리하고요.

183
00:15:37,210 --> 00:15:39,810
만약 일반적이지 않다면, 무엇이
잘못되었는지 알아낼 수 있습니다.

184
00:15:41,430 --> 00:15:46,090
n8n 초급 강좌의 8번째 마지막
비디오를 시청해주셔서 감사합니다.

185
00:15:46,091 --> 00:15:50,750
여기서는 워크플로우 디버깅과 실패한
실행을 수정하는 방법을 살펴봤습니다.

186
00:15:51,110 --> 00:15:55,630
고급 과정에서는 훨씬 더 고급 주제,

187
00:15:55,930 --> 00:16:01,110
고급 워크플로우 생성, 복잡한 데이터 흐름, 고급 예시,

188
00:16:01,270 --> 00:16:04,030
오류 처리 및 디버깅을 더 자세히 다룰 예정입니다.

189
00:16:04,810 --> 00:16:08,730
관심 가져주셔서 감사합니다.
고급 과정에서 뵙는 분들도 있겠네요.

