1
00:00:00,990 --> 00:00:06,050
안녕하세요, n8n 초급 과정 네 번째 영상입니다.

2
00:00:06,830 --> 00:00:10,320
이번 영상에서는 노드가 어떤 데이터를 사용하고,

3
00:00:10,321 --> 00:00:14,950
데이터가 노드에서 노드로 어떻게 전달되는지 알아보겠습니다.

4
00:00:15,950 --> 00:00:18,510
이번 영상은 조금 길어질 거예요.

5
00:00:18,690 --> 00:00:22,090
기술적인 개념을 좀 더 다룰 예정입니다.

6
00:00:22,410 --> 00:00:26,530
하지만 이 개념들을 이해하는 것은 매우 중요해요.

7
00:00:26,670 --> 00:00:29,990
그래야 최고의 워크플로우를 만들 수 있거든요.

8
00:00:31,610 --> 00:00:35,330
먼저 n8n을 최대한 활용하기 위해 알아야 할

9
00:00:35,331 --> 00:00:38,550
몇 가지 핵심 데이터 개념부터 설명해 드릴게요.

10
00:00:40,230 --> 00:00:45,310
오늘은 두 가지 주요 데이터 구조를 살펴볼 겁니다.

11
00:00:45,550 --> 00:00:48,430
첫 번째는 JSON이라고 부르는 것이고요.

12
00:00:48,730 --> 00:00:51,110
두 번째는 리스트입니다.

13
00:00:52,130 --> 00:00:58,490
JSON은 디지털 방식으로 데이터를
저장하는 아주 흔한 방법으로,

14
00:00:58,610 --> 00:01:00,890
중괄호 { } 안에 작성됩니다.

15
00:01:01,470 --> 00:01:08,750
키-값 쌍으로 이루어져 있으며,
각 쌍은 쉼표로 구분됩니다.

16
00:01:10,030 --> 00:01:13,710
리스트는 단순히 객체들의 모음일 뿐입니다.

17
00:01:14,050 --> 00:01:19,822
같은 타입이거나 다른 타입일 수 있으며,

18
00:01:19,823 --> 00:01:25,750
대괄호 [ ] 안에 쉼표로 구분하여 작성합니다.

19
00:01:27,550 --> 00:01:30,190
JSON은 내장될 수 있습니다.

20
00:01:30,390 --> 00:01:37,310
이 말은, 어떤 JSON에서 키의 값이 또 다른 JSON일 수
있다는 뜻입니다. 복잡한 데이터를 정리하는 데 사용할 수 있죠.

21
00:01:37,311 --> 00:01:43,270
이렇게 해서요.

22
00:01:44,490 --> 00:01:48,984
이 예시에서는, 내장된 JSON을 사용해서

23
00:01:48,985 --> 00:01:55,250
Emily의 위치 정보를 모두
"location" 키로 묶을 수 있습니다.

24
00:01:55,930 --> 00:02:03,090
이 키의 값은 JSON이며, Emily의 국가와 도시에
대한 정보를 가진 두 개의 키를 가지고 있습니다.

25
00:02:03,091 --> 00:02:08,970
(죄송합니다, 문장이 약간 꼬였네요.)

26
00:02:11,710 --> 00:02:17,530
JSON의 데이터에 접근하려면
표준 점 표기법을 사용할 수 있습니다.

27
00:02:18,030 --> 00:02:23,230
$JSON은 JSON 자체에 접근하게 해줍니다.

28
00:02:23,690 --> 00:02:28,946
그리고 .first_name을 입력하면
first_name 키의 값에 접근할 수 있습니다.

29
00:02:28,947 --> 00:02:33,850
언더스코어는 굳이 언급하지 않겠습니다.

30
00:02:34,830 --> 00:02:40,830
내장된 JSON의 경우 여러 개의 점
표기법을 연속해서 사용할 수 있습니다.

31
00:02:41,470 --> 00:02:51,170
여기서 위치를 가져오려면
$JSON.location.country라고 쓰면 됩니다.

32
00:02:52,590 --> 00:02:57,281
$JSON.location 자체가 JSON이고,

33
00:02:57,282 --> 00:03:03,350
거기서 다시 점 표기법을 사용해서
"country" 키의 값을 가져오는 것이죠.

34
00:03:05,150 --> 00:03:10,150
리스트는 단순히 객체들의 모음입니다.

35
00:03:10,390 --> 00:03:13,530
문자들을 섞어서 사용할 수 있죠.

36
00:03:13,531 --> 00:03:25,010
여기 보시는 것처럼 대괄호
안에 쉼표로 구분하여 작성합니다.

37
00:03:26,810 --> 00:03:33,630
JSON 자체가 객체이므로, 당연히
JSON 리스트를 만들 수도 있습니다.

38
00:03:34,430 --> 00:03:39,530
여기에는 앞서 봤던 JSON 예시를 쉼표로 구분하고,

39
00:03:39,750 --> 00:03:45,090
두 개의 JSON을 더 추가하여
JSON 리스트를 만들었습니다.

40
00:03:45,650 --> 00:03:51,690
위에서 대괄호가 보이고, 첫 번째 JSON,

41
00:03:51,810 --> 00:03:59,030
쉼표, 두 번째 JSON, 쉼표, 세 번째
JSON, 마지막 대괄호가 있습니다.

42
00:04:01,570 --> 00:04:08,410
JSON과 테이블 사이에는 아주
흥미로운 대응 관계가 있습니다.

43
00:04:08,411 --> 00:04:12,937
하나의 JSON은 하나의 행에 해당하고,

44
00:04:12,938 --> 00:04:17,331
키는 그 행의 헤더(열 이름)에 해당합니다.

45
00:04:18,190 --> 00:04:22,101
이것이 이전 영상에서 봤던

46
00:04:22,102 --> 00:04:25,790
JSON 및 테이블 편집 화면과
비슷하게 느껴질 수 있습니다.

47
00:04:27,290 --> 00:04:33,990
여기서 JSON 리스트를 보면, Emily의 이름이 "Emily",
성이 "Johnson", 이메일이 이메일 주소에 해당합니다.

48
00:04:33,991 --> 00:04:42,050
그대로 행에 들어맞고, 테이블에도 대응되는

49
00:04:42,051 --> 00:04:44,095
열 이름(키)들이 있습니다.

50
00:04:44,096 --> 00:04:47,230
테이블의 열에 해당하는 것이죠.

51
00:04:50,080 --> 00:04:57,400
그래서 JSON이 3개 있는 리스트는, 각각의 값에 해당하는
3개의 행을 가진 테이블과 같다고 생각할 수 있습니다.

52
00:04:57,401 --> 00:05:04,220
각각의 행이요.

53
00:05:05,380 --> 00:05:09,080
n8n에서는 이것을 "아이템"이라고 부릅니다.

54
00:05:09,081 --> 00:05:12,880
여기 빨간색으로 표시된 것이 아이템의 예시입니다.

55
00:05:12,960 --> 00:05:18,220
리스트의 첫 번째 아이템입니다. 그리고 노드는

56
00:05:18,221 --> 00:05:22,660
입력과 출력으로 여러 아이템들(복수)을 사용합니다.

57
00:05:22,980 --> 00:05:27,800
이것이 노드 입력 및 출력의 유일한 허용 형식입니다.

58
00:05:28,500 --> 00:05:33,358
아무 정보도 반환하지 않기로 결정해도,

59
00:05:33,359 --> 00:05:38,560
비어있는 JSON을 포함한 리스트를 반환해야 합니다.

60
00:05:39,080 --> 00:05:43,840
이것이 NNN 노드의 빈 출력으로 간주되는 것입니다.

61
00:05:46,000 --> 00:05:50,896
이제 노드가 워크플로우를 실행하고 구축할 때

62
00:05:50,897 --> 00:05:54,580
이 아이템을 실제로 어떻게 사용하는지 살펴보겠습니다.

63
00:05:56,900 --> 00:06:01,800
각 노드는 입력 데이터의 각
아이템에 대해 한 번씩 실행됩니다.

64
00:06:02,040 --> 00:06:07,480
(고급 과정에서 다룰 몇 가지 예외가 있긴 하지만요.)

65
00:06:07,481 --> 00:06:14,800
일반적으로 각 노드는 아이템당 한
번씩 실행된다고 기억하시면 됩니다.

66
00:06:14,960 --> 00:06:21,980
예를 들어, 여기서는 날짜 및 시간 노드를
사용해서 여러 날짜를 형식화하고 있습니다.

67
00:06:22,500 --> 00:06:26,443
노드는 각 아이템을 읽고, 날짜를 형식화한 다음,

68
00:06:26,444 --> 00:06:30,801
개별 아이템으로 반환합니다.

69
00:06:31,140 --> 00:06:37,361
이렇게 해서 아이템을 여러 노드를 거치며
변환하여 워크플로우를 구축하는 것입니다.

70
00:06:37,480 --> 00:06:45,040
여기 스크린샷을 보면, 날짜가
다른 여러 아이템 리스트가 있습니다.

71
00:06:45,160 --> 00:06:47,760
각각 다른 날짜를 가지고 있죠.

72
00:06:48,920 --> 00:06:52,861
출력에도 세 개의 아이템이 있습니다.

73
00:06:52,862 --> 00:06:56,440
아이템당 한 번씩 실행되었으니까요.

74
00:06:56,800 --> 00:07:02,320
그리고 각 아이템에는 형식화된 날짜가 있습니다.

75
00:07:02,500 --> 00:07:05,140
같은 날짜지만 형식이 다르죠.

76
00:07:05,141 --> 00:07:10,818
노드 설정에서 톱니바퀴 아이콘을 통해

77
00:07:10,819 --> 00:07:14,580
추가적인 설정을 할 수 있습니다.

78
00:07:14,880 --> 00:07:18,377
여기서 "한 번만 실행"을 선택할 수 있는데,

79
00:07:18,378 --> 00:07:24,340
이러면 노드가 입력의 첫 번째
아이템에 대해서만 실행됩니다.

80
00:07:27,620 --> 00:07:31,978
워크플로우가 실제로 어떻게 작동하는지

81
00:07:31,979 --> 00:07:37,160
더 잘 이해할 수 있도록 간단한 실행 흐름도를 보겠습니다.

82
00:07:37,180 --> 00:07:45,740
워크플로우 실행 버튼을 클릭하면 워크플로우가
시작되고, Google 시트에서 데이터를 읽습니다.

83
00:07:45,880 --> 00:07:50,300
그리고 특정 조건에 따라 아이템들을 필터링합니다.

84
00:07:51,360 --> 00:07:59,580
워크플로우 실행 노드는 시작되면서 빈
JSON을 반환합니다. 데이터가 전혀 없는 것이죠.

85
00:07:59,780 --> 00:08:05,760
여기서 우리는 리스트 안에 빈 JSON이
하나 들어있는 것을 볼 수 있습니다.

86
00:08:06,960 --> 00:08:13,420
이것은 다음 노드가 한 번 실행될 수 있도록
하기 위한 것입니다. 아이템이 하나 있으니까요.

87
00:08:14,280 --> 00:08:20,322
Google 시트 노드는 한 번 실행되고,

88
00:08:20,323 --> 00:08:24,560
Google 시트에서 세 개의 아이템을 읽습니다.

89
00:08:24,740 --> 00:08:30,640
그래서 JSON1, JSON2, JSON3
세 개의 아이템을 반환합니다.

90
00:08:30,840 --> 00:08:35,740
각각은 해당 행에 연결됩니다.

91
00:08:35,760 --> 00:08:40,420
그래서 세 개의 아이템을 출력하는 것을 볼 수 있습니다.

92
00:08:42,500 --> 00:08:49,260
필터 노드는 각 아이템이 특정
필터 조건을 만족하는지 확인합니다.

93
00:08:49,840 --> 00:08:57,400
여기서는 하나의 아이템만
만족하므로 하나의 아이템만 출력됩니다.

94
00:09:01,580 --> 00:09:05,570
워크플로우를 구축할 때 핵심은

95
00:09:05,571 --> 00:09:10,720
입력 데이터에 따라 노드를 실행하도록 구성하는 것입니다.

96
00:09:10,980 --> 00:09:18,560
이를 위해 테이블, JSON 또는 스키마
보기에서 키를 드래그할 수 있습니다.

97
00:09:19,300 --> 00:09:22,260
이것은 "표현식"이라고 부르는 것을 생성합니다.

98
00:09:23,700 --> 00:09:31,120
표현식은 각 아이템에 대해
해당 키와 연결된 값을 반환합니다.

99
00:09:32,100 --> 00:09:37,060
NNN 인터페이스에서는 각 아이템의 예시 값을 보여줍니다.

100
00:09:37,080 --> 00:09:38,400
예를 들어 첫 번째 아이템이요.

101
00:09:39,800 --> 00:09:46,742
이전과 동일한 데이터를 사용해서 스키마 보기에서,

102
00:09:46,743 --> 00:09:52,160
"first name" 키를 필터
조건으로 드래그할 수 있습니다.

103
00:09:52,900 --> 00:09:58,586
필터에서 "first name"이 특정 값과 같을 때만

104
00:09:58,587 --> 00:10:03,920
통과시키고 싶다고 설정할 수 있습니다.

105
00:10:04,160 --> 00:10:05,260
예를 들어, "Emily"로요.

106
00:10:07,080 --> 00:10:10,020
여기 표현식 편집기가 있습니다.

107
00:10:10,740 --> 00:10:14,800
아이템 1에 대한 결과 예시가 보입니다.

108
00:10:14,940 --> 00:10:21,540
여기서 아이템 1의 $JSON.first_name
값은 "Emily"와 같습니다.

109
00:10:23,000 --> 00:10:26,840
노드는 아이템당 한 번 실행된다는 것을 기억하세요.

110
00:10:27,060 --> 00:10:31,687
각 아이템에 대해 실행될 때,

111
00:10:31,688 --> 00:10:35,860
표현식은 해당 키에 연결된 값을 갖게 됩니다.

112
00:10:38,780 --> 00:10:45,600
중괄호 { } 안에 있는 모든 것이 표현식입니다.

113
00:10:45,900 --> 00:10:51,160
그래서 표현식을 여러 가지
다양한 용도로 사용할 수 있습니다.

114
00:10:51,400 --> 00:10:55,740
앞서 본 것처럼 아이템 변수를 사용할 수 있습니다.

115
00:10:55,980 --> 00:11:02,600
$JSON.first_name,
$JSON.last_name 또는 email 처럼요.

116
00:11:03,040 --> 00:11:06,180
JavaScript도 사용할 수 있습니다.

117
00:11:06,181 --> 00:11:14,380
만약 아이템 값 중 하나에 JavaScript
함수나 메서드를 적용하고 싶다면,

118
00:11:14,500 --> 00:11:24,200
중괄호 안에 내장된 JavaScript
함수나 메서드를 사용할 수 있습니다.

119
00:11:24,201 --> 00:11:28,820
(사용할 수 있습니다.)

120
00:11:29,760 --> 00:11:36,160
표현식에서 하나 또는 여러 개의
표현식을 조합할 수도 있습니다.

121
00:11:36,161 --> 00:11:38,960
텍스트와 함께요.

122
00:11:39,260 --> 00:11:46,040
여기 슬랙 노드를 사용하는 예시가 있습니다.

123
00:11:46,041 --> 00:11:53,280
각 아이템에 대해 "이름(공백)성",
그리고 괄호 안에 이메일을 보내고,

124
00:11:53,420 --> 00:11:59,280
그 다음에 모든 사람에게 똑같이
적용될 메시지를 보내고 싶습니다.

125
00:11:59,820 --> 00:12:01,840
"Acme에 새로 가입하셨습니다."

126
00:12:02,180 --> 00:12:08,781
여기서 첫 번째 아이템에 대해 메시지가
어떻게 표시되는지 예시를 볼 수 있습니다.

127
00:12:09,060 --> 00:12:15,800
이 노드를 실행하고, 세 개의 입력 아이템이 있다면,

128
00:12:15,960 --> 00:12:24,660
입력 데이터의 각 아이템마다 다른 메시지를 얻게 됩니다.

129
00:12:25,240 --> 00:12:29,718
다시 NNN으로 돌아가서 이러한 표현식을 사용하고,

130
00:12:29,719 --> 00:12:32,880
도구에서 함께 어떻게 보이는지 살펴보겠습니다.

131
00:12:33,220 --> 00:12:37,700
여기에는 지난 영상에서 만든 워크플로우가 있습니다.

132
00:12:37,800 --> 00:12:42,120
수동 실행 후 Google 시트에서 데이터를 읽는 것이죠.

133
00:12:42,580 --> 00:12:47,460
워크플로우 테스트를 클릭해서
이미 실행된 데이터를 확보하겠습니다.

134
00:12:48,680 --> 00:12:55,700
여기서 위쪽의 더하기(+) 또는
노드 끝의 작은 더하기를 사용하여

135
00:12:55,900 --> 00:12:57,300
새 노드를 추가할 수 있습니다.

136
00:12:57,420 --> 00:13:00,379
이번에는 다음 영상에서 자세히 다룰

137
00:13:00,380 --> 00:13:03,160
"필드 편집" 노드를 사용해 보겠습니다.

138
00:13:03,440 --> 00:13:05,940
표현식을 어떻게 사용하는지 간단히 보여드릴게요.

139
00:13:07,240 --> 00:13:11,829
노드를 기본 설정대로 두고,

140
00:13:11,830 --> 00:13:15,720
"Full Name"이라고 하는
새로운 필드를 추가하겠습니다.

141
00:13:15,960 --> 00:13:20,660
"Full Name"은 당연히 "first
name"과 "last name"으로 구성됩니다.

142
00:13:20,880 --> 00:13:27,020
그래서 "first name"을 드래그하고,
"last name"을 드래그합니다.

143
00:13:27,320 --> 00:13:37,200
단계 테스트를 클릭하면 각 아이템에 "Full
Name" 필드가 추가되는 것을 볼 수 있습니다.

144
00:13:37,201 --> 00:13:42,420
이름과 성이 합쳐진 것이죠.

145
00:13:43,040 --> 00:13:45,960
JSON 보기에서 좀 더 잘 보일 겁니다.

146
00:13:46,080 --> 00:13:47,860
"Paul Harris", "Paul Harris".

147
00:13:48,360 --> 00:13:50,200
"Marcus Bennett",
"Marcus Bennett".

148
00:13:51,180 --> 00:13:57,295
여기 표현식에서 슬라이드에서 언급했듯이

149
00:13:57,296 --> 00:14:01,260
첫 번째 아이템의 결과 예시를 볼 수 있습니다.

150
00:14:01,440 --> 00:14:03,460
"Paul Harris"가 여기서 보이죠.

151
00:14:04,480 --> 00:14:09,080
표현식에 약간의 JavaScript를
추가할 수도 있습니다.

152
00:14:09,300 --> 00:14:15,060
예를 들어, 성을 대문자로 만들고 싶을 수 있습니다.

153
00:14:15,600 --> 00:14:20,338
이렇게 하면 입력 데이터의 이름은 그대로 하고,

154
00:14:20,339 --> 00:14:25,260
성을 대문자로 변환할 것입니다.

155
00:14:25,261 --> 00:14:31,100
여기서 이걸 실행하고 이 단계를 다시
테스트하면, 이제 전체 이름이 추가되고,

156
00:14:31,101 --> 00:14:37,180
성 부분이 대문자로 변환된 것을 볼 수 있습니다.

157
00:14:39,060 --> 00:14:43,807
NNN 초급 과정 네 번째 영상을
시청해 주셔서 감사합니다.

158
00:14:43,808 --> 00:14:48,220
여기서는 NNN의 핵심 데이터 개념을 다뤘습니다.

159
00:14:48,460 --> 00:14:53,800
다음 영상에서는 이 영상들에서 배운 모든 내용을 활용하여

160
00:14:53,801 --> 00:14:57,020
드디어 첫 번째 워크플로우를 만들어 보겠습니다.

161
00:14:58,060 --> 00:15:04,980
워크플로우를 작업하는 중에 입력 및 출력
데이터가 왜 그렇게 나오는지 이해하기 어려울 경우,

162
00:15:04,981 --> 00:15:10,140
언제든지 이 영상으로 돌아와서

163
00:15:10,141 --> 00:15:19,780
아이템, 리스트, JSON에
대한 완벽한 이해를 확보하세요.

164
00:15:19,781 --> 00:15:23,864
이것들은 워크플로우를 구축하고

165
00:15:23,865 --> 00:15:27,021
표현식을 사용할 때 이해해야 할 핵심 개념입니다.

166
00:15:28,100 --> 00:15:29,540
다음 영상에서 뵙겠습니다.

