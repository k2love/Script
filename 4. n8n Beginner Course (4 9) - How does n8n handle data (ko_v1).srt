1
00:00:00,990 --> 00:00:06,050
안녕하세요! n8n 초급 강좌 네
번째 비디오에 오신 걸 환영합니다!

2
00:00:06,830 --> 00:00:10,320
이번 비디오에서는 노드들이
어떤 종류의 데이터를 사용하는지,

3
00:00:10,321 --> 00:00:14,950
그리고 데이터가 어떻게 노드에서
노드로 전달되는지 알아볼 거예요.

4
00:00:15,950 --> 00:00:18,510
이번 비디오는 조금 길어질 것 같네요.

5
00:00:18,690 --> 00:00:22,090
약간 더 기술적인 개념들을 다룰 거거든요.

6
00:00:22,410 --> 00:00:26,530
하지만 이 개념들을 이해하는 건 정말 중요해요.

7
00:00:26,670 --> 00:00:29,990
그래야 최고의 워크플로우를 만들 수 있거든요!

8
00:00:31,610 --> 00:00:35,330
n8n을 최대한 활용하기 위해 알아야 할

9
00:00:35,331 --> 00:00:38,550
몇 가지 핵심 데이터 개념부터 설명해 볼게요.

10
00:00:40,230 --> 00:00:45,310
오늘 우리가 살펴볼 주요 데이터 구조는 두 가지예요.

11
00:00:45,550 --> 00:00:48,430
첫 번째는 JSON이라고 부르는 것이고,

12
00:00:48,730 --> 00:00:51,110
두 번째는 리스트입니다.

13
00:00:52,130 --> 00:00:58,490
JSON은 디지털 방식으로 데이터를 저장하는 아주
흔한 방법인데요, 중괄호 또는 꺾쇠 괄호 안에 작성됩니다.

14
00:00:58,610 --> 00:01:00,890
( '{' 와 '}' 괄호 )

15
00:01:01,470 --> 00:01:08,750
각각 쉼표로 구분된 키-값 쌍으로 이루어져 있어요.

16
00:01:10,030 --> 00:01:13,710
리스트는 단순히 객체의 모음일 뿐이에요.

17
00:01:14,050 --> 00:01:19,822
같은 유형일 수도 있고 다른 유형일 수도
있으며, 대괄호 또는 정사각형 괄호 안에 작성되고,

18
00:01:19,823 --> 00:01:25,750
( '[' 와 ']' 괄호 ) 마찬가지로
쉼표로 구분됩니다.

19
00:01:27,550 --> 00:01:30,190
JSON은 임베드될 수 있어요.

20
00:01:30,390 --> 00:01:37,310
이 말은 즉, 가끔 JSON에서 어떤 키의 값이 또 다른 JSON인
경우가 있어요. 이걸 이용해서 복잡한 데이터를 정리할 수 있죠.

21
00:01:37,311 --> 00:01:43,270
이 예시에서는 임베드된 JSON을 사용해서
에밀리의 위치 정보를 'location' 키로 묶을 수 있어요.

22
00:01:44,490 --> 00:01:48,984
여기서 'location' 키는 그 자체가 JSON인데요,

23
00:01:48,985 --> 00:01:55,250
에밀리의 국가와 도시에 대한 정보를
가진 두 개의 키를 가지고 있습니다.

24
00:01:55,930 --> 00:02:03,090
이 키의 값은 JSON인데, 에밀리의 나라와
도시 정보가 담긴 두 개의 키를 가지고 있죠.

25
00:02:03,091 --> 00:02:08,970
에밀리의 국가와 도시에 대한 정보를
가진 두 개의 키를 가진 JSON 입니다.

26
00:02:11,710 --> 00:02:17,530
JSON에 있는 데이터에 접근하려면
표준 점 표기법을 사용할 수 있어요.

27
00:02:18,030 --> 00:02:23,230
여기서 '$JSON'은 JSON
자체에 접근할 수 있게 해주고,

28
00:02:23,690 --> 00:02:28,946
'.first_name'을 입력하면,
'first_name' 키의 값에 접근할 수 있죠.

29
00:02:28,947 --> 00:02:33,850
'first_name' 키의 값에 접근할 수 있습니다.

30
00:02:34,830 --> 00:02:40,830
임베드된 JSON의 경우에는 점
표기법을 여러 개 이어서 사용할 수 있어요.

31
00:02:41,470 --> 00:02:51,170
여기서 위치 정보를 가져오려면
'$JSON.location.country'라고 쓸 수 있습니다.

32
00:02:52,590 --> 00:02:57,281
'$JSON.location' 자체가 JSON이고, 여기서

33
00:02:57,282 --> 00:03:03,350
점 표기법을 사용해서 'country'
키의 값을 가져오는 거죠.

34
00:03:05,150 --> 00:03:10,150
리스트는 단순히 객체들의 모음입니다.

35
00:03:10,390 --> 00:03:13,530
문자들을 섞어서 사용할 수도 있고요.

36
00:03:13,531 --> 00:03:25,010
보시는 것처럼 대괄호 안에
쉼표로 구분해서 작성하면 됩니다.

37
00:03:26,810 --> 00:03:33,630
그리고 JSON 자체가 객체이기 때문에
JSON 리스트를 만들 수도 있어요.

38
00:03:34,430 --> 00:03:39,530
여기서는 앞에서 봤던 JSON 예시를 쉼표로 구분해서,

39
00:03:39,750 --> 00:03:45,090
그리고 두 개의 JSON을 더
추가해서 JSON 리스트를 만들었어요.

40
00:03:45,650 --> 00:03:51,690
여기 보시면, 맨 위에 대괄호가 있고, 첫 번째 JSON,

41
00:03:51,810 --> 00:03:59,030
쉼표, 두 번째 JSON, 쉼표, 세 번째
JSON, 그리고 마지막 대괄호로 마무리됩니다.

42
00:04:01,570 --> 00:04:08,410
JSON과 테이블 사이에는 아주 흥미로운 대응
관계가 있는데요, 하나의 JSON이 한 개의 행에 해당하고,

43
00:04:08,411 --> 00:04:12,937
키는 행의 헤더가 됩니다.

44
00:04:12,938 --> 00:04:17,331
키는 행의 헤더가 된다는걸 알 수 있습니다.

45
00:04:18,190 --> 00:04:22,101
이게 이전 비디오에서 봤던 JSON과
테이블 뷰랑 비슷하게 느껴질 수도 있어요.

46
00:04:22,102 --> 00:04:25,790
이전 비디오에서 편집 노드에 대해 배웠죠?

47
00:04:27,290 --> 00:04:33,990
여기서 JSON 리스트가 있으면, 예를 들어
에밀리라는 사람의 이름, 성, 이메일을 보면,

48
00:04:33,991 --> 00:04:42,050
이름은 'Emily', 성은 'Johnson', 이메일은 해당
이메일로, 정확히 행에 맞아떨어지는 것을 볼 수 있죠.

49
00:04:42,051 --> 00:04:44,095
그리고 이에 상응하는 테이블이 있고,

50
00:04:44,096 --> 00:04:47,230
테이블의 각 열에 해당하는 다른 키들이 있는 거죠.

51
00:04:50,080 --> 00:04:57,400
그래서 JSON 세 개의 리스트가 있다면, 각
행에 해당하는 값을 가진 세 개의 행으로 이루어진

52
00:04:57,401 --> 00:05:04,220
테이블이 있다고 상상할 수 있습니다.
각 행은 해당 행의 값을 가지겠죠.

53
00:05:05,380 --> 00:05:09,080
n8n에서는 이것을 '아이템'이라고 부릅니다.

54
00:05:09,081 --> 00:05:12,880
여기 빨간색으로 표시된 것이 아이템의 예시인데요.

55
00:05:12,960 --> 00:05:18,220
여기 리스트의 첫 번째 아이템이 있죠? 노드는

56
00:05:18,221 --> 00:05:22,660
'아이템들'을 복수 형태로 입력과 출력으로 사용합니다.

57
00:05:22,980 --> 00:05:27,800
이것들이 노드의 입력과 출력으로
허용되는 유일한 형식입니다.

58
00:05:28,500 --> 00:05:33,358
아무 정보도 반환하지 않기로 결정하더라도,

59
00:05:33,359 --> 00:05:38,560
빈 JSON으로 이루어진 리스트를 반환해야 합니다.

60
00:05:39,080 --> 00:05:43,840
이게 바로 n8n 노드의 빈 출력으로 간주됩니다.

61
00:05:46,000 --> 00:05:50,896
이제 노드가 실제로 아이템을 어떻게 사용하는지 알아볼게요.

62
00:05:50,897 --> 00:05:54,580
노드를 실행하고 워크플로우를 만들 때 말이죠.

63
00:05:56,900 --> 00:06:01,800
각 노드는 입력 데이터에 있는
각 아이템마다 한 번씩 실행됩니다.

64
00:06:02,040 --> 00:06:07,480
물론 고급 과정에서 다룰 예외적인 경우들도 있지만요.

65
00:06:07,481 --> 00:06:14,800
일반적으로 각 노드는 각 아이템마다
한 번씩 실행된다고 기억하시면 됩니다.

66
00:06:14,960 --> 00:06:21,980
예를 들어 여기서 날짜 및 시간 노드를
사용해서 다른 날짜들을 포맷하고 있어요.

67
00:06:22,500 --> 00:06:26,443
노드는 각 아이템을 읽고, 날짜를 포맷한 다음에,

68
00:06:26,444 --> 00:06:30,801
개별 아이템으로 반환합니다.

69
00:06:31,140 --> 00:06:37,361
이게 바로 아이템들을 다양한 노드를
거치면서 워크플로우를 만드는 방법이에요.

70
00:06:37,480 --> 00:06:45,040
여기 이 스크린샷을 보시면, 각기 다른
날짜를 가진 아이템 리스트가 있어요.

71
00:06:45,160 --> 00:06:47,760
각기 다른 날짜를 가진 아이템 리스트가 있죠.

72
00:06:48,920 --> 00:06:52,861
그리고 여기서 출력 결과로, 세 개의

73
00:06:52,862 --> 00:06:56,440
아이템이 다시 나왔어요. 왜냐하면 각
아이템마다 한 번씩 실행됐기 때문이죠.

74
00:06:56,800 --> 00:07:02,320
그리고 포맷된 날짜가 있죠. 이건 같은 날짜이지만,

75
00:07:02,500 --> 00:07:05,140
다른 형식으로 포맷된 것입니다.

76
00:07:05,141 --> 00:07:10,818
노드의 파라미터에서는 톱니바퀴 아이콘을 통해서

77
00:07:10,819 --> 00:07:14,580
추가적인 설정을 할 수 있습니다.

78
00:07:14,880 --> 00:07:18,377
여기서 한 번만 실행하도록 설정할 수 있는데요,

79
00:07:18,378 --> 00:07:24,340
이렇게 하면 노드는 입력의 첫
번째 아이템에 대해서만 실행됩니다.

80
00:07:27,620 --> 00:07:31,978
워크플로우가 실제로 어떻게
작동하는지 더 잘 이해하기 위해,

81
00:07:31,979 --> 00:07:37,160
아주 간단한 워크플로우의 실행 스키마를 준비해 봤어요.

82
00:07:37,180 --> 00:07:45,740
워크플로우는 '워크플로우 실행' 버튼을 클릭하면
시작해서, 구글 시트에서 데이터를 읽어오고,

83
00:07:45,880 --> 00:07:50,300
특정 조건에 따라 아이템을 필터링합니다.

84
00:07:51,360 --> 00:07:59,580
'워크플로우 실행' 노드가 실행되면 빈 JSON을
반환합니다. 즉, 데이터가 전혀 없다는 뜻이죠.

85
00:07:59,780 --> 00:08:05,760
여기서 우리는 빈 JSON이
리스트로 감싸져있는 것을 볼 수 있죠.

86
00:08:06,960 --> 00:08:13,420
이것이 반환되어서 다음 노드가 한 번 실행될
수 있습니다. 왜냐하면 아이템이 하나 있으니까요.

87
00:08:14,280 --> 00:08:20,322
그러면 구글 시트 노드는 한 번 실행되어서,

88
00:08:20,323 --> 00:08:24,560
읽어오는 구글 시트에 있는 세 개의 아이템을 읽어옵니다.

89
00:08:24,740 --> 00:08:30,640
그래서 세 개의 아이템, JSON1,
JSON2, JSON3을 반환하죠.

90
00:08:30,840 --> 00:08:35,740
각각 해당 행과 연결되어 있고요.

91
00:08:35,760 --> 00:08:40,420
그래서 세 개의 아이템이 출력되는 것을 볼 수 있습니다.

92
00:08:42,500 --> 00:08:49,260
필터 노드는 각 아이템이 특정
필터 조건을 만족하는지 확인합니다.

93
00:08:49,840 --> 00:08:57,400
여기서는 하나의 아이템만 조건을
만족시키고 있어서 하나의 아이템만 출력합니다.

94
00:09:01,580 --> 00:09:05,570
워크플로우를 만들 때 가장 중요한 건

95
00:09:05,571 --> 00:09:10,720
입력 데이터에 따라 노드를 실행하도록 설정하는 겁니다.

96
00:09:10,980 --> 00:09:18,560
이건 테이블, JSON, 또는 스키마
뷰에서 키를 드래그하면 할 수 있어요.

97
00:09:19,300 --> 00:09:22,260
이렇게 하면 우리가 '표현식'이라고
부르는 것이 만들어집니다.

98
00:09:23,700 --> 00:09:31,120
표현식은 각 아이템마다 해당 키에 연결된 값을 반환합니다.

99
00:09:32,100 --> 00:09:37,060
n8n 인터페이스는 각 아이템의 예시 값을 보여줄 거예요.

100
00:09:37,080 --> 00:09:38,400
예를 들어 첫 번째 아이템처럼요.

101
00:09:39,800 --> 00:09:46,742
이전과 같은 데이터를 사용해서, 스키마 뷰에서,

102
00:09:46,743 --> 00:09:52,160
'first name' 키를 필터
조건으로 드래그할 수 있습니다.

103
00:09:52,900 --> 00:09:58,586
그리고 필터링할 때 'first name'이

104
00:09:58,587 --> 00:10:03,920
어떤 값과 같은 경우에만
통과시키고 싶다고 설정할 수 있어요.

105
00:10:04,160 --> 00:10:05,260
예를 들어 'Emily'처럼요.

106
00:10:07,080 --> 00:10:10,020
여기 표현식 편집기가 있습니다.

107
00:10:10,740 --> 00:10:14,800
그리고 첫 번째 아이템에 대한 예시 결과가 보이죠.

108
00:10:14,940 --> 00:10:21,540
그래서 여기서 아이템 1의
'$JSON.first name'은 'Emily'입니다.

109
00:10:23,000 --> 00:10:26,840
기억하세요! 노드는 각 아이템마다 한 번씩 실행됩니다.

110
00:10:27,060 --> 00:10:31,687
노드가 각 아이템마다 실행될 때, 표현식은

111
00:10:31,688 --> 00:10:35,860
해당 키에 연결된 값을 가지게 됩니다.

112
00:10:38,780 --> 00:10:45,600
중괄호 사이에 있는 모든 것은 표현식이에요.

113
00:10:45,900 --> 00:10:51,160
그래서 표현식을 여러 가지
다양한 용도로 사용할 수 있습니다.

114
00:10:51,400 --> 00:10:55,740
이전처럼 아이템 변수를 사용할 수도 있고,

115
00:10:55,980 --> 00:11:02,600
' J S O N . f i r s t n a m e ′ , ′ JSON.firstname
′ , ′ JSON.last name', 혹은 'email'처럼 사용할 수 있습니다.

116
00:11:03,040 --> 00:11:06,180
자바스크립트도 사용할 수 있어요.

117
00:11:06,181 --> 00:11:14,380
만약 아이템 값 중 하나에 자바스크립트
함수나 메서드를 적용하고 싶다면,

118
00:11:14,500 --> 00:11:24,200
중괄호 안에 자바스크립트 내장
함수나 메서드를 사용할 수 있습니다.

119
00:11:24,201 --> 00:11:28,820
자바스크립트 내장 함수나 메서드를 중괄호 사이에 넣어서요.

120
00:11:29,760 --> 00:11:36,160
그리고 표현식에서는 하나 또는
여러 개의 표현식을 결합할 수도 있고,

121
00:11:36,161 --> 00:11:38,960
일반 텍스트도 사용할 수 있어요.

122
00:11:39,260 --> 00:11:46,040
여기 슬랙 노드를 사용하는 예시를 보면, 각 아이템마다

123
00:11:46,041 --> 00:11:53,280
이름, 공백, 성, 그리고 괄호 안에 이메일을 보낸 후,

124
00:11:53,420 --> 00:11:59,280
모든 사람에게 동일한 짧은 메시지를 보낼 수 있습니다.

125
00:11:59,820 --> 00:12:01,840
'Acme에 가입해주셔서 감사합니다!' 같은 메시지죠.

126
00:12:02,180 --> 00:12:08,781
여기서 첫 번째 아이템에 대해 메시지가
어떻게 보이는지 확인할 수 있습니다.

127
00:12:09,060 --> 00:12:15,800
만약 이 노드를 실행하고 입력 아이템이 세 개라면,

128
00:12:15,960 --> 00:12:24,660
입력 아이템마다 다른 메시지 하나씩을 받게 될 것입니다.

129
00:12:25,240 --> 00:12:29,718
다시 n8n으로 돌아와서, 표현식을
어떻게 사용하는지 알아보고,

130
00:12:29,719 --> 00:12:32,880
도구에서 함께 살펴볼게요.

131
00:12:33,220 --> 00:12:37,700
여기에는 지난 비디오에서 만들었던 워크플로우가 있습니다.

132
00:12:37,800 --> 00:12:42,120
수동 실행과 구글 시트의 데이터를 읽는 기능이 있죠.

133
00:12:42,580 --> 00:12:47,460
데이터가 실행되어 있도록
'워크플로우 테스트'를 클릭할게요.

134
00:12:48,680 --> 00:12:55,700
여기서, 위에 있는 플러스 버튼이나 노드
끝에 있는 작은 플러스 버튼을 사용해서,

135
00:12:55,900 --> 00:12:57,300
새로운 노드를 추가할 수 있습니다.

136
00:12:57,420 --> 00:13:00,379
이번에는 '필드 편집' 노드를 사용할게요.

137
00:13:00,380 --> 00:13:03,160
이 노드는 다음 비디오에서 더 자세히 다룰 겁니다.

138
00:13:03,440 --> 00:13:05,940
표현식을 어떻게 사용하는지 간단하게 보여드릴게요.

139
00:13:07,240 --> 00:13:11,829
노드를 기본 설정 그대로 두고,

140
00:13:11,830 --> 00:13:15,720
'전체 이름'이라고 부를 새 필드를 추가해 볼게요.

141
00:13:15,960 --> 00:13:20,660
분명히 전체 이름은 'first name'과
'last name'으로 이루어져 있겠죠.

142
00:13:20,880 --> 00:13:27,020
그래서 'first name'을 드래그하고
'last name'을 드래그해 볼게요.

143
00:13:27,320 --> 00:13:37,200
'단계 테스트'를 클릭하면 이제 각 아이템에
'전체 이름' 필드가 추가된 것을 볼 수 있어요.

144
00:13:37,201 --> 00:13:42,420
'전체 이름'은 'first name'과 'last
name'이 이어져서 만들어졌습니다.

145
00:13:43,040 --> 00:13:45,960
JSON 뷰에서 좀 더 잘 보일 거예요.

146
00:13:46,080 --> 00:13:47,860
Paul Harris, Paul Harris.

147
00:13:48,360 --> 00:13:50,200
Marcus Bennett, Marcus Bennett.

148
00:13:51,180 --> 00:13:57,295
표현식에서, 슬라이드에서 언급했듯이,

149
00:13:57,296 --> 00:14:01,260
첫 번째 아이템의 결과 예시를 볼 수 있습니다.

150
00:14:01,440 --> 00:14:03,460
Paul Harris, 여기에 보이는 것과 같죠.

151
00:14:04,480 --> 00:14:09,080
그리고 표현식에 자바스크립트를 조금 추가할 수도 있어요.

152
00:14:09,300 --> 00:14:15,060
예를 들어, 성을 대문자로 바꾸고 싶을 수도 있잖아요?

153
00:14:15,600 --> 00:14:20,338
이렇게 하면 'first name'은 입력 데이터 그대로,

154
00:14:20,339 --> 00:14:25,260
'last name'은 대문자로 변환될 거예요.

155
00:14:25,261 --> 00:14:31,100
여기서 이걸 실행해서 이 단계를 다시 테스트하면,
'전체 이름'뿐만 아니라 'last name'이 대문자로 되어 있는

156
00:14:31,101 --> 00:14:37,180
'전체 이름'도 얻을 수 있다는 것을 볼 수 있습니다.

157
00:14:39,060 --> 00:14:43,807
n8n 초급 강좌 네 번째 비디오를
시청해주셔서 감사합니다!

158
00:14:43,808 --> 00:14:48,220
여기서는 n8n의 핵심 데이터 개념을 다뤄봤습니다.

159
00:14:48,460 --> 00:14:53,800
다음 비디오에서는 우리가 배운 모든 내용을 사용해서

160
00:14:53,801 --> 00:14:57,020
드디어 첫 워크플로우를 만들어 볼 거예요.

161
00:14:58,060 --> 00:15:04,980
만약 워크플로우를 만드는 중에 입력 및 출력
데이터가 왜 그렇게 생겼는지 이해하기 어렵다면,

162
00:15:04,981 --> 00:15:10,140
언제든지 이 비디오로 돌아와서

163
00:15:10,141 --> 00:15:19,780
아이템, 리스트, JSON에 대해 완전히 이해했는지 확인하세요. 이것들은
워크플로우를 만들고 표현식을 사용할 때 이해해야 할 핵심 개념이거든요.

164
00:15:19,781 --> 00:15:23,864
JSON은 워크플로우를 만들고 표현식을
사용할 때 이해해야 할 핵심 개념입니다.

165
00:15:23,865 --> 00:15:27,021
워크플로우를 만들고 표현식을
사용할 때 이해해야 할 핵심 개념입니다.

166
00:15:28,100 --> 00:15:29,540
다음 비디오에서 만나요!

