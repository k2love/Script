1
00:00:01,290 --> 00:00:07,351
n8n 초급 강좌의 8번째이자 마지막
비디오에 오신 것을 환영합니다.

2
00:00:07,550 --> 00:00:11,130
이번 비디오에서는 워크플로를
디버그하는 방법을 다룰 것입니다.

3
00:00:12,030 --> 00:00:17,770
이전 비디오에서는 오류 처리, 때때로 워크플로가
프로덕션 환경으로 푸시되거나 활성화될 때

4
00:00:17,970 --> 00:00:22,890
오류가 발생할 수 있다는 점에 대해 이야기했습니다.

5
00:00:23,110 --> 00:00:26,968
디버깅은 이러한 오류를 수정하고

6
00:00:26,969 --> 00:00:30,430
다시 발생하지 않도록 하는 프로세스입니다.

7
00:00:31,550 --> 00:00:34,948
디버깅이 무엇인지,

8
00:00:34,949 --> 00:00:38,870
왜 익혀야 할 중요한 기술인지에 대해 이야기해 봅시다.

9
00:00:40,230 --> 00:00:45,425
워크플로 또는 특정 워크플로
내의 특정 노드가 실패하는 이유는

10
00:00:45,426 --> 00:00:49,050
여러 가지가 있을 수 있습니다.

11
00:00:49,310 --> 00:00:51,530
잘못 구성되었을 수 있습니다.

12
00:00:51,750 --> 00:00:55,470
기본 서비스가 사용 불가능할 수 있습니다.

13
00:00:55,610 --> 00:01:02,530
예를 들어 Google Sheets 또는 Slack을
사용하는 경우 500 오류가 발생할 수 있는데,

14
00:01:02,531 --> 00:01:07,770
이는 서비스가 현재 사용 불가능하다는 것을 의미합니다.

15
00:01:08,530 --> 00:01:11,690
또는 입력 데이터와 관련된 문제가 있을 수 있습니다.

16
00:01:11,890 --> 00:01:13,810
웹훅을 수신한다고 가정해 보겠습니다.

17
00:01:13,990 --> 00:01:17,567
웹훅에 정보가 누락되어

18
00:01:17,568 --> 00:01:21,190
워크플로 또는 특정 노드 중 하나가 실패할 수 있습니다.

19
00:01:22,470 --> 00:01:26,489
기본적으로 이것은 워크플로가 실행을

20
00:01:26,490 --> 00:01:30,130
마무리하지 못하게 하고 상태를 실패로 설정합니다.

21
00:01:31,150 --> 00:01:37,650
실행 기록 또는 실행 로그에서
실패한 모든 워크플로 실행 목록을 찾아

22
00:01:37,651 --> 00:01:41,368
오류가 다시 발생하지 않도록

23
00:01:41,369 --> 00:01:44,690
하나씩 디버깅할 수 있습니다.

24
00:01:46,630 --> 00:01:53,450
때때로 워크플로는 자동화 관점에서 반드시 실패로
태그가 지정되지는 않으면서도 실패할 수 있습니다.

25
00:01:53,451 --> 00:02:01,190
즉, 특정 작업을 자동화하려고
하는데 오류가 있는 노드가 없으면,

26
00:02:01,191 --> 00:02:07,630
때로는 작업이 자동화되지 않고
워크플로가 오류로 태그되지 않습니다.

27
00:02:07,631 --> 00:02:12,210
이것이 오류 처리가 워크플로가 올바르게 실행되도록 하는 데

28
00:02:12,450 --> 00:02:15,930
매우 중요한 이유입니다.

29
00:02:15,931 --> 00:02:19,070
워크플로가 올바르게 실행되도록
보장하는 데 매우 중요합니다.

30
00:02:20,090 --> 00:02:24,850
잠시 후에 이에 대한 예시를 다루겠습니다.

31
00:02:27,370 --> 00:02:30,187
워크플로를 디버그하는 가장 쉬운 방법은

32
00:02:30,188 --> 00:02:34,750
NNN의 편집기에서 디버그 기능을 사용하는 것입니다.

33
00:02:34,910 --> 00:02:39,839
이것은 실행 기록에서 데이터를 워크플로의

34
00:02:39,840 --> 00:02:45,750
현재 캔버스로 고정할 수 있는 매우 강력한 기능입니다.

35
00:02:46,410 --> 00:02:54,190
이것이 하는 일은 실패한 실행에
있던 데이터 또는 항목을 복사하여

36
00:02:54,191 --> 00:03:02,510
현재 워크플로의 편집기에 고정하여 해당
데이터를 디버깅에 사용할 수 있도록 합니다.

37
00:03:02,511 --> 00:03:06,150
편집기에 고정하여 디버깅에 사용할 수 있습니다.

38
00:03:07,010 --> 00:03:13,655
몇 비디오 전에 웹훅 노드에서 고정 기능을 사용했을 때와

39
00:03:13,656 --> 00:03:18,730
같은 방식으로, 이것도 동일한 기능입니다.

40
00:03:18,830 --> 00:03:23,610
워크플로 캔버스에 오류 데이터를 고정할 수 있습니다.

41
00:03:25,670 --> 00:03:31,090
고정된 데이터는 오른쪽 하단 모서리에
파란색 또는 보라색 기호가 있습니다.

42
00:03:31,330 --> 00:03:35,410
그리고 워크플로는 한 번에 하나의
고정된 데이터 세트만 가질 수 있습니다.

43
00:03:35,510 --> 00:03:42,470
따라서 다양한 유형의 버그를 하나씩 해결하면서 모두
수정하고, 일부를 수정하여 다른 버그를 만들지 않도록 해야 합니다.

44
00:03:42,471 --> 00:03:49,831
버그를 수정하고, 모두 해결되었는지 확인하면서,
일부를 수정하여 다른 버그를 만들지 않도록 해야 합니다.

45
00:03:51,510 --> 00:03:58,197
오류가 수정되거나 처리되면 재시도 기능을 사용하여

46
00:03:58,198 --> 00:04:02,770
실패한 모든 실행을 다시 트리거할 수 있습니다.

47
00:04:03,670 --> 00:04:10,047
이것은 워크플로가 실패할 때 5개 또는 10개의 실행이

48
00:04:10,048 --> 00:04:14,710
실패할 수 있기 때문에 매우 유용한 기능입니다.

49
00:04:15,190 --> 00:04:21,910
실행 로그에서 현재 저장된 워크플로 또는 실행 시점의
원래 워크플로로 재시도할지 여부를 결정할 수 있습니다.

50
00:04:21,911 --> 00:04:27,310
현재 저장된 워크플로 또는 실행 시점의 원래
워크플로로 재시도할지 여부를 결정할 수 있습니다.

51
00:04:28,270 --> 00:04:32,750
재시도는 오류가 있는 노드에서 실행됩니다.

52
00:04:33,310 --> 00:04:39,110
즉, 워크플로의 오류가 잘못 구성된 노드에서 발생하면

53
00:04:39,111 --> 00:04:46,270
오류가 있는 노드 이전의 노드에서 발생한 경우에는 해당
노드를 다시 실행하려면 복사하여 편집기에 넣어야 합니다.

54
00:04:46,271 --> 00:04:52,730
오류가 발생한 노드에서만 실행되기 때문입니다.

55
00:04:55,090 --> 00:05:00,410
디버깅할 때 또 다른 유용한 기능은 출력 편집 기능입니다.

56
00:05:01,270 --> 00:05:06,910
출력 편집 기능을 사용하면 특정 노드의
출력을 수동으로 편집할 수 있습니다.

57
00:05:07,150 --> 00:05:15,570
특히 웹훅을 사용하고 여러 가지 테스트 이벤트를 보내고 싶지
않은 경우 워크플로를 테스트하거나 디버깅할 때 유용할 수 있습니다.

58
00:05:15,571 --> 00:05:18,810
웹훅을 사용하고 여러 다른

59
00:05:18,811 --> 00:05:21,450
종류의 테스트 이벤트를 보내고
싶지 않은 경우에 유용합니다.

60
00:05:21,451 --> 00:05:29,770
이전 노드를 모두 실행하고 데이터에
대한 모든 변환을 수행할 필요 없이,

61
00:05:29,771 --> 00:05:33,237
매우 확장 가능한 방법은 아니므로

62
00:05:33,238 --> 00:05:36,331
적절히 사용해야 합니다.

63
00:05:37,030 --> 00:05:41,042
그러나 재시도가 불가능한 경우에는

64
00:05:41,043 --> 00:05:45,390
몇 가지 실행의 백로그를 수정하는
빠른 방법이 될 수 있습니다.

65
00:05:49,220 --> 00:05:54,580
디버깅할 때 또 다른 매우 유용한
기능은 워크플로 버전 기록입니다.

66
00:05:55,120 --> 00:06:01,320
워크플로, 오류 처리 또는 디버깅을
업데이트할 때 때로는 실수를 하고,

67
00:06:01,321 --> 00:06:05,920
처음 시작한 곳을 놓칠 수 있습니다.

68
00:06:06,560 --> 00:06:10,140
다행히 워크플로 버전 기록이 있습니다.

69
00:06:11,560 --> 00:06:14,257
여기에서 주어진 워크플로의

70
00:06:14,258 --> 00:06:18,141
이전 저장된 모든 버전을 볼 수 있습니다.

71
00:06:18,260 --> 00:06:23,180
이것은 워크플로에 발생한 변경 사항을 되돌려야 하는 경우,

72
00:06:23,400 --> 00:06:26,998
버그를 유발하거나, 워크플로의

73
00:06:26,999 --> 00:06:31,201
이전 버전의 구조를 검사할 때 유용할 수 있습니다.

74
00:06:31,400 --> 00:06:36,960
이것은 이전 버전으로 되돌아가야 하는
경우, 재시도 기능과 멋지게 결합될 수 있습니다.

75
00:06:36,961 --> 00:06:39,536
이전 버전으로 되돌아간 다음,

76
00:06:39,537 --> 00:06:43,061
현재 저장된 버전으로 여러 번 실행할 수 있습니다.

77
00:06:44,800 --> 00:06:50,160
n8n으로 넘어가서 워크플로 디버깅의
두 가지 다른 예를 살펴보겠습니다.

78
00:06:52,520 --> 00:06:58,920
자, 여기 n8n에 있고 디버그할 워크플로가 있습니다.

79
00:06:59,300 --> 00:07:04,720
워크플로 디버깅의 첫 번째 단계는,
우선 워크플로가 올바르게 실행될 때

80
00:07:04,721 --> 00:07:08,160
무엇을 해야 하는지 이해하는 것입니다.

81
00:07:08,900 --> 00:07:14,740
여기서 실행 로그, 성공적인
실행, 실패한 실행을 볼 수 있습니다.

82
00:07:15,060 --> 00:07:16,060
실패한 실행도요.

83
00:07:16,320 --> 00:07:19,254
먼저 워크플로가 무엇을 하는지 파악하기 위해

84
00:07:19,255 --> 00:07:22,161
성공적인 실행부터 살펴보겠습니다.

85
00:07:22,880 --> 00:07:25,560
여기서 웹훅을 받은 것을 볼 수 있습니다.

86
00:07:25,960 --> 00:07:32,000
웹훅에는 특정 식별자가 있는 ID 키가 있습니다.

87
00:07:33,060 --> 00:07:35,560
그런 다음 사용자를 가져옵니다.

88
00:07:35,700 --> 00:07:38,800
이것은 Google Sheets의 또 다른 기능입니다.

89
00:07:38,940 --> 00:07:44,920
행을 가져올 것이지만, 특히 ID 열에서 필터링합니다.

90
00:07:45,100 --> 00:07:51,220
그리고 특정 ID가 있는 행을 찾고 있습니다.

91
00:07:52,020 --> 00:07:56,176
이것은 모든 행 정보, 시트의

92
00:07:56,177 --> 00:07:59,620
다른 열에서 가져온 모든 정보를 반환합니다.

93
00:07:59,740 --> 00:08:03,433
이메일, 이름, 성 및 회사 정보와

94
00:08:03,434 --> 00:08:07,520
필터링한 것과 동일한 ID를 가져옵니다.

95
00:08:08,120 --> 00:08:12,434
그런 다음 특정 이메일, 이름, 성,

96
00:08:12,435 --> 00:08:16,540
회사 정보와 함께 슬랙 메시지를 보냅니다.

97
00:08:18,220 --> 00:08:21,060
이제 실패한 실행을 살펴볼 수 있습니다.

98
00:08:22,300 --> 00:08:27,120
여기서 빠르게 살펴보면 오류가 있음을 알 수 있습니다.

99
00:08:28,000 --> 00:08:32,560
"문자열 읽기"를 읽는 정의되지
않은 속성을 읽을 수 없습니다.

100
00:08:32,720 --> 00:08:36,820
여기서 분명히 본문.id를 읽으려고 했습니다.

101
00:08:37,480 --> 00:08:43,500
그리고 웹훅에서 이 웹훅에 ID가 없음을 볼 수 있습니다.

102
00:08:44,340 --> 00:08:46,509
따라서 데이터를 복사하기 위해

103
00:08:46,510 --> 00:08:49,981
편집기에서 디버그를 클릭할 것입니다.

104
00:08:50,060 --> 00:08:53,100
그리고 다른 사례를 다룰 것입니다.

105
00:08:53,960 --> 00:08:56,828
우선 유효한 ID가 있는지 확인하기 위해

106
00:08:56,829 --> 00:09:03,280
if를 추가할 수 있습니다.

107
00:09:03,860 --> 00:09:15,440
여기서 json.body.id가 이번에는
존재하는지 확인하고 싶습니다.

108
00:09:16,200 --> 00:09:20,253
이 경우 이 경로로 올라가서

109
00:09:20,254 --> 00:09:24,061
사용자를 가져오고 슬랙 메시지를 보낼 수 있습니다.

110
00:09:25,100 --> 00:09:29,320
여기에서 이 디버깅을 계속하는 여러 가지 방법이 있습니다.

111
00:09:29,660 --> 00:09:34,740
ID가 없는 경우를 처리할 수 있습니다.

112
00:09:35,020 --> 00:09:37,480
여기서 ID 이름을 변경해 보겠습니다.

113
00:09:38,160 --> 00:09:43,480
ID가 없으면 예를 들어 다음 메시지를 보낼 수 있습니다.

114
00:09:46,600 --> 00:09:49,960
수신된 웹훅에 ID가 없습니다.

115
00:09:50,900 --> 00:09:52,440
그렇게 해서 살펴볼 수 있습니다.

116
00:09:53,160 --> 00:09:57,845
하지만 여기서 조금 더 현명하게 볼 수 있습니다.

117
00:09:57,846 --> 00:10:04,020
이 워크플로의 목표는 특정
데이터베이스에서 사용자를 조회하는 것입니다.

118
00:10:04,340 --> 00:10:06,760
여기서 ID를 사용하여 합니다.

119
00:10:07,140 --> 00:10:12,245
하지만 이전 실행을 살펴본 결과 데이터베이스에

120
00:10:12,246 --> 00:10:17,480
이메일이 있다는 것도 확인했습니다.

121
00:10:17,481 --> 00:10:23,200
따라서 ID를 조회하는 대신 ID가 없지만 이메일이 있으면

122
00:10:23,201 --> 00:10:26,400
이메일을 사용하여 조회를 시도할 수 있습니다.

123
00:10:27,340 --> 00:10:31,180
편집기로 돌아가면 유효한 ID가 있는 경우가 있습니다.

124
00:10:32,260 --> 00:10:36,560
그런 다음 이메일이 있는 경우가 있다고 말할 수 있습니다.

125
00:10:38,420 --> 00:10:43,600
이것은 json.body.email이
존재하는지 확인하는 것입니다.

126
00:10:44,960 --> 00:10:48,860
그런 다음 해야 할 일은 동일한 작업을 수행하는 것입니다.

127
00:10:50,820 --> 00:10:57,400
ID를 조회하는 대신 이메일을 조회할 것입니다.

128
00:11:00,120 --> 00:11:01,720
json.body.email.

129
00:11:02,020 --> 00:11:08,540
그런 다음 연락처 정보와 함께
동일한 슬랙 메시지를 보낼 것입니다.

130
00:11:09,920 --> 00:11:15,240
여기서 할 수 있는 것은 이들 모두
없는 경우를 처리하는 것입니다.

131
00:11:15,360 --> 00:11:20,940
이것은 "중지 및 오류" 노드를
여기에서 사용하기에 좋은 곳입니다.

132
00:11:23,300 --> 00:11:27,200
그리고 "ID 또는 이메일
없음"이라는 작은 메시지를 보냅니다.

133
00:11:29,100 --> 00:11:33,240
여기서 수정된 워크플로가 있습니다.

134
00:11:33,600 --> 00:11:39,280
우선 이 오류 데이터를 사용하여
여전히 작동하는지 확인할 수 있습니다.

135
00:11:39,420 --> 00:11:41,500
워크플로를 테스트할 수 있습니다.

136
00:11:41,960 --> 00:11:44,680
여기서 볼 수 있듯이 ID가 없었습니다.

137
00:11:45,020 --> 00:11:46,940
따라서 이메일 필드로 내려갔습니다.

138
00:11:47,100 --> 00:11:50,260
유효한 이메일이 있었습니다.

139
00:11:50,480 --> 00:11:52,380
따라서 사용자를 가져오고 메시지를 보냈습니다.

140
00:11:53,420 --> 00:12:01,420
이 특정 경우에서는 이 특정 노드 앞에서 수정해야
했기 때문에 이 워크플로를 재시도할 수 없을 것입니다.

141
00:12:01,421 --> 00:12:07,820
이 특정 노드 앞에서 수정해야
했기 때문에 재시도할 수 없습니다.

142
00:12:09,080 --> 00:12:12,220
또 다른 예로 이 실행을 다루고 싶습니다.

143
00:12:12,940 --> 00:12:16,480
여기서 웹훅을 받은 것을 볼 수 있습니다.

144
00:12:16,481 --> 00:12:22,040
사용자를 읽으려고 했지만 여기서는
아무 일도 일어나지 않았습니다.

145
00:12:22,140 --> 00:12:23,340
메시지가 실행되지 않았습니다.

146
00:12:23,800 --> 00:12:29,760
이것이 앞에서 언급했던 워크플로가 실패하지 않지만

147
00:12:30,480 --> 00:12:32,700
성공적이지도 않을 수 있는 경우입니다.

148
00:12:33,000 --> 00:12:34,720
이것은 이에 대한 매우 좋은 예입니다.

149
00:12:35,120 --> 00:12:36,640
여기서 무슨 일이 일어났을까요?

150
00:12:37,420 --> 00:12:41,609
분명히 여기서 입력 데이터에서 볼 수 있는

151
00:12:41,610 --> 00:12:45,000
ID로 누군가를 찾으려고 했습니다.

152
00:12:45,001 --> 00:12:47,660
하지만 데이터가 반환되지 않았습니다.

153
00:12:48,100 --> 00:12:53,718
따라서 여기서 할 수 있는 것은 이번에는 편집기에서
디버그하는 대신 복사하여 편집기에 넣는 것입니다.

154
00:12:53,719 --> 00:13:03,240
이번에는 디버깅이 아니었고 오류가 없었기 때문입니다.

155
00:13:04,040 --> 00:13:07,620
이번에는 이 경우를 처리할 수 있습니다.

156
00:13:07,800 --> 00:13:14,900
워크플로를 테스트하면 우리가 만든 업데이트가
여전히 이 실행에서 작동하는 것을 볼 수 있지만

157
00:13:14,901 --> 00:13:19,800
여전히 원하는 출력을 얻지 못하고 있습니다.

158
00:13:20,360 --> 00:13:24,437
여기서 우리가 할 수 있는 것은

159
00:13:24,438 --> 00:13:30,520
이 사용자 시트에서 매개변수로 이동하여 설정에서

160
00:13:30,521 --> 00:13:35,000
죄송합니다. 설정으로 이동하여 항상
데이터를 출력하도록 요청할 수 있습니다.

161
00:13:35,960 --> 00:13:45,200
이것은 연락처를 찾지 못하더라도 여기에서
빈 항목의 정보를 갖게 된다는 것을 의미합니다.

162
00:13:45,201 --> 00:13:48,220
여기서 빈 항목의 정보가 표시됩니다.

163
00:13:49,120 --> 00:13:55,060
여기에서 슬랙 메시지를 보내기
전에 추가 확인을 설정할 수 있습니다.

164
00:13:56,060 --> 00:14:00,700
여기서 연락처에 이메일이 있는지 확인할 수 있습니다.

165
00:14:01,980 --> 00:14:08,420
이는 슬랙에서 정보를 읽어보는 것으로 가능합니다.

166
00:14:10,360 --> 00:14:14,760
json.email json.email
이메일이 있는 경우.

167
00:14:18,690 --> 00:14:21,290
존재하는 경우 슬랙 메시지를 보냅니다.

168
00:14:22,830 --> 00:14:26,630
여기서 동일한 수정을 해야 합니다.

169
00:14:26,970 --> 00:14:31,130
따라서 이것을 복사하여 여기에 붙여넣습니다.

170
00:14:31,290 --> 00:14:32,450
또한 확인합니다.

171
00:14:34,810 --> 00:14:37,610
그리고 유효한 이메일이 있으면 메시지를 보냅니다.

172
00:14:38,310 --> 00:14:44,030
유효한 이메일이 없어서 조회가 실패한 경우에는

173
00:14:44,470 --> 00:14:48,750
"중지 및 오류 발생"을 끌어다 놓을 수 있습니다.

174
00:14:49,870 --> 00:14:55,430
데이터베이스에서 연락처를 찾을 수 없습니다.

175
00:14:57,450 --> 00:15:01,410
이것을 이러한 방식으로 할 수 있습니다.

176
00:15:01,950 --> 00:15:05,213
여기서 이것들을 조금 더

177
00:15:05,214 --> 00:15:08,390
더 잘 요약할 수 있습니다.

178
00:15:08,530 --> 00:15:18,090
단일 if와 단일 오류 발생을 사용하여
이것을 여기에 연결할 수 있습니다.

179
00:15:19,090 --> 00:15:26,730
이렇게 하면 워크플로를 디버그했고 사용자를
찾을 수 없는 경우 다음 번에는 오류가 발생하여

180
00:15:26,930 --> 00:15:30,903
누군가가 뛰어들어 사용자

181
00:15:30,904 --> 00:15:33,650
없는 경우를 처리할 수 있습니다.

182
00:15:33,790 --> 00:15:37,010
이것이 일반적이면 다르게 처리하고,

183
00:15:37,210 --> 00:15:39,810
일반적이지 않으면 무엇이 잘못되었는지 파악할 수 있습니다.

184
00:15:41,430 --> 00:15:46,090
워크플로 디버깅과 실패한 실행 수정에 대해 살펴본

185
00:15:46,091 --> 00:15:50,750
NLN 초급 강좌의 8번째이자 마지막
비디오를 시청해 주셔서 감사합니다.

186
00:15:51,110 --> 00:15:55,630
고급 과정에서는 훨씬 더 고급 주제를 다룰 것입니다.

187
00:15:55,930 --> 00:16:01,110
고급 워크플로 구축, 복잡한 데이터 흐름, 더 고급 예시,

188
00:16:01,270 --> 00:16:04,030
오류 처리 및 디버깅도 다룰 것입니다.

189
00:16:04,810 --> 00:16:08,730
관심을 가져주셔서 감사합니다. 그리고
일부 분들은 고급 과정에서 뵙겠습니다.

