1
00:00:01,080 --> 00:00:05,400
안녕하세요, n8n 초급 과정의 두
번째 영상에 오신 것을 환영합니다.

2
00:00:05,680 --> 00:00:10,900
오늘은 API와 웹후크에 대해 이야기하겠습니다.
첫 번째 n8n 워크플로를 만들기 전에

3
00:00:10,901 --> 00:00:14,500
이해해야 할 매우 중요한 두 가지 개념입니다.

4
00:00:15,100 --> 00:00:23,340
이 영상에서는 API가 무엇인지,
정의와 주요 구성 요소에 대한 설명,

5
00:00:23,341 --> 00:00:26,448
그리고 때로는 역 API라고도 하는

6
00:00:26,449 --> 00:00:30,060
웹후크에 대해 이야기하겠습니다.

7
00:00:31,560 --> 00:00:34,000
먼저 API란 무엇일까요?

8
00:00:34,280 --> 00:00:39,780
API가 무엇인지뿐만 아니라, 관련된 다양한 부분과 이름을

9
00:00:39,781 --> 00:00:43,366
이해하는 데 매우 유용한 비유를
설명하면서 시작하고 싶습니다.

10
00:00:43,367 --> 00:00:46,820
이해하는 데 매우 유용한 비유를
설명하면서 시작하고 싶습니다.

11
00:00:47,500 --> 00:00:52,480
레스토랑에 앉아 테이블에 앉아 있다고 상상해 보세요.

12
00:00:52,980 --> 00:00:54,860
어떻게 음식을 얻을 수 있을까요?

13
00:00:55,060 --> 00:00:57,780
네, 웨이터에게 물어보세요.

14
00:00:58,020 --> 00:00:59,680
웨이터는 무엇이 있는지 알려주고,

15
00:00:59,681 --> 00:01:02,760
당신은 웨이터에게 질문하여 주문을
받고 주방으로 가져갈 것입니다.

16
00:01:03,040 --> 00:01:06,170
주방에서 음식을 준비하면

17
00:01:06,171 --> 00:01:09,301
웨이터가 테이블로 음식을 가져다줄 것입니다.

18
00:01:09,960 --> 00:01:14,260
이것은 API가 작동하는 방식과 매우 유사합니다.

19
00:01:15,560 --> 00:01:22,280
이 비유를 사용하여 API의 여러 부분을 설명하겠습니다.

20
00:01:22,840 --> 00:01:26,060
이 비디오를 시청하는 동안 이 점을 염두에 두십시오.

21
00:01:27,420 --> 00:01:30,320
API의 기술적인 정의입니다.

22
00:01:30,580 --> 00:01:34,620
API는 응용 프로그램 프로그래밍 인터페이스입니다.

23
00:01:35,780 --> 00:01:41,960
서비스를 노출하고 개발자는 서비스를
사용하기 위한 프로그램을 작성합니다.

24
00:01:42,280 --> 00:01:47,240
이전 영상의 작업이나 앱을 다시 떠올려 보면,

25
00:01:47,480 --> 00:01:50,420
Google Sheets를 예로 들 수 있습니다.

26
00:01:50,700 --> 00:01:53,120
Google Sheets에는 API가 있습니다.

27
00:01:53,740 --> 00:01:56,040
API에는 API가 있습니다.

28
00:01:56,060 --> 00:01:57,140
다양한 서비스가 있습니다.

29
00:01:57,240 --> 00:02:02,700
이러한 서비스 중 하나는 특정 시트의
모든 데이터를 가져오는 것일 수 있습니다.

30
00:02:02,880 --> 00:02:06,693
따라서 Google Sheets API는

31
00:02:06,694 --> 00:02:10,261
시트에서 데이터를 읽을 수 있는 서비스를 제공합니다.

32
00:02:10,700 --> 00:02:13,880
개발자는 서비스를 사용하기 위한 프로그램을 작성합니다.

33
00:02:13,980 --> 00:02:18,420
NNN을 사용하여 다양한 서비스를 사용하여

34
00:02:18,421 --> 00:02:21,981
Google Sheets API를 사용할 수 있습니다.

35
00:02:22,020 --> 00:02:25,960
예를 들어 행을 업데이트하거나
시트에서 데이터를 가져오는 것이 있습니다.

36
00:02:27,920 --> 00:02:31,401
이러한 비유를 사용하면 웨이터가

37
00:02:31,402 --> 00:02:34,220
인터페이스라고 불리는 것을 알 수 있습니다.

38
00:02:34,520 --> 00:02:37,940
그리고 애플리케이션은 주방이 될 것입니다.

39
00:02:38,160 --> 00:02:44,360
이 경우 애플리케이션은
Google Sheets일 수 있습니다.

40
00:02:44,540 --> 00:02:51,241
그리고 인터페이스를 사용하여
애플리케이션과 상호 작용할 것입니다.

41
00:02:52,400 --> 00:02:55,940
왜 애플리케이션과 상호 작용하기
위해 이 인터페이스가 필요할까요?

42
00:02:55,941 --> 00:02:59,340
복잡성을 추상화할 수 있기 때문입니다.

43
00:03:00,260 --> 00:03:05,080
레스토랑에 갈 때마다 자리에 앉아

44
00:03:05,081 --> 00:03:10,820
음식을 주문하는 대신 주방에 가서 주문을 설명해야 하고,

45
00:03:11,040 --> 00:03:14,720
음식이 준비될 때까지 기다렸다가 음식을
테이블로 가져와야 한다고 상상해 보세요.

46
00:03:14,900 --> 00:03:19,220
이것은 단순히 웨이터에게 음식을
요청하는 것보다 훨씬 더 복잡할 것입니다.

47
00:03:19,780 --> 00:03:22,540
애플리케이션에도 마찬가지입니다.

48
00:03:22,541 --> 00:03:29,800
Google Sheets에서 데이터를
읽을 때마다 Google 서버로 이동하여

49
00:03:29,801 --> 00:03:35,400
특정 시트를 찾은 다음 데이터를 읽어야 한다면,

50
00:03:35,500 --> 00:03:40,580
API를 사용하는 것보다 훨씬 더 복잡할 것입니다. API는
애플리케이션에서 데이터를 쉽게 액세스할 수 있는 추상적이지만

51
00:03:40,581 --> 00:03:45,960
간단한 방법을 제공합니다.

52
00:03:47,280 --> 00:03:49,020
API는 어떻게 작동할까요?

53
00:03:49,380 --> 00:03:51,680
문서라는 것을 사용합니다.

54
00:03:51,740 --> 00:03:52,520
문서입니다.

55
00:03:52,540 --> 00:03:59,240
문서는 애플리케이션 프로그래밍 인터페이스
또는 API가 작동하는 방식을 설명합니다.

56
00:03:59,620 --> 00:04:06,280
이 경우 레스토랑 비유에서는 메뉴가 될 것입니다.

57
00:04:08,140 --> 00:04:09,640
약간의 용어입니다.

58
00:04:10,220 --> 00:04:15,630
인터페이스를 통해 요청을 애플리케이션으로 보내면,

59
00:04:15,631 --> 00:04:19,980
애플리케이션은 인터페이스를 사용하여 응답을 보냅니다.

60
00:04:21,020 --> 00:04:24,480
클라이언트-서버 개념도 있습니다.

61
00:04:24,860 --> 00:04:27,813
이 경우 당신은 클라이언트이고

62
00:04:27,814 --> 00:04:30,700
애플리케이션과 인터페이스는 서버가 될 것입니다.

63
00:04:30,940 --> 00:04:32,900
이러한 용어를 볼 때 염두에 두세요.

64
00:04:34,840 --> 00:04:40,860
API를 사용할 때는 앞서
언급했듯이 요청과 응답이 있습니다.

65
00:04:41,180 --> 00:04:43,621
따라서 요청의 다양한 구성 요소와

66
00:04:43,622 --> 00:04:46,260
응답의 다양한 구성 요소를 분석하겠습니다.

67
00:04:47,020 --> 00:04:48,640
요청부터 시작합니다.

68
00:04:48,641 --> 00:04:52,520
HTTP 요청에는 네 가지 주요 구성 요소가 있습니다.

69
00:04:52,960 --> 00:04:56,790
이 영상에서는 HTTP 요청에 대해서만 이야기하겠습니다.

70
00:04:57,400 --> 00:05:02,080
GraphQL과 같은 API 요청을
만드는 다양한 프레임워크가 있습니다.

71
00:05:02,380 --> 00:05:07,940
하지만 사용할 대부분의 API는
HTTP 프레임워크를 사용할 것입니다.

72
00:05:09,240 --> 00:05:14,680
오늘 이야기할 모든 내용은 HTTP
요청 노드에 반영되어 있습니다.

73
00:05:14,920 --> 00:05:18,620
HTTP 요청 노드를 사용하면
HTTP 요청을 할 수 있습니다.

74
00:05:18,621 --> 00:05:22,720
NNN에서 HTTP 요청을 하고 응답을 받을 수 있습니다.

75
00:05:23,140 --> 00:05:26,228
이는 특정 API를 사용해야 하는

76
00:05:26,229 --> 00:05:29,260
자동화를 구축할 때 매우 유용합니다.

77
00:05:30,280 --> 00:05:33,140
HTTP 요청에는 네 가지 구성 요소가 있습니다.

78
00:05:33,440 --> 00:05:36,960
URL, 메서드, 헤더 및 본문입니다.

79
00:05:37,140 --> 00:05:38,500
각각을 살펴보겠습니다.

80
00:05:39,380 --> 00:05:44,040
URL은 웹상의 리소스에 대한 고유한 위치입니다.

81
00:05:44,180 --> 00:05:47,720
이것은 페이지, 이미지, PDF
또는 일부 데이터일 수 있습니다.

82
00:05:48,620 --> 00:05:50,260
URL의 예가 있습니다.

83
00:05:50,640 --> 00:05:56,920
스키마, 호스트, 포트, 경로 및 일부
쿼리 매개 변수를 볼 수 있습니다.

84
00:05:57,880 --> 00:06:01,920
스키마, 호스트 및 경로는 필수입니다.

85
00:06:02,500 --> 00:06:05,860
포트와 쿼리 매개 변수는 선택 사항입니다.

86
00:06:06,860 --> 00:06:09,266
참고해야 할 중요한 것은 쿼리

87
00:06:09,267 --> 00:06:12,381
매개 변수는 항상 물음표가 앞에 온다는 것입니다.

88
00:06:13,960 --> 00:06:15,560
다음은 메서드입니다.

89
00:06:15,680 --> 00:06:18,600
메서드는 수행하려는 작업을 설명합니다.

90
00:06:18,620 --> 00:06:20,380
지정된 URL에서 수행하고 싶은 작업을 설명합니다.

91
00:06:20,980 --> 00:06:26,520
HTTP 요청에 사용할 두 가지 주요 메서드가 있습니다.

92
00:06:26,880 --> 00:06:29,620
GET 및 POST 메서드가 있습니다.

93
00:06:30,220 --> 00:06:34,560
GET은 대부분의 경우 정보를 받는 데 사용됩니다.

94
00:06:34,980 --> 00:06:40,480
Google Sheets에서 데이터를 읽는
경우 GET 메서드를 사용하고 있습니다.

95
00:06:40,640 --> 00:06:43,940
POST는 정보를 보내는 데 사용됩니다.

96
00:06:44,340 --> 00:06:47,947
양식 제출에서 정보를 보내려면

97
00:06:47,948 --> 00:06:52,040
POST HTTP 메서드를 사용합니다.

98
00:06:53,200 --> 00:06:57,080
다른 메서드는 좀 더 드뭅니다.

99
00:06:57,240 --> 00:07:03,441
덜 일반적이지만 사용할 수 있는
DELETE, PUT 및 PATCH가 있습니다.

100
00:07:04,220 --> 00:07:09,840
메서드에서 매우 흥미로운
점은 항상 동사라는 것입니다. 즉,

101
00:07:09,841 --> 00:07:12,720
무엇을 하려고 하는지 매우 명확하게 설명한다는 것입니다.

102
00:07:12,940 --> 00:07:18,760
어떤 메서드를 사용해야 할지 궁금할 때, 수행하려는
작업에 가장 적합한 동사가 무엇인지 생각해 보세요.

103
00:07:18,761 --> 00:07:21,280
수행하려는 작업에 가장 적합한
동사가 무엇인지 생각해 보세요.

104
00:07:22,520 --> 00:07:24,120
다음은 헤더입니다.

105
00:07:24,200 --> 00:07:29,100
헤더는 주어진 요청에 대한 자세한
정보나 컨텍스트를 제공합니다.

106
00:07:29,960 --> 00:07:35,700
예를 들어 헤더에서 찾을 수 있는 일반적인 정보는

107
00:07:35,701 --> 00:07:40,020
위치, 언어 기본 설정 또는 장치 유형입니다.

108
00:07:41,840 --> 00:07:48,060
인터넷에서 페이지를 열 때마다 서버에 API 요청을 하고,

109
00:07:48,061 --> 00:07:52,320
서버는 웹 페이지로 응답합니다.

110
00:07:52,660 --> 00:07:59,360
컴퓨터나 노트북에서 인터넷을 탐색하는 경우,

111
00:07:59,740 --> 00:08:06,061
요청 헤더에 다른 정보나 컨텍스트가 있을 것입니다.

112
00:08:06,560 --> 00:08:11,281
헤더의 예는 ACCEPT
APPLICATION JSON이 될 수 있으며,

113
00:08:11,282 --> 00:08:15,320
서버에 요청을

114
00:08:15,340 --> 00:08:19,400
JSON 형식으로 받기를 원한다고 알려줍니다.

115
00:08:21,160 --> 00:08:22,880
다음은 본문입니다.

116
00:08:22,960 --> 00:08:26,820
본문은 선택 사항이며 POST 요청에만 존재합니다.

117
00:08:27,240 --> 00:08:32,120
서버 또는 애플리케이션에 보내고
싶은 정보가 포함되어 있습니다.

118
00:08:33,100 --> 00:08:39,160
양식 제출의 예를 들면 본문에는

119
00:08:39,161 --> 00:08:45,620
이름 막심, 성 폴슨, 그리고
관련 이메일이 포함될 수 있습니다.

120
00:08:45,820 --> 00:08:49,560
이것은 서버에 보내는 정보입니다.

121
00:08:51,440 --> 00:08:53,840
마지막으로 자격 증명이 있습니다.

122
00:08:53,920 --> 00:08:57,729
자격 증명은 HTTP 요청의 주요
부분으로 나열되지 않았습니다.

123
00:08:57,730 --> 00:09:02,740
자체적으로 부분이 아니기 때문입니다.

124
00:09:02,960 --> 00:09:06,900
자격 증명을 사용하는 방법은 여러 가지가 있습니다.

125
00:09:07,240 --> 00:09:10,726
자격 증명은 애플리케이션에

126
00:09:10,727 --> 00:09:13,580
특정 요청을 할 수 있는 권한이 있음을 알리는 방법입니다.

127
00:09:13,680 --> 00:09:19,340
누구나 Google Sheets를 읽거나, Google Sheets를
업데이트하거나, Slack에 메시지를 보낼 수 있다면, 매우 위험할 것입니다.

128
00:09:19,341 --> 00:09:23,020
매우 위험할 것입니다.

129
00:09:23,340 --> 00:09:29,184
따라서 HTTP 요청에 자격 증명을 포함하여

130
00:09:29,185 --> 00:09:33,600
서버에 이 요청을 할 권한이 있음을 나타냅니다.

131
00:09:34,560 --> 00:09:38,380
대부분의 API는 자격 증명을 통해 인증을 요구합니다.

132
00:09:38,480 --> 00:09:42,600
하지만 인증이 필요 없는 API도 있습니다.

133
00:09:43,680 --> 00:09:48,440
서비스를 인증하는 가장 일반적인 두 가지 방법은 쿼리

134
00:09:48,441 --> 00:09:53,671
매개 변수 물음표 API 키는 API 키가

135
00:09:53,672 --> 00:09:56,540
따라오는 형식 또는 헤더 인증을 사용하는 것입니다.

136
00:09:56,860 --> 00:10:02,800
예를 들어, 인증 콜론 베어러
뒤에 API 키가 오는 형식입니다.

137
00:10:03,040 --> 00:10:07,520
서비스를 인증하는 또 다른 매우 일반적인
방법은 OAuth를 사용하는 것입니다.

138
00:10:07,700 --> 00:10:13,720
Google로 로그인 버튼을 클릭하고 작은
창이 열려 Google 계정으로 로그인할 때마다

139
00:10:13,721 --> 00:10:19,260
OAuth 인증 방법입니다.

140
00:10:21,460 --> 00:10:25,460
이제 요청을 보내는 데 필요한 모든 것을 살펴보았습니다.

141
00:10:25,780 --> 00:10:30,561
이제 애플리케이션이 응답으로
어떻게 답변하는지 살펴보겠습니다.

142
00:10:31,020 --> 00:10:34,620
HTTP 응답에는 세 가지 주요 구성 요소가 있습니다.

143
00:10:35,200 --> 00:10:38,640
상태 코드, 헤더 및 본문입니다.

144
00:10:40,060 --> 00:10:46,200
상태 코드는 3자리 숫자이며,

145
00:10:46,201 --> 00:10:49,160
요청이 성공했는지 실패했는지에 대한 정보를 제공합니다.

146
00:10:49,700 --> 00:10:55,680
가장 일반적인 상태 코드는
200이며, 이는 OK를 의미합니다.

147
00:10:56,040 --> 00:10:58,620
이것은 표준적인 성공적인 응답입니다.

148
00:10:59,000 --> 00:11:03,960
API 요청이 잘 실행되었고 애플리케이션에서

149
00:11:04,520 --> 00:11:08,620
잘했습니다, 좋은 요청을 보냈습니다라고 말하는 것입니다.

150
00:11:09,800 --> 00:11:12,660
401은 권한이 없음을 의미합니다.

151
00:11:12,880 --> 00:11:14,980
이것은 일반적으로 인증 문제입니다.

152
00:11:15,240 --> 00:11:20,680
이는 애플리케이션에서 보낸 요청에

153
00:11:20,681 --> 00:11:25,080
이 요청을 수행하는 데 필요한 인증 정보가
포함되어 있지 않음을 알려주는 것입니다.

154
00:11:25,340 --> 00:11:29,990
다시 돌아가서 자격 증명과

155
00:11:29,991 --> 00:11:34,460
자격 증명이 있는 방법이나 자격 증명이
가지고 있는 액세스 권한을 확인해야 합니다.

156
00:11:36,020 --> 00:11:37,700
또 다른 것은 404입니다.

157
00:11:37,840 --> 00:11:40,040
웹에서 이것을 기억할 수 있을 것입니다.

158
00:11:40,240 --> 00:11:41,280
찾을 수 없습니다.

159
00:11:41,281 --> 00:11:49,000
일반적으로 이것은 URL 문제이며 찾고 있는 페이지나
데이터가 지정한 URL에 없다는 것을 의미합니다.

160
00:11:49,001 --> 00:11:52,500
지정한 URL에 없다는 것을 의미합니다.

161
00:11:53,080 --> 00:11:55,958
마지막으로 내부 서버 오류인

162
00:11:55,959 --> 00:12:00,400
500이 있습니다. 이는 서버에 오류가 있음을 나타냅니다.

163
00:12:00,920 --> 00:12:03,780
이는 당신의 잘못이 아니라
서버의 잘못이라는 것을 의미합니다.

164
00:12:04,180 --> 00:12:11,340
일반적으로 이러한 코드를 기억하고 이해하는
매우 쉬운 방법은 상태 코드가 2로 시작되면

165
00:12:11,341 --> 00:12:16,200
축하합니다. 성공적인 HTTP 요청이었습니다.

166
00:12:16,440 --> 00:12:19,281
만약 4로 시작하면 당신은 어떤 종류의

167
00:12:19,282 --> 00:12:22,701
오류를 만들었으므로 요청을 수정해야 합니다.

168
00:12:22,760 --> 00:12:25,700
500은 서버의 오류라는 것을 의미합니다.

169
00:12:26,080 --> 00:12:29,060
대부분의 경우 나중에 다시 시도하라는 의미입니다.

170
00:12:31,180 --> 00:12:38,380
그런 다음 요청에 헤더를 포함했던 것과 같은 방식으로, 애플리케이션은
응답에 헤더를 보내 더 많은 컨텍스트나 세부 정보를 제공할 것입니다.

171
00:12:38,381 --> 00:12:42,600
더 많은 컨텍스트나 세부 정보를 제공할 것입니다.

172
00:12:43,240 --> 00:12:50,340
일반적인 응답 헤더는 콘텐츠 길이, 응답에 얼마나 많은

173
00:12:50,341 --> 00:12:52,520
콘텐츠가 있는지, 어떤 종류의

174
00:12:52,521 --> 00:12:56,181
콘텐츠인지, 또는 이 콘텐츠가 언제 만료되는지입니다.

175
00:12:56,400 --> 00:13:00,060
얼마 동안 액세스할 수 있을까요?

176
00:13:02,160 --> 00:13:04,780
마지막으로 때로는 본문이 있을 것입니다.

177
00:13:04,920 --> 00:13:07,540
본문은 실제로 반환되는 데이터입니다.

178
00:13:07,541 --> 00:13:10,220
여러 가지 다른 형식이 될 수 있습니다.

179
00:13:10,480 --> 00:13:13,740
웹을 탐색하는 경우 HTML이 될 수 있습니다.

180
00:13:13,880 --> 00:13:17,700
JSON이 될 수도 있고 다른
형태의 데이터가 될 수도 있습니다.

181
00:13:17,800 --> 00:13:19,280
예를 들어, 이진 데이터입니다.

182
00:13:22,100 --> 00:13:26,460
다음으로 웹후크 또는 역 API에
대해 간단히 이야기하겠습니다.

183
00:13:28,220 --> 00:13:31,220
집에서 친구를 기다리고 있다고 상상해 보세요.

184
00:13:32,020 --> 00:13:35,280
몇 분마다 문을 확인하여

185
00:13:35,281 --> 00:13:39,960
도착했는지 확인할 수도 있고,
초인종이 울리기를 기다릴 수도 있습니다.

186
00:13:40,560 --> 00:13:43,800
이 비유에서 초인종은 웹후크입니다.

187
00:13:43,940 --> 00:13:48,460
기다리고 있는 무언가가 발생했음을 나타냅니다.

188
00:13:49,560 --> 00:13:51,960
Stripe를 사용한다고 가정해 보겠습니다.

189
00:13:52,180 --> 00:13:55,180
Stripe는 결제를 관리하는 개발자 플랫폼입니다.

190
00:13:55,540 --> 00:14:00,200
그리고 Stripe 계정에서 새 결제가
이루어질 때마다 알아야 합니다.

191
00:14:00,540 --> 00:14:02,500
두 가지 옵션이 있습니다.

192
00:14:02,920 --> 00:14:05,100
폴링이라고 하는 작업을 수행할 수 있습니다.

193
00:14:05,101 --> 00:14:10,640
예를 들어 몇 분마다 Stripe에
새 요청을 할 수 있습니다.

194
00:14:11,080 --> 00:14:15,060
새 결제가 있는지 묻는 새로운 API 요청입니다.

195
00:14:16,940 --> 00:14:19,040
만약 그렇다면 몇 가지 작업을 수행합니다.

196
00:14:19,260 --> 00:14:20,720
만약 아니라면 기다립니다.

197
00:14:21,340 --> 00:14:24,774
그리고 몇 분마다 계속해서 Stripe

198
00:14:24,775 --> 00:14:27,481
애플리케이션을 폴링하여 새 결제가 있는지 확인합니다.

199
00:14:27,940 --> 00:14:29,920
또는 웹후크를 설정할 수 있습니다.

200
00:14:30,080 --> 00:14:35,200
그리고 Stripe에서 새 결제가 이루어질 때마다 웹후크가

201
00:14:35,201 --> 00:14:41,040
동기적으로 전송되어 결제 정보를 제공합니다.

202
00:14:41,800 --> 00:14:47,140
무언가가 발생하기를 기다리거나, 특정 애플리케이션 또는

203
00:14:47,141 --> 00:14:51,052
서비스의 정보를 기다릴 때마다 때로는

204
00:14:51,053 --> 00:14:54,780
이러한 애플리케이션에서 웹후크를 만들 수 있습니다.

205
00:14:55,260 --> 00:14:58,280
웹후크를 설정하는 데 필요한 것은 URL입니다.

206
00:14:58,340 --> 00:15:02,460
정보를 보낼 위치는 어디일까요?

207
00:15:03,360 --> 00:15:09,800
그런 다음 n8n과 같은 도구와 웹후크 노드를 사용하여

208
00:15:09,801 --> 00:15:13,300
이 정보를 수신, 관리 및 처리하여
워크플로를 트리거할 수 있습니다.

209
00:15:14,040 --> 00:15:20,120
API 및 웹후크에 대한 초급
과정의 두 번째 영상이었습니다.

210
00:15:20,121 --> 00:15:24,046
다음 영상에서는 n8n 노드와

211
00:15:24,047 --> 00:15:26,680
첫 번째 워크플로를 구축하기 위해
알아야 할 모든 것을 다루겠습니다.

212
00:15:27,100 --> 00:15:28,300
다음 영상에서 뵙겠습니다.

