1
00:00:03,200 --> 00:00:03,866
지난번에,

2
00:00:04,072 --> 00:00:05,880
소스 맵이 어떻게 작동하는지에 대해 알아봤죠.

3
00:00:07,040 --> 00:00:07,534
이제,

4
00:00:07,705 --> 00:00:10,271
브라우저가 어떻게 소스 맵을 활용하여

5
00:00:10,295 --> 00:00:12,265
디버깅 경험을 향상시키는지 알아볼 차례입니다.

6
00:00:12,612 --> 00:00:13,612
시작해 볼까요!

7
00:00:14,540 --> 00:00:15,980
소스 맵은 특별합니다.

8
00:00:16,420 --> 00:00:18,760
개발자 도구를 열 때만 로드되죠.

9
00:00:19,345 --> 00:00:20,582
이것은 매우 합리적입니다.

10
00:00:21,061 --> 00:00:23,043
성능에 더 좋기 때문이고,

11
00:00:23,114 --> 00:00:25,448
사용자들은 소스 맵을 필요로 하지 않으니까요.

12
00:00:26,095 --> 00:00:27,942
어떤 소스 맵이 로드되었는지 확인하려면,

13
00:00:28,373 --> 00:00:30,101
command-shift-P 단축키를 사용하여

14
00:00:30,340 --> 00:00:32,343
개발자 리소스 탭을 열고,

15
00:00:32,460 --> 00:00:33,760
페이지를 새로 고침 하세요.

16
00:00:34,280 --> 00:00:36,400
탭에 모든 소스 맵이 나열됩니다.

17
00:00:36,700 --> 00:00:39,362
목록이 너무 길어지면 필터를 적용할 수 있습니다.

18
00:00:40,684 --> 00:00:41,684
좋습니다!

19
00:00:41,767 --> 00:00:43,969
저희 프로젝트는 HTML,

20
00:00:44,120 --> 00:00:45,773
TypeScript, 그리고
SCSS로 만들어졌습니다.

21
00:00:46,240 --> 00:00:48,236
개발자 도구가 어떻게 우리 코드를

22
00:00:48,332 --> 00:00:50,237
정확히 찾아내는지 한번 봅시다.

23
00:00:51,071 --> 00:00:52,364
반응 버튼을 클릭하세요.

24
00:00:52,877 --> 00:00:53,877
콘솔에서,

25
00:00:53,936 --> 00:00:57,351
개발자 도구가 소스 맵 덕분에 실제로
TypeScript에 연결한 것을 볼 수 있습니다.

26
00:00:57,722 --> 00:00:58,878
소스 맵 덕분이죠.

27
00:00:59,580 --> 00:01:00,580
링크를 클릭해서

28
00:01:00,660 --> 00:01:02,460
소스 패널에서 열어보세요.

29
00:01:03,401 --> 00:01:05,687
아래쪽의 선 위에 마우스를 올리면,

30
00:01:06,045 --> 00:01:08,623
개발자 도구가 정확한 위치를 보여줄 것입니다.

31
00:01:08,884 --> 00:01:10,755
이 파일이 매핑된 곳이죠.

32
00:01:11,980 --> 00:01:12,922
클릭하면

33
00:01:13,000 --> 00:01:15,400
생성된 파일로 바로 이동합니다.

34
00:01:16,140 --> 00:01:18,333
개발자 도구는 자동으로

35
00:01:18,449 --> 00:01:20,243
축소된 파일을 감지하고 포맷하여

36
00:01:20,574 --> 00:01:22,053
가독성을 높여줍니다.

37
00:01:23,278 --> 00:01:24,999
아래쪽 아이콘을 클릭하여

38
00:01:25,064 --> 00:01:26,584
포맷을 취소할 수 있습니다.

39
00:01:28,270 --> 00:01:28,824
이제,

40
00:01:29,028 --> 00:01:31,104
소스 맵이 없는 축소된 파일은 어떻게 될까요?

41
00:01:31,269 --> 00:01:32,300
개발자 도구에서

42
00:01:32,853 --> 00:01:33,974
소스 맵을 비활성화하여

43
00:01:34,044 --> 00:01:35,479
확인해 볼 수 있습니다.

44
00:01:36,725 --> 00:01:38,153
세 개의 점 메뉴를 열고,

45
00:01:38,298 --> 00:01:39,479
명령 실행을 선택한 다음,

46
00:01:39,583 --> 00:01:40,920
소스 맵을 입력하세요.

47
00:01:41,420 --> 00:01:42,420
옵션이 있습니다.

48
00:01:42,467 --> 00:01:43,849
JavaScript를 비활성화하거나,

49
00:01:44,047 --> 00:01:45,533
CSS 소스 맵을 비활성화할 수 있습니다.

50
00:01:46,180 --> 00:01:48,196
JavaScript 소스 맵을 비활성화하여

51
00:01:48,532 --> 00:01:49,720
어떻게 되는지 봅시다.

52
00:01:50,652 --> 00:01:51,652
콘솔에서,

53
00:01:51,939 --> 00:01:53,266
로그 위치가 이제

54
00:01:53,331 --> 00:01:55,578
소스 파일 대신 컴파일된
JavaScript 파일로 이동합니다.

55
00:01:55,932 --> 00:01:57,405
소스 파일 대신 말이죠.

56
00:01:58,020 --> 00:02:00,960
랜덤 숫자의 로직을 변경하고
싶다고 상상해 보세요.

57
00:02:01,308 --> 00:02:03,343
코드와 변수를 머릿속으로
수동으로 매핑해야 할 것입니다.

58
00:02:03,441 --> 00:02:05,167
머릿속에서 말이죠.

59
00:02:05,980 --> 00:02:07,553
소스 맵을 다시 활성화해 봅시다.

60
00:02:08,220 --> 00:02:08,708
이제,

61
00:02:09,060 --> 00:02:11,645
console.log에 중단점을 설정해 보세요.

62
00:02:12,513 --> 00:02:14,169
개발자 도구가 자동으로

63
00:02:14,260 --> 00:02:15,624
원래 파일을 열고

64
00:02:15,688 --> 00:02:17,000
거기에 중단점을 설정합니다.

65
00:02:17,460 --> 00:02:18,460
정말 멋지죠?

66
00:02:19,396 --> 00:02:21,262
소스 맵이 있지만,

67
00:02:21,494 --> 00:02:23,064
특히 프로덕션 코드의 경우,

68
00:02:23,400 --> 00:02:25,380
비공개로 유지하고 싶을 때가 있습니다.

69
00:02:26,141 --> 00:02:27,141
이 경우,

70
00:02:27,314 --> 00:02:28,703
디버깅할 때

71
00:02:29,005 --> 00:02:30,246
비공개 소스 맵을

72
00:02:30,311 --> 00:02:31,780
수동으로 연결해야 할 수도 있습니다.

73
00:02:32,914 --> 00:02:34,042
이 예시에서는,

74
00:02:34,241 --> 00:02:36,100
기본적으로 소스 맵을 숨겼습니다.

75
00:02:36,687 --> 00:02:38,146
생성된 코드에도 소스 URL이 없습니다.

76
00:02:38,255 --> 00:02:39,900
생성된 코드에도 말이죠.

77
00:02:40,607 --> 00:02:42,050
페이지를 마우스 오른쪽 버튼으로 클릭하고

78
00:02:42,074 --> 00:02:43,474
소스 맵 추가를 선택하세요.

79
00:02:44,167 --> 00:02:45,355
개인 소스 맵의

80
00:02:45,379 --> 00:02:46,720
URL을 입력하세요.

81
00:02:47,476 --> 00:02:49,171
URL이 유효하지 않으면,

82
00:02:49,630 --> 00:02:50,692
개발자 리소스 탭과

83
00:02:50,716 --> 00:02:52,468
콘솔에 경고가 표시됩니다.

84
00:02:52,853 --> 00:02:54,060
콘솔에도 말이죠.

85
00:02:54,797 --> 00:02:56,660
유효한 URL로 다시 시도해 보세요.

86
00:02:57,303 --> 00:02:58,303
자, 됐습니다.

87
00:02:58,678 --> 00:03:00,430
파일이 성공적으로 로드되었고

88
00:03:00,491 --> 00:03:02,580
소스가 다시 한번 매핑되었습니다.

89
00:03:03,777 --> 00:03:05,106
소스 맵은 훌륭하지만,

90
00:03:05,510 --> 00:03:07,216
몇 가지 주의할 점도 있습니다.

91
00:03:07,723 --> 00:03:08,506
때로는,

92
00:03:08,744 --> 00:03:10,845
소스 맵 사양의 한계 때문에

93
00:03:11,170 --> 00:03:12,492
디버깅이 예상대로 작동하지 않을 수 있습니다.

94
00:03:12,516 --> 00:03:14,183
소스 맵 사양의 한계 때문이죠.

95
00:03:15,171 --> 00:03:16,600
디버깅 세션을 시작해 봅시다.

96
00:03:17,180 --> 00:03:19,254
num 변수 위로 마우스를 가져가면,

97
00:03:19,577 --> 00:03:21,120
값을 미리 볼 수 있습니다.

98
00:03:21,580 --> 00:03:22,580
사실,

99
00:03:22,654 --> 00:03:24,900
개발자 도구는 인라인 미리 보기도 지원합니다.

100
00:03:25,330 --> 00:03:26,747
그리고 스코프 창에서도

101
00:03:26,771 --> 00:03:28,240
값을 편집할 수 있습니다.

102
00:03:29,133 --> 00:03:29,654
이제,

103
00:03:29,859 --> 00:03:30,965
변수 grid는 어떨지 궁금할 것입니다.

104
00:03:31,219 --> 00:03:33,000
변수 grid는 어떨까요?

105
00:03:33,558 --> 00:03:35,303
왜 이 줄은 비활성화되었고

106
00:03:35,327 --> 00:03:37,560
미리 보기가 전혀 표시되지 않을까요?

107
00:03:38,380 --> 00:03:40,620
빌드 도구가 똑똑하기 때문입니다.

108
00:03:41,315 --> 00:03:44,177
빌드 도구는 grid 변수를 제거하고

109
00:03:44,342 --> 00:03:47,120
값을 메시지에 바로 포함시킬
수 있음을 감지합니다.

110
00:03:48,053 --> 00:03:50,902
grid 변수가 소스 맵에
매핑되지 않았기 때문에,

111
00:03:51,334 --> 00:03:54,093
개발자 도구는 값을 평가할 수 없는 것입니다.

112
00:03:54,697 --> 00:03:57,125
이는 보통 프로덕션 코드에서 발생하는데,

113
00:03:57,514 --> 00:03:59,420
코드가 고도로 최적화되어 있기 때문입니다.

114
00:04:00,213 --> 00:04:03,648
개발 빌드는 더 유연한
설정을 가지는 경향이 있습니다.

115
00:04:05,018 --> 00:04:07,469
소스 맵에서 염두에 두어야 할 또 다른 사항은

116
00:04:07,493 --> 00:04:10,105
빌드 도구가 사양의 유연성 때문에

117
00:04:10,129 --> 00:04:11,592
빌드를 처리하는 방식에

118
00:04:11,865 --> 00:04:13,940
약간의 차이가 있을 수 있다는 것입니다.

119
00:04:14,845 --> 00:04:17,278
이 유연성은 맞춤 설정을 허용하고

120
00:04:17,560 --> 00:04:19,472
더 효율적인 빌드를 만들 수 있게 합니다.

121
00:04:20,180 --> 00:04:21,180
하지만,

122
00:04:21,341 --> 00:04:23,597
사양의 유연성은 때때로

123
00:04:23,621 --> 00:04:25,339
혼란을 야기할 수도 있습니다.

124
00:04:26,257 --> 00:04:27,355
예를 들어,

125
00:04:27,379 --> 00:04:28,580
헤더를 검사해 봅시다.

126
00:04:29,086 --> 00:04:33,469
CSS는 원래의 styles.scss에
제대로 매핑됩니다.

127
00:04:33,940 --> 00:04:34,940
하지만,

128
00:04:35,101 --> 00:04:37,632
페이지 트리에서 CSS 파일이

129
00:04:37,656 --> 00:04:40,120
하나가 아닌 두 개 있다는 것을 알 수 있습니다.

130
00:04:40,840 --> 00:04:42,100
프로젝트 폴더를 살펴보세요.

131
00:04:42,549 --> 00:04:46,177
그 이름의 CSS 파일은 하나밖에
없다는 것을 알고 있을 것입니다.

132
00:04:46,508 --> 00:04:48,742
그리고 그 내용은 축소된 CSS입니다.

133
00:04:49,490 --> 00:04:50,680
여기서 무슨 일이 일어나고 있는 걸까요?

134
00:04:51,998 --> 00:04:52,998
음...

135
00:04:53,118 --> 00:04:54,900
개발자 도구에 버그가 있는 걸까요?

136
00:04:55,417 --> 00:04:57,097
글쎄요, 그렇지는 않습니다.

137
00:04:58,120 --> 00:04:59,888
개발자 도구는 소스 맵에서

138
00:04:59,978 --> 00:05:02,680
정보를 가져와서 그에 따라 표시합니다.

139
00:05:03,972 --> 00:05:05,032
소스 맵을 열어보세요.

140
00:05:05,360 --> 00:05:06,677
두 개의 소스가 있습니다.

141
00:05:07,257 --> 00:05:10,400
개발자 도구는 이 목록을
기반으로 맵 파일을 생성합니다.

142
00:05:11,494 --> 00:05:15,134
개발자 도구에 의해 매핑된 파일은
기울임꼴 이름으로 표시됩니다.

143
00:05:15,840 --> 00:05:17,305
이 줄에 따르면,

144
00:05:17,600 --> 00:05:20,919
개발자 도구는 축소되지 않은
CSS를 매핑하여 표시합니다.

145
00:05:21,792 --> 00:05:24,212
기울임꼴 이름이 없는 다른 CSS 파일은

146
00:05:24,421 --> 00:05:27,440
실제 축소된 CSS 파일입니다.

147
00:05:28,316 --> 00:05:31,786
일부 빌드 도구는 중간 단계를 생략하고

148
00:05:32,071 --> 00:05:35,760
축소된 CSS에서 SCSS로
바로 매핑할 수도 있습니다.

149
00:05:36,787 --> 00:05:37,892
그렇다면,

150
00:05:38,260 --> 00:05:41,029
개발자 도구는 CSS 파일 하나만 표시할 것이고,

151
00:05:41,255 --> 00:05:43,600
이는 여러분의 기대에 더 가까울 수 있습니다.

152
00:05:44,648 --> 00:05:45,168
음,

153
00:05:45,340 --> 00:05:46,734
현재 소스 맵 사양은

154
00:05:46,975 --> 00:05:49,759
매핑을 어떻게 해야 하는지
실제로 감지하지 못합니다.

155
00:05:50,425 --> 00:05:50,907
그러니,

156
00:05:51,238 --> 00:05:52,379
이 점을 알아두세요.

157
00:05:52,524 --> 00:05:54,844
다음에 같은 혼란을 겪지 않도록 말이죠.

158
00:05:56,225 --> 00:05:57,225
그 외에도,

159
00:05:57,416 --> 00:05:59,514
개발자 도구에서 설정을 켜서

160
00:05:59,784 --> 00:06:02,050
매핑된 경우 원래 소스를 먼저 볼 수 있습니다.

161
00:06:02,270 --> 00:06:03,270
매핑된 경우에 말이죠.

162
00:06:04,356 --> 00:06:05,119
기본적으로,

163
00:06:05,343 --> 00:06:08,422
개발자 도구는 모든 파일을
섞어서 함께 보여줍니다.

164
00:06:09,042 --> 00:06:11,540
변경됨과 배포됨으로 그룹화할 수 있습니다.

165
00:06:12,390 --> 00:06:13,394
이 경우,

166
00:06:13,656 --> 00:06:16,979
변경됨 섹션에 원래 파일이 먼저 표시되고

167
00:06:17,405 --> 00:06:20,252
배포됨 섹션에 컴파일된 코드가 표시됩니다.

168
00:06:21,733 --> 00:06:22,733
참고로,

169
00:06:22,806 --> 00:06:25,073
개발자 도구는 스택 추적을 개선하기 위해

170
00:06:25,098 --> 00:06:28,818
x_Google_ignoreList라는 소스
맵 확장 프로그램을 사용합니다.

171
00:06:29,392 --> 00:06:31,020
자세한 내용은 이
링크(goo.gle/ignore-list)를 참조하세요.

172
00:06:31,620 --> 00:06:34,196
작동 방식에 대한 설명 영상도 있습니다.

173
00:06:35,194 --> 00:06:35,799
좋습니다.

174
00:06:36,267 --> 00:06:39,500
이제 소스 맵과 개발자 도구에
대해 모두 알게 되었습니다.

175
00:06:39,930 --> 00:06:41,222
궁금한 점이 있다면,

176
00:06:41,439 --> 00:06:43,480
아래 댓글에 자유롭게 질문해 주세요.

177
00:06:44,200 --> 00:06:45,200
이것으로 끝입니다.

178
00:06:45,320 --> 00:06:47,135
다음 기술 도구 팁에서 만나요.

179
00:06:47,368 --> 00:06:48,641
챠오!