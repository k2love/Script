1
00:00:00,179 --> 00:00:04,746
도커와 컨테이너 이전 시대에 살던 개발자들은 그냥 원시인과 다를 바가 없었습니다

2
00:00:04,940 --> 00:00:08,820
어디 새로 취업하면 개발 환경 세팅을 맞추느라 하루 종일 삽질했었구요

3
00:00:08,940 --> 00:00:14,060
개발 환경 업데이트를 하면 항상 뭐가 망가지기 때문에 그러지 말라고 열심히 기도하기도 했구요

4
00:00:14,180 --> 00:00:17,721
그리고 내가 코드 짠 걸 서버 컴퓨터에 보내서 실행만 하려고 하면

5
00:00:17,912 --> 00:00:22,746
컴퓨터가 에러나고 폭발하고 그런 일들이 많아서 배포하기 전에 고사도 지내고 그랬습니다

6
00:00:23,040 --> 00:00:26,477
하지만 도커와 컨테이너가 등장하고 나서 이 짓거리가 거의 없어졌구요

7
00:00:26,501 --> 00:00:31,440
그래서 그런지 개발자들이 가장 많이 쓰는 툴 1위를 매년 도커가 차지하고 있구요

8
00:00:31,540 --> 00:00:36,976
그리고 또 요즘은 코딩 책을 보려고 해도 아니면 인터넷에서 딥러닝 모델을 다운받아서 돌리려고 해도

9
00:00:37,167 --> 00:00:39,280
도커 명령어부터 보이는 경우들이 많습니다

10
00:00:39,646 --> 00:00:44,471
자 도커가 뭐냐면 리눅스 컨테이너를 기반으로 만든 OS 레벨의 가상화 기술인데

11
00:00:44,603 --> 00:00:47,773
이따구로 설명하면 다 뒤로가기 누르니까 쉽게 이해해보도록 합시다

12
00:00:48,750 --> 00:00:53,520
여러분들이 코딩하다가 망해가지고 서울에다가 이제 뭐 치킨집을 하나 차렸다고 칩시다

13
00:00:53,600 --> 00:00:56,480
근데 잘 돼가지고 이번에 부산에다가 분점을 내고 싶습니다

14
00:00:56,620 --> 00:00:58,720
그러면 부산 지점은 어떻게 운영할 거에요?

15
00:00:59,150 --> 00:01:03,387
가장 쉽게 할 수 있는 게 내가 쓰던 레시피만 보내서 이걸 그대로 따라하라고 하는 거에요

16
00:01:03,621 --> 00:01:06,200
그래도 되겠지만 그러면 인생도 망하는 거구요

17
00:01:06,380 --> 00:01:10,868
자 부산이랑 서울이랑 주방 시설도 다르고 도구도 다르고 재료가 다르고 뭐 그러면

18
00:01:10,988 --> 00:01:12,920
조리 과정에서 문제도 많이 생길 거구요

19
00:01:13,040 --> 00:01:15,190
맛도 살짝 달라질 수밖에 없습니다

20
00:01:15,460 --> 00:01:18,631
그래서 제대로 장사를 하려면 여러분들이 이제 서울에서 쓰던

21
00:01:18,810 --> 00:01:23,326
재료랑 레시피랑 뭐 이런 걸 전부 밀키트처럼 준비를 해서 그걸 부산으로 보내요

22
00:01:23,460 --> 00:01:26,850
그 다음에 부산에서는 이걸 그냥 데우는 식으로만 운영하시면 되는 거에요

23
00:01:27,040 --> 00:01:31,960
좀 큰 프랜차이즈 치킨집들은 전부 이런 식으로 하는데 개발할 때도 똑같습니다

24
00:01:32,113 --> 00:01:36,202
자 내가 같은 코드를요. 각각 다른 컴퓨터에서 실행해야 되는 경우들이 많은데

25
00:01:36,374 --> 00:01:41,301
근데 내 컴퓨터에서 코드가 잘 돌아간다고 자 이걸 다른 컴퓨터에 대충 보내서 실행을 하면

26
00:01:41,513 --> 00:01:42,940
디제스터가 많이 일어납니다

27
00:01:43,160 --> 00:01:47,197
컴퓨터마다 OS도 다르고 설치된 기본 프로그램들 버전도 다르고 그러니까요

28
00:01:47,357 --> 00:01:52,173
그게 싫으면 여러분들이 쓰던 OS랑 프로그램이랑 이런 것들을 전부 똑같이 준비한 다음에

29
00:01:52,278 --> 00:01:54,564
그 다음에 코드를 그 위에 넣으세요. 그 위에서 실행하면 되는 거에요

30
00:01:54,760 --> 00:01:56,940
이러기 위해서 옛날엔 vm이란 걸 썼습니다

31
00:01:57,146 --> 00:02:01,914
어떤 OS 위에다가 다른 OS를 설치하는 건데 굉장히 무겁고 성능도 좋지 않기 때문에

32
00:02:02,093 --> 00:02:04,600
요즘은 그거 대신에 도커랑 컨테이너를 씁니다

33
00:02:05,725 --> 00:02:09,000
자 도커를 쓰면 코드 밀키트 같은 걸 만들 수 있습니다

34
00:02:09,433 --> 00:02:14,240
거기다가 OS 뭐 sdk 필요한 프로그램 라이브러리 코드 뭐 이런 걸 전부 담을 수 있구요

35
00:02:14,380 --> 00:02:19,240
그리고 도커를 쓰면 그 밀키트를요. 버튼 딸깍 눌러서 쉽게 실행하는 것도 가능하구요

36
00:02:19,380 --> 00:02:24,520
그래서 도커는 쉽게 말하면 그냥 코드 밀키트를요. 만들고 실행해주는 간단한 프로그램일 뿐이에요

37
00:02:24,620 --> 00:02:27,949
그리고 참고로 밀키트를 실행하고 있는 가상 컴퓨터가 있는데

38
00:02:28,027 --> 00:02:30,860
자 이런 걸 멋있는 개발자 말로 컨테이너라고 부르구요

39
00:02:31,040 --> 00:02:35,960
근데 말로만 씨부리면 이해가 어렵기 때문에 대충 어떻게 쓰는지 살짝만 맛을 좀 보도록 합시다

40
00:02:37,120 --> 00:02:39,740
자 밀키트를 어떻게 만드냐면 파일이 하나 필요합니다

41
00:02:40,040 --> 00:02:41,580
도커 파일이라는 게 필요하구요

42
00:02:41,720 --> 00:02:46,808
여기다가 어떤 OS를 쓸 건지 어떤 프로그램이랑 라이브러리랑 sdk를 설치할 건지

43
00:02:47,026 --> 00:02:50,080
그리고 어떤 코드를 어떻게 실행할 건지 쭉 적을 수 있습니다

44
00:02:50,380 --> 00:02:53,840
그 다음에 명령어 하나만 입력하면 포장이 되구요

45
00:02:53,980 --> 00:02:57,040
그 다음에 클릭 한 번으로 이 밀키트를 실행할 수 있습니다

46
00:02:57,240 --> 00:02:59,080
그러면 안에 있던 코드가 실행이 될 거예요

47
00:02:59,144 --> 00:03:04,072
근데 여러분이 도커 파일에서 설정했던 자 그 OS랑 작업 환경 라이브러리 그 위에서

48
00:03:04,336 --> 00:03:06,446
내 코드를 안정적으로 실행해 줄 거구요

49
00:03:06,560 --> 00:03:08,540
이게 도커와 컨테이너 사용법 끝이에요

50
00:03:08,680 --> 00:03:09,680
다 배우신 거구요

51
00:03:10,660 --> 00:03:16,187
도커와 컨테이너가 발견되고 나서 자 개발자들도 이걸 써서 온갖 신기한 짓을 하기 시작을 했습니다

52
00:03:16,480 --> 00:03:21,551
자 밀키트 덕분에 이제 배포 같은 것도 되게 쉬워졌기 때문에 자 요즘은 어떤 식으로 서버를 개발하냐면

53
00:03:21,736 --> 00:03:25,095
어 예전엔 서버 기능을 하나의 프로그램 안에 다 쑤셔 넣었었는데

54
00:03:25,208 --> 00:03:28,600
자 지금은 자에게 쪼개서 여러 프로그램으로 이렇게 나누기 시작을 했습니다

55
00:03:28,780 --> 00:03:31,980
이걸 MSA 라고 하는데 요즘 백엔드의 밥줄이 되었구요

56
00:03:32,100 --> 00:03:34,751
그리고 프로그램을 빌드하고 테스트하고 배포하는 작업이

57
00:03:34,970 --> 00:03:37,486
도커 덕분에 초딩도 할 수 있을 정도가 됐기 때문에

58
00:03:37,685 --> 00:03:41,040
이제 자동 배포 같은 걸 도입하기 시작하는 곳들이 매우 많아졌구요

59
00:03:41,160 --> 00:03:43,182
그리고 도커를 쓰면 원하는 프로그램을요

60
00:03:43,273 --> 00:03:48,533
원하는 버전 그리고 원하는 OS 위에 되게 쉽게 설치하고 깔끔하게 삭제까지도 할 수 있기 때문에

61
00:03:48,781 --> 00:03:53,466
내 로컬 컴퓨터에 뭐 설치하기 싫어하는 결벽증 걸린 개발자들이 생기기 시작했구요

62
00:03:54,740 --> 00:03:57,220
도커의 실체가 궁금하시면 실은 별거 아니구요

63
00:03:57,359 --> 00:04:00,218
리눅스 자체에 원래 가벼운 가상화 기술 같은 게 있었는데

64
00:04:00,424 --> 00:04:02,800
이런 걸 쓰면 컨테이너라는 걸 만들 수 있구요

65
00:04:02,940 --> 00:04:05,240
그냥 가상 컴퓨터라고 생각하면 될 것 같습니다

66
00:04:05,600 --> 00:04:09,380
이걸 일반 사람들도 편하게 만들 수 있게 도와주는 프로그램 같은 것도 있구요

67
00:04:09,580 --> 00:04:14,000
근데 이것들을 심지어 개도 편하게 쓸 수 있게 만들어 놓은 게 도커라는 툴일 뿐이에요

68
00:04:14,120 --> 00:04:17,600
그래서 참고로 도커 대신 쓸 수 있는 대용품도 몇 가지 있구요

69
00:04:17,740 --> 00:04:21,420
아니면 도커 없이 직접 리눅스 컨테이너를 띄우는 것도 가능합니다

70
00:04:22,580 --> 00:04:23,980
당연히 단점도 있습니다

71
00:04:24,260 --> 00:04:26,200
자, 새로운 보안 이슈들도 챙겨야 되구요

72
00:04:26,340 --> 00:04:28,855
컨테이너가 많아지면 그걸 관리하는 인력도 필요하고

73
00:04:29,000 --> 00:04:31,980
서버 비용 같은 것도 초창기엔 생각보다 많이 들 거구요

74
00:04:32,100 --> 00:04:36,700
그리고 뭔가 데이터를 영구적으로 안정적으로 저장해야 될 땐 컨테이너가 별로일 수도 있습니다

75
00:04:37,060 --> 00:04:41,020
근데 가장 중요한 건 코딩 초보자들의 러닝커브가 심해졌다는 거구요

76
00:04:41,213 --> 00:04:46,092
하도 도커가 좋다니까 코딩 입문할 때 도커 세팅부터 시키는 강의나 책들도 있는데

77
00:04:46,296 --> 00:04:48,659
근데 그런 짓거리를 좀 비유를 해보자면

78
00:04:48,834 --> 00:04:53,097
내가 요리를 배운다고 하면서 남이 다 만들어 놓은 세트장에 가서

79
00:04:53,155 --> 00:04:58,210
치킨 밀키트를 가져와서 이렇게 뜯어서 튀겨보기 이 정도만 하는 거잖아요

80
00:04:58,432 --> 00:05:01,104
여러분들이 그것만 하다가 죽고 싶으면 그러시면 되는데

81
00:05:01,189 --> 00:05:07,834
근데 나중에 나만의 치킨 요리를 만들어서 나만의 밀키트도 만들고 나만의 분점도 내고 그러고 싶으면

82
00:05:07,974 --> 00:05:12,507
남의 밀키트 같은 거 도움 없이 직접 내가 요리를 해보는 것도 중요하구요

83
00:05:12,647 --> 00:05:19,064
그러니까 코딩 입문을 하실 땐 도커 도움 없이 내 컴퓨터랑 직접 싸우면서 UFC를 한번 해보란 소리에요

84
00:05:19,416 --> 00:05:25,320
그런 경험이 있어야 나중에 이제 도커 파일을 자신있게 작성해서 이렇게 빌드하고 배포하고 그럴 수 있는 거예요

85
00:05:25,460 --> 00:05:27,610
근데 지금은 코딩 배우는 시간이 아니기 때문에

86
00:05:27,708 --> 00:05:31,723
자 도커라는 간단한 툴을 배우는 시간이기 때문에 잔소리는 여기까지 하고요

87
00:05:31,953 --> 00:05:36,188
이제 도커를요 혼자 알아서 이렇게 잘 쓸 수 있는 방법을 주로 준비해 봤으니까

88
00:05:36,353 --> 00:05:37,920
이런 것들 배워 가시면 될 것 같습니다

89
00:05:38,140 --> 00:05:42,740
그 다음에 뒤에 가서 도커 컴포즈랑 오케스트레이션 툴 사용법까지 좀 알아보도록 합시다

